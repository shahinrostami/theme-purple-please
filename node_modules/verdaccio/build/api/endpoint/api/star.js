"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _lodash = _interopRequireDefault(require("lodash"));

var _debug = _interopRequireDefault(require("debug"));

var _constants = require("../../../lib/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = (0, _debug.default)('verdaccio:star');

function _default(storage) {
  const validateInputs = (newUsers, localUsers, username, isStar) => {
    const isExistlocalUsers = _lodash.default.isNil(localUsers[username]) === false;

    if (isStar && isExistlocalUsers && localUsers[username]) {
      return true;
    } else if (!isStar && isExistlocalUsers) {
      return false;
    } else if (!isStar && !isExistlocalUsers) {
      return true;
    }

    return false;
  };

  return (req, res, next) => {
    const name = req.params.package;
    debug('starring a package for %o', name);

    const afterChangePackage = function (err) {
      if (err) {
        return next(err);
      }

      res.status(_constants.HTTP_STATUS.OK);
      next({
        success: true
      });
    };

    storage.getPackage({
      name,
      req,
      callback: function (err, info) {
        if (err) {
          return next(err);
        }

        const newStarUser = req.body[_constants.USERS];
        const remoteUsername = req.remote_user.name;
        const localStarUsers = info[_constants.USERS]; // Check is star or unstar

        const isStar = Object.keys(newStarUser).includes(remoteUsername);

        if (_lodash.default.isNil(localStarUsers) === false && validateInputs(newStarUser, localStarUsers, remoteUsername, isStar)) {
          return afterChangePackage();
        }

        const users = isStar ? _objectSpread(_objectSpread({}, localStarUsers), {}, {
          [remoteUsername]: true
        }) : _lodash.default.reduce(localStarUsers, (users, value, key) => {
          if (key !== remoteUsername) {
            users[key] = value;
          }

          return users;
        }, {});
        storage.changePackage(name, _objectSpread(_objectSpread({}, info), {}, {
          users
        }), req.body._rev, function (err) {
          afterChangePackage(err);
        });
      }
    });
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvYXBpL3N0YXIudHMiXSwibmFtZXMiOlsiZGVidWciLCJzdG9yYWdlIiwidmFsaWRhdGVJbnB1dHMiLCJuZXdVc2VycyIsImxvY2FsVXNlcnMiLCJ1c2VybmFtZSIsImlzU3RhciIsImlzRXhpc3Rsb2NhbFVzZXJzIiwiXyIsImlzTmlsIiwicmVxIiwicmVzIiwibmV4dCIsIm5hbWUiLCJwYXJhbXMiLCJwYWNrYWdlIiwiYWZ0ZXJDaGFuZ2VQYWNrYWdlIiwiZXJyIiwic3RhdHVzIiwiSFRUUF9TVEFUVVMiLCJPSyIsInN1Y2Nlc3MiLCJnZXRQYWNrYWdlIiwiY2FsbGJhY2siLCJpbmZvIiwibmV3U3RhclVzZXIiLCJib2R5IiwiVVNFUlMiLCJyZW1vdGVVc2VybmFtZSIsInJlbW90ZV91c2VyIiwibG9jYWxTdGFyVXNlcnMiLCJPYmplY3QiLCJrZXlzIiwiaW5jbHVkZXMiLCJ1c2VycyIsInJlZHVjZSIsInZhbHVlIiwia2V5IiwiY2hhbmdlUGFja2FnZSIsIl9yZXYiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFHQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7OztBQUlBLE1BQU1BLEtBQUssR0FBRyxvQkFBVyxnQkFBWCxDQUFkOztBQUNlLGtCQUFVQyxPQUFWLEVBQTBHO0FBQ3ZILFFBQU1DLGNBQWMsR0FBRyxDQUFDQyxRQUFELEVBQVdDLFVBQVgsRUFBdUJDLFFBQXZCLEVBQWlDQyxNQUFqQyxLQUFxRDtBQUMxRSxVQUFNQyxpQkFBaUIsR0FBR0MsZ0JBQUVDLEtBQUYsQ0FBUUwsVUFBVSxDQUFDQyxRQUFELENBQWxCLE1BQWtDLEtBQTVEOztBQUNBLFFBQUlDLE1BQU0sSUFBSUMsaUJBQVYsSUFBK0JILFVBQVUsQ0FBQ0MsUUFBRCxDQUE3QyxFQUF5RDtBQUN2RCxhQUFPLElBQVA7QUFDRCxLQUZELE1BRU8sSUFBSSxDQUFDQyxNQUFELElBQVdDLGlCQUFmLEVBQWtDO0FBQ3ZDLGFBQU8sS0FBUDtBQUNELEtBRk0sTUFFQSxJQUFJLENBQUNELE1BQUQsSUFBVyxDQUFDQyxpQkFBaEIsRUFBbUM7QUFDeEMsYUFBTyxJQUFQO0FBQ0Q7O0FBQ0QsV0FBTyxLQUFQO0FBQ0QsR0FWRDs7QUFZQSxTQUFPLENBQUNHLEdBQUQsRUFBc0JDLEdBQXRCLEVBQXFDQyxJQUFyQyxLQUFzRTtBQUMzRSxVQUFNQyxJQUFJLEdBQUdILEdBQUcsQ0FBQ0ksTUFBSixDQUFXQyxPQUF4QjtBQUNBZixJQUFBQSxLQUFLLENBQUMsMkJBQUQsRUFBOEJhLElBQTlCLENBQUw7O0FBQ0EsVUFBTUcsa0JBQWtCLEdBQUcsVUFBVUMsR0FBVixFQUF1QjtBQUNoRCxVQUFJQSxHQUFKLEVBQVM7QUFDUCxlQUFPTCxJQUFJLENBQUNLLEdBQUQsQ0FBWDtBQUNEOztBQUNETixNQUFBQSxHQUFHLENBQUNPLE1BQUosQ0FBV0MsdUJBQVlDLEVBQXZCO0FBQ0FSLE1BQUFBLElBQUksQ0FBQztBQUNIUyxRQUFBQSxPQUFPLEVBQUU7QUFETixPQUFELENBQUo7QUFHRCxLQVJEOztBQVVBcEIsSUFBQUEsT0FBTyxDQUFDcUIsVUFBUixDQUFtQjtBQUNqQlQsTUFBQUEsSUFEaUI7QUFFakJILE1BQUFBLEdBRmlCO0FBR2pCYSxNQUFBQSxRQUFRLEVBQUUsVUFBVU4sR0FBVixFQUFlTyxJQUFmLEVBQXFCO0FBQzdCLFlBQUlQLEdBQUosRUFBUztBQUNQLGlCQUFPTCxJQUFJLENBQUNLLEdBQUQsQ0FBWDtBQUNEOztBQUNELGNBQU1RLFdBQVcsR0FBR2YsR0FBRyxDQUFDZ0IsSUFBSixDQUFTQyxnQkFBVCxDQUFwQjtBQUNBLGNBQU1DLGNBQWMsR0FBR2xCLEdBQUcsQ0FBQ21CLFdBQUosQ0FBZ0JoQixJQUF2QztBQUNBLGNBQU1pQixjQUFjLEdBQUdOLElBQUksQ0FBQ0csZ0JBQUQsQ0FBM0IsQ0FONkIsQ0FPN0I7O0FBQ0EsY0FBTXJCLE1BQU0sR0FBR3lCLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZUCxXQUFaLEVBQXlCUSxRQUF6QixDQUFrQ0wsY0FBbEMsQ0FBZjs7QUFDQSxZQUFJcEIsZ0JBQUVDLEtBQUYsQ0FBUXFCLGNBQVIsTUFBNEIsS0FBNUIsSUFBcUM1QixjQUFjLENBQUN1QixXQUFELEVBQWNLLGNBQWQsRUFBOEJGLGNBQTlCLEVBQThDdEIsTUFBOUMsQ0FBdkQsRUFBOEc7QUFDNUcsaUJBQU9VLGtCQUFrQixFQUF6QjtBQUNEOztBQUNELGNBQU1rQixLQUFLLEdBQUc1QixNQUFNLG1DQUVYd0IsY0FGVztBQUdkLFdBQUNGLGNBQUQsR0FBa0I7QUFISixhQUtoQnBCLGdCQUFFMkIsTUFBRixDQUNFTCxjQURGLEVBRUUsQ0FBQ0ksS0FBRCxFQUFRRSxLQUFSLEVBQWVDLEdBQWYsS0FBdUI7QUFDckIsY0FBSUEsR0FBRyxLQUFLVCxjQUFaLEVBQTRCO0FBQzFCTSxZQUFBQSxLQUFLLENBQUNHLEdBQUQsQ0FBTCxHQUFhRCxLQUFiO0FBQ0Q7O0FBQ0QsaUJBQU9GLEtBQVA7QUFDRCxTQVBILEVBUUUsRUFSRixDQUxKO0FBZUFqQyxRQUFBQSxPQUFPLENBQUNxQyxhQUFSLENBQXNCekIsSUFBdEIsa0NBQWlDVyxJQUFqQztBQUF1Q1UsVUFBQUE7QUFBdkMsWUFBZ0R4QixHQUFHLENBQUNnQixJQUFKLENBQVNhLElBQXpELEVBQStELFVBQVV0QixHQUFWLEVBQWU7QUFDNUVELFVBQUFBLGtCQUFrQixDQUFDQyxHQUFELENBQWxCO0FBQ0QsU0FGRDtBQUdEO0FBakNnQixLQUFuQjtBQW1DRCxHQWhERDtBQWlERCIsInNvdXJjZXNDb250ZW50IjpbIi8vIEBmbG93XG5cbmltcG9ydCB7IFJlc3BvbnNlIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IGJ1aWxkRGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgVVNFUlMsIEhUVFBfU1RBVFVTIH0gZnJvbSAnLi4vLi4vLi4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgeyAkUmVxdWVzdEV4dGVuZCwgJE5leHRGdW5jdGlvblZlciwgSVN0b3JhZ2VIYW5kbGVyIH0gZnJvbSAnLi4vLi4vLi4vLi4vdHlwZXMnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vLi4vLi4vbGliL2xvZ2dlcic7XG5cbmNvbnN0IGRlYnVnID0gYnVpbGREZWJ1ZygndmVyZGFjY2lvOnN0YXInKTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChzdG9yYWdlOiBJU3RvcmFnZUhhbmRsZXIpOiAocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiBSZXNwb25zZSwgbmV4dDogJE5leHRGdW5jdGlvblZlcikgPT4gdm9pZCB7XG4gIGNvbnN0IHZhbGlkYXRlSW5wdXRzID0gKG5ld1VzZXJzLCBsb2NhbFVzZXJzLCB1c2VybmFtZSwgaXNTdGFyKTogYm9vbGVhbiA9PiB7XG4gICAgY29uc3QgaXNFeGlzdGxvY2FsVXNlcnMgPSBfLmlzTmlsKGxvY2FsVXNlcnNbdXNlcm5hbWVdKSA9PT0gZmFsc2U7XG4gICAgaWYgKGlzU3RhciAmJiBpc0V4aXN0bG9jYWxVc2VycyAmJiBsb2NhbFVzZXJzW3VzZXJuYW1lXSkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIGlmICghaXNTdGFyICYmIGlzRXhpc3Rsb2NhbFVzZXJzKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIGlmICghaXNTdGFyICYmICFpc0V4aXN0bG9jYWxVc2Vycykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICByZXR1cm4gKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogUmVzcG9uc2UsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiB2b2lkID0+IHtcbiAgICBjb25zdCBuYW1lID0gcmVxLnBhcmFtcy5wYWNrYWdlO1xuICAgIGRlYnVnKCdzdGFycmluZyBhIHBhY2thZ2UgZm9yICVvJywgbmFtZSk7XG4gICAgY29uc3QgYWZ0ZXJDaGFuZ2VQYWNrYWdlID0gZnVuY3Rpb24gKGVycj86IEVycm9yKSB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGVycik7XG4gICAgICB9XG4gICAgICByZXMuc3RhdHVzKEhUVFBfU1RBVFVTLk9LKTtcbiAgICAgIG5leHQoe1xuICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHN0b3JhZ2UuZ2V0UGFja2FnZSh7XG4gICAgICBuYW1lLFxuICAgICAgcmVxLFxuICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uIChlcnIsIGluZm8pIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiBuZXh0KGVycik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbmV3U3RhclVzZXIgPSByZXEuYm9keVtVU0VSU107XG4gICAgICAgIGNvbnN0IHJlbW90ZVVzZXJuYW1lID0gcmVxLnJlbW90ZV91c2VyLm5hbWU7XG4gICAgICAgIGNvbnN0IGxvY2FsU3RhclVzZXJzID0gaW5mb1tVU0VSU107XG4gICAgICAgIC8vIENoZWNrIGlzIHN0YXIgb3IgdW5zdGFyXG4gICAgICAgIGNvbnN0IGlzU3RhciA9IE9iamVjdC5rZXlzKG5ld1N0YXJVc2VyKS5pbmNsdWRlcyhyZW1vdGVVc2VybmFtZSk7XG4gICAgICAgIGlmIChfLmlzTmlsKGxvY2FsU3RhclVzZXJzKSA9PT0gZmFsc2UgJiYgdmFsaWRhdGVJbnB1dHMobmV3U3RhclVzZXIsIGxvY2FsU3RhclVzZXJzLCByZW1vdGVVc2VybmFtZSwgaXNTdGFyKSkge1xuICAgICAgICAgIHJldHVybiBhZnRlckNoYW5nZVBhY2thZ2UoKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1c2VycyA9IGlzU3RhclxuICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAuLi5sb2NhbFN0YXJVc2VycyxcbiAgICAgICAgICAgICAgW3JlbW90ZVVzZXJuYW1lXTogdHJ1ZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgICA6IF8ucmVkdWNlKFxuICAgICAgICAgICAgICBsb2NhbFN0YXJVc2VycyxcbiAgICAgICAgICAgICAgKHVzZXJzLCB2YWx1ZSwga2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPT0gcmVtb3RlVXNlcm5hbWUpIHtcbiAgICAgICAgICAgICAgICAgIHVzZXJzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHVzZXJzO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7fVxuICAgICAgICAgICAgKTtcbiAgICAgICAgc3RvcmFnZS5jaGFuZ2VQYWNrYWdlKG5hbWUsIHsgLi4uaW5mbywgdXNlcnMgfSwgcmVxLmJvZHkuX3JldiwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgIGFmdGVyQ2hhbmdlUGFja2FnZShlcnIpO1xuICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH07XG59XG4iXX0=