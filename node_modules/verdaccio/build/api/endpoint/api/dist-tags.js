"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _mime = _interopRequireDefault(require("mime"));

var _lodash = _interopRequireDefault(require("lodash"));

var _middleware = require("../../middleware");

var _constants = require("../../../lib/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(route, auth, storage) {
  const can = (0, _middleware.allow)(auth);

  const tag_package_version = function (req, res, next) {
    if (_lodash.default.isString(req.body) === false) {
      return next('route');
    }

    const tags = {};
    tags[req.params.tag] = req.body;
    storage.mergeTags(req.params.package, tags, function (err) {
      if (err) {
        return next(err);
      }

      res.status(_constants.HTTP_STATUS.CREATED);
      return next({
        ok: _constants.API_MESSAGE.TAG_ADDED
      });
    });
  }; // tagging a package


  route.put('/:package/:tag', can('publish'), (0, _middleware.media)(_mime.default.getType('json')), tag_package_version);
  route.post('/-/package/:package/dist-tags/:tag', can('publish'), (0, _middleware.media)(_mime.default.getType('json')), tag_package_version);
  route.put('/-/package/:package/dist-tags/:tag', can('publish'), (0, _middleware.media)(_mime.default.getType('json')), tag_package_version);
  route.delete('/-/package/:package/dist-tags/:tag', can('publish'), function (req, res, next) {
    const tags = {};
    tags[req.params.tag] = null;
    storage.mergeTags(req.params.package, tags, function (err) {
      if (err) {
        return next(err);
      }

      res.status(_constants.HTTP_STATUS.CREATED);
      return next({
        ok: _constants.API_MESSAGE.TAG_REMOVED
      });
    });
  });
  route.get('/-/package/:package/dist-tags', can('access'), function (req, res, next) {
    storage.getPackage({
      name: req.params.package,
      uplinksLook: true,
      req,
      callback: function (err, info) {
        if (err) {
          return next(err);
        }

        next(info[_constants.DIST_TAGS]);
      }
    });
  });
  route.post('/-/package/:package/dist-tags', can('publish'), function (req, res, next) {
    storage.mergeTags(req.params.package, req.body, function (err) {
      if (err) {
        return next(err);
      }

      res.status(_constants.HTTP_STATUS.CREATED);
      return next({
        ok: _constants.API_MESSAGE.TAG_UPDATED
      });
    });
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvYXBpL2Rpc3QtdGFncy50cyJdLCJuYW1lcyI6WyJyb3V0ZSIsImF1dGgiLCJzdG9yYWdlIiwiY2FuIiwidGFnX3BhY2thZ2VfdmVyc2lvbiIsInJlcSIsInJlcyIsIm5leHQiLCJfIiwiaXNTdHJpbmciLCJib2R5IiwidGFncyIsInBhcmFtcyIsInRhZyIsIm1lcmdlVGFncyIsInBhY2thZ2UiLCJlcnIiLCJzdGF0dXMiLCJIVFRQX1NUQVRVUyIsIkNSRUFURUQiLCJvayIsIkFQSV9NRVNTQUdFIiwiVEFHX0FEREVEIiwicHV0IiwibWltZSIsImdldFR5cGUiLCJwb3N0IiwiZGVsZXRlIiwiVEFHX1JFTU9WRUQiLCJnZXQiLCJnZXRQYWNrYWdlIiwibmFtZSIsInVwbGlua3NMb29rIiwiY2FsbGJhY2siLCJpbmZvIiwiRElTVF9UQUdTIiwiVEFHX1VQREFURUQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFJQTs7QUFRQTs7OztBQUVlLGtCQUFVQSxLQUFWLEVBQXlCQyxJQUF6QixFQUFzQ0MsT0FBdEMsRUFBc0U7QUFDbkYsUUFBTUMsR0FBRyxHQUFHLHVCQUFNRixJQUFOLENBQVo7O0FBQ0EsUUFBTUcsbUJBQW1CLEdBQUcsVUFDMUJDLEdBRDBCLEVBRTFCQyxHQUYwQixFQUcxQkMsSUFIMEIsRUFJUjtBQUNsQixRQUFJQyxnQkFBRUMsUUFBRixDQUFXSixHQUFHLENBQUNLLElBQWYsTUFBeUIsS0FBN0IsRUFBb0M7QUFDbEMsYUFBT0gsSUFBSSxDQUFDLE9BQUQsQ0FBWDtBQUNEOztBQUVELFVBQU1JLElBQUksR0FBRyxFQUFiO0FBQ0FBLElBQUFBLElBQUksQ0FBQ04sR0FBRyxDQUFDTyxNQUFKLENBQVdDLEdBQVosQ0FBSixHQUF1QlIsR0FBRyxDQUFDSyxJQUEzQjtBQUNBUixJQUFBQSxPQUFPLENBQUNZLFNBQVIsQ0FBa0JULEdBQUcsQ0FBQ08sTUFBSixDQUFXRyxPQUE3QixF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QUMvQyxVQUFJQSxHQUFKLEVBQVM7QUFDUCxlQUFPVCxJQUFJLENBQUNTLEdBQUQsQ0FBWDtBQUNEOztBQUNEVixNQUFBQSxHQUFHLENBQUNXLE1BQUosQ0FBV0MsdUJBQVlDLE9BQXZCO0FBQ0EsYUFBT1osSUFBSSxDQUFDO0FBQ1ZhLFFBQUFBLEVBQUUsRUFBRUMsdUJBQVllO0FBRE4sT0FBRCxDQUFYO0FBR0QsS0FYSDtBQWFELEdBakJIO0FBbUJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IG1pbWUgZnJvbSAnbWltZSc7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgeyBWZXJkYWNjaW9FcnJvciB9IGZyb20gJ0B2ZXJkYWNjaW8vY29tbW9ucy1hcGknO1xuaW1wb3J0IHsgUGFja2FnZSB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuaW1wb3J0IHsgbWVkaWEsIGFsbG93IH0gZnJvbSAnLi4vLi4vbWlkZGxld2FyZSc7XG5pbXBvcnQge1xuICBJQXV0aCxcbiAgJFJlc3BvbnNlRXh0ZW5kLFxuICAkUmVxdWVzdEV4dGVuZCxcbiAgJE5leHRGdW5jdGlvblZlcixcbiAgSVN0b3JhZ2VIYW5kbGVyXG59IGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IEFQSV9NRVNTQUdFLCBIVFRQX1NUQVRVUywgRElTVF9UQUdTIH0gZnJvbSAnLi4vLi4vLi4vbGliL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChyb3V0ZTogUm91dGVyLCBhdXRoOiBJQXV0aCwgc3RvcmFnZTogSVN0b3JhZ2VIYW5kbGVyKTogdm9pZCB7XG4gIGNvbnN0IGNhbiA9IGFsbG93KGF1dGgpO1xuICBjb25zdCB0YWdfcGFja2FnZV92ZXJzaW9uID0gZnVuY3Rpb24gKFxuICAgIHJlcTogJFJlcXVlc3RFeHRlbmQsXG4gICAgcmVzOiAkUmVzcG9uc2VFeHRlbmQsXG4gICAgbmV4dDogJE5leHRGdW5jdGlvblZlclxuICApOiAkTmV4dEZ1bmN0aW9uVmVyIHtcbiAgICBpZiAoXy5pc1N0cmluZyhyZXEuYm9keSkgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gbmV4dCgncm91dGUnKTtcbiAgICB9XG5cbiAgICBjb25zdCB0YWdzID0ge307XG4gICAgdGFnc1tyZXEucGFyYW1zLnRhZ10gPSByZXEuYm9keTtcbiAgICBzdG9yYWdlLm1lcmdlVGFncyhyZXEucGFyYW1zLnBhY2thZ2UsIHRhZ3MsIGZ1bmN0aW9uIChlcnI6IEVycm9yKTogJE5leHRGdW5jdGlvblZlciB7XG4gICAgICBpZiAoZXJyKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGVycik7XG4gICAgICB9XG4gICAgICByZXMuc3RhdHVzKEhUVFBfU1RBVFVTLkNSRUFURUQpO1xuICAgICAgcmV0dXJuIG5leHQoeyBvazogQVBJX01FU1NBR0UuVEFHX0FEREVEIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIHRhZ2dpbmcgYSBwYWNrYWdlXG4gIHJvdXRlLnB1dCgnLzpwYWNrYWdlLzp0YWcnLCBjYW4oJ3B1Ymxpc2gnKSwgbWVkaWEobWltZS5nZXRUeXBlKCdqc29uJykpLCB0YWdfcGFja2FnZV92ZXJzaW9uKTtcblxuICByb3V0ZS5wb3N0KFxuICAgICcvLS9wYWNrYWdlLzpwYWNrYWdlL2Rpc3QtdGFncy86dGFnJyxcbiAgICBjYW4oJ3B1Ymxpc2gnKSxcbiAgICBtZWRpYShtaW1lLmdldFR5cGUoJ2pzb24nKSksXG4gICAgdGFnX3BhY2thZ2VfdmVyc2lvblxuICApO1xuXG4gIHJvdXRlLnB1dChcbiAgICAnLy0vcGFja2FnZS86cGFja2FnZS9kaXN0LXRhZ3MvOnRhZycsXG4gICAgY2FuKCdwdWJsaXNoJyksXG4gICAgbWVkaWEobWltZS5nZXRUeXBlKCdqc29uJykpLFxuICAgIHRhZ19wYWNrYWdlX3ZlcnNpb25cbiAgKTtcblxuICByb3V0ZS5kZWxldGUoXG4gICAgJy8tL3BhY2thZ2UvOnBhY2thZ2UvZGlzdC10YWdzLzp0YWcnLFxuICAgIGNhbigncHVibGlzaCcpLFxuICAgIGZ1bmN0aW9uIChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgICAgY29uc3QgdGFncyA9IHt9O1xuICAgICAgdGFnc1tyZXEucGFyYW1zLnRhZ10gPSBudWxsO1xuICAgICAgc3RvcmFnZS5tZXJnZVRhZ3MocmVxLnBhcmFtcy5wYWNrYWdlLCB0YWdzLCBmdW5jdGlvbiAoZXJyOiBWZXJkYWNjaW9FcnJvcik6ICROZXh0RnVuY3Rpb25WZXIge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICByZXMuc3RhdHVzKEhUVFBfU1RBVFVTLkNSRUFURUQpO1xuICAgICAgICByZXR1cm4gbmV4dCh7XG4gICAgICAgICAgb2s6IEFQSV9NRVNTQUdFLlRBR19SRU1PVkVEXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICApO1xuXG4gIHJvdXRlLmdldChcbiAgICAnLy0vcGFja2FnZS86cGFja2FnZS9kaXN0LXRhZ3MnLFxuICAgIGNhbignYWNjZXNzJyksXG4gICAgZnVuY3Rpb24gKHJlcTogJFJlcXVlc3RFeHRlbmQsIHJlczogJFJlc3BvbnNlRXh0ZW5kLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgICBzdG9yYWdlLmdldFBhY2thZ2Uoe1xuICAgICAgICBuYW1lOiByZXEucGFyYW1zLnBhY2thZ2UsXG4gICAgICAgIHVwbGlua3NMb29rOiB0cnVlLFxuICAgICAgICByZXEsXG4gICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbiAoZXJyOiBWZXJkYWNjaW9FcnJvciwgaW5mbzogUGFja2FnZSk6ICROZXh0RnVuY3Rpb25WZXIge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXh0KGVycik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgbmV4dChpbmZvW0RJU1RfVEFHU10pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICk7XG5cbiAgcm91dGUucG9zdChcbiAgICAnLy0vcGFja2FnZS86cGFja2FnZS9kaXN0LXRhZ3MnLFxuICAgIGNhbigncHVibGlzaCcpLFxuICAgIGZ1bmN0aW9uIChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6ICRSZXNwb25zZUV4dGVuZCwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgICAgc3RvcmFnZS5tZXJnZVRhZ3MoXG4gICAgICAgIHJlcS5wYXJhbXMucGFja2FnZSxcbiAgICAgICAgcmVxLmJvZHksXG4gICAgICAgIGZ1bmN0aW9uIChlcnI6IFZlcmRhY2Npb0Vycm9yKTogJE5leHRGdW5jdGlvblZlciB7XG4gICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgcmV0dXJuIG5leHQoZXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmVzLnN0YXR1cyhIVFRQX1NUQVRVUy5DUkVBVEVEKTtcbiAgICAgICAgICByZXR1cm4gbmV4dCh7XG4gICAgICAgICAgICBvazogQVBJX01FU1NBR0UuVEFHX1VQREFURURcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgKTtcbiAgICB9XG4gICk7XG59XG4iXX0=