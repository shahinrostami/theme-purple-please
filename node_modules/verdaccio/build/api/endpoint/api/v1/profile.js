"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../../../../lib/constants");

var _utils = require("../../../../lib/utils");

var _authUtils = require("../../../../lib/auth-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _default(route, auth) {
  function buildProfile(name) {
    return {
      tfa: false,
      name,
      email: '',
      email_verified: false,
      created: '',
      updated: '',
      cidr_whitelist: null,
      fullname: ''
    };
  }

  route.get('/-/npm/v1/user', function (req, res, next) {
    if (_lodash.default.isNil(req.remote_user.name) === false) {
      return next(buildProfile(req.remote_user.name));
    }

    res.status(_constants.HTTP_STATUS.UNAUTHORIZED);
    return next({
      message: _constants.API_ERROR.MUST_BE_LOGGED
    });
  });
  route.post('/-/npm/v1/user', function (req, res, next) {
    if (_lodash.default.isNil(req.remote_user.name)) {
      res.status(_constants.HTTP_STATUS.UNAUTHORIZED);
      return next({
        message: _constants.API_ERROR.MUST_BE_LOGGED
      });
    }

    const {
      password,
      tfa
    } = req.body;
    const {
      name
    } = req.remote_user;

    if (_lodash.default.isNil(password) === false) {
      if ((0, _authUtils.validatePassword)(password.new) === false) {
        /* eslint new-cap:off */
        return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.UNAUTHORIZED, _constants.API_ERROR.PASSWORD_SHORT()));
        /* eslint new-cap:off */
      }

      auth.changePassword(name, password.old, password.new, (err, isUpdated) => {
        if (_lodash.default.isNull(err) === false) {
          return next(_utils.ErrorCode.getCode(err.status, err.message) || _utils.ErrorCode.getConflict(err.message));
        }

        if (isUpdated) {
          return next(buildProfile(req.remote_user.name));
        }

        return next(_utils.ErrorCode.getInternalError(_constants.API_ERROR.INTERNAL_SERVER_ERROR));
      });
    } else if (_lodash.default.isNil(tfa) === false) {
      return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.SERVICE_UNAVAILABLE, _constants.SUPPORT_ERRORS.TFA_DISABLED));
    } else {
      return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.INTERNAL_ERROR, _constants.APP_ERROR.PROFILE_ERROR));
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9hcGkvZW5kcG9pbnQvYXBpL3YxL3Byb2ZpbGUudHMiXSwibmFtZXMiOlsicm91dGUiLCJhdXRoIiwiYnVpbGRQcm9maWxlIiwibmFtZSIsInRmYSIsImVtYWlsIiwiZW1haWxfdmVyaWZpZWQiLCJjcmVhdGVkIiwidXBkYXRlZCIsImNpZHJfd2hpdGVsaXN0IiwiZnVsbG5hbWUiLCJnZXQiLCJyZXEiLCJyZXMiLCJuZXh0IiwiXyIsImlzTmlsIiwicmVtb3RlX3VzZXIiLCJzdGF0dXMiLCJIVFRQX1NUQVRVUyIsIlVOQVVUSE9SSVpFRCIsIm1lc3NhZ2UiLCJBUElfRVJST1IiLCJNVVNUX0JFX0xPR0dFRCIsInBvc3QiLCJwYXNzd29yZCIsImJvZHkiLCJuZXciLCJFcnJvckNvZGUiLCJnZXRDb2RlIiwiUEFTU1dPUkRfU0hPUlQiLCJjaGFuZ2VQYXNzd29yZCIsIm9sZCIsImVyciIsImlzVXBkYXRlZCIsImlzTnVsbCIsImdldENvbmZsaWN0IiwiZ2V0SW50ZXJuYWxFcnJvciIsIklOVEVSTkFMX1NFUlZFUl9FUlJPUiIsIlNFUlZJQ0VfVU5BVkFJTEFCTEUiLCJTVVBQT1JUX0VSUk9SUyIsIlRGQV9ESVNBQkxFRCIsIklOVEVSTkFMX0VSUk9SIiwiQVBQX0VSUk9SIiwiUFJPRklMRV9FUlJPUiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOzs7O0FBZWUsa0JBQVVBLEtBQVYsRUFBeUJDLElBQXpCLEVBQTRDO0FBQ3pELFdBQVNDLFlBQVQsQ0FBc0JDLElBQXRCLEVBQTZDO0FBQzNDLFdBQU87QUFDTEMsTUFBQUEsR0FBRyxFQUFFLEtBREE7QUFFTEQsTUFBQUEsSUFGSztBQUdMRSxNQUFBQSxLQUFLLEVBQUUsRUFIRjtBQUlMQyxNQUFBQSxjQUFjLEVBQUUsS0FKWDtBQUtMQyxNQUFBQSxPQUFPLEVBQUUsRUFMSjtBQU1MQyxNQUFBQSxPQUFPLEVBQUUsRUFOSjtBQU9MQyxNQUFBQSxj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OENEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IFJlc3BvbnNlLCBSb3V0ZXIgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCB7IEFQSV9FUlJPUiwgQVBQX0VSUk9SLCBIVFRQX1NUQVRVUywgU1VQUE9SVF9FUlJPUlMgfSBmcm9tICcuLi8uLi8uLi8uLi9saWIvY29uc3RhbnRzJztcbmltcG9ydCB7IEVycm9yQ29kZSB9IGZyb20gJy4uLy4uLy4uLy4uL2xpYi91dGlscyc7XG5pbXBvcnQgeyB2YWxpZGF0ZVBhc3N3b3JkIH0gZnJvbSAnLi4vLi4vLi4vLi4vbGliL2F1dGgtdXRpbHMnO1xuXG5pbXBvcnQgeyAkTmV4dEZ1bmN0aW9uVmVyLCAkUmVxdWVzdEV4dGVuZCwgSUF1dGggfSBmcm9tICcuLi8uLi8uLi8uLi8uLi90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgUHJvZmlsZSB7XG4gIHRmYTogYm9vbGVhbjtcbiAgbmFtZTogc3RyaW5nO1xuICBlbWFpbDogc3RyaW5nO1xuICBlbWFpbF92ZXJpZmllZDogYm9vbGVhbjtcbiAgY3JlYXRlZDogc3RyaW5nO1xuICB1cGRhdGVkOiBzdHJpbmc7XG4gIGNpZHJfd2hpdGVsaXN0OiBzdHJpbmdbXSB8IG51bGw7XG4gIGZ1bGxuYW1lOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChyb3V0ZTogUm91dGVyLCBhdXRoOiBJQXV0aCk6IHZvaWQge1xuICBmdW5jdGlvbiBidWlsZFByb2ZpbGUobmFtZTogc3RyaW5nKTogUHJvZmlsZSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRmYTogZmFsc2UsXG4gICAgICBuYW1lLFxuICAgICAgZW1haWw6ICcnLFxuICAgICAgZW1haWxfdmVyaWZpZWQ6IGZhbHNlLFxuICAgICAgY3JlYXRlZDogJycsXG4gICAgICB1cGRhdGVkOiAnJyxcbiAgICAgIGNpZHJfd2hpdGVsaXN0OiBudWxsLFxuICAgICAgZnVsbG5hbWU6ICcnXG4gICAgfTtcbiAgfVxuXG4gIHJvdXRlLmdldChcbiAgICAnLy0vbnBtL3YxL3VzZXInLFxuICAgIGZ1bmN0aW9uIChyZXE6ICRSZXF1ZXN0RXh0ZW5kLCByZXM6IFJlc3BvbnNlLCBuZXh0OiAkTmV4dEZ1bmN0aW9uVmVyKTogdm9pZCB7XG4gICAgICBpZiAoXy5pc05pbChyZXEucmVtb3RlX3VzZXIubmFtZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBuZXh0KGJ1aWxkUHJvZmlsZShyZXEucmVtb3RlX3VzZXIubmFtZSkpO1xuICAgICAgfVxuXG4gICAgICByZXMuc3RhdHVzKEhUVFBfU1RBVFVTLlVOQVVUSE9SSVpFRCk7XG4gICAgICByZXR1cm4gbmV4dCh7XG4gICAgICAgIG1lc3NhZ2U6IEFQSV9FUlJPUi5NVVNUX0JFX0xPR0dFRFxuICAgICAgfSk7XG4gICAgfVxuICApO1xuXG4gIHJvdXRlLnBvc3QoXG4gICAgJy8tL25wbS92MS91c2VyJyxcbiAgICBmdW5jdGlvbiAocmVxOiAkUmVxdWVzdEV4dGVuZCwgcmVzOiBSZXNwb25zZSwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgICAgaWYgKF8uaXNOaWwocmVxLnJlbW90ZV91c2VyLm5hbWUpKSB7XG4gICAgICAgIHJlcy5zdGF0dXMoSFRUUF9TVEFUVVMuVU5BVVRIT1JJWkVEKTtcbiAgICAgICAgcmV0dXJuIG5leHQoe1xuICAgICAgICAgIG1lc3NhZ2U6IEFQSV9FUlJPUi5NVVNUX0JFX0xPR0dFRFxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyBwYXNzd29yZCwgdGZhIH0gPSByZXEuYm9keTtcbiAgICAgIGNvbnN0IHsgbmFtZSB9ID0gcmVxLnJlbW90ZV91c2VyO1xuXG4gICAgICBpZiAoXy5pc05pbChwYXNzd29yZCkgPT09IGZhbHNlKSB7XG4gICAgICAgIGlmICh2YWxpZGF0ZVBhc3N3b3JkKHBhc3N3b3JkLm5ldykgPT09IGZhbHNlKSB7XG4gICAgICAgICAgLyogZXNsaW50IG5ldy1jYXA6b2ZmICovXG4gICAgICAgICAgcmV0dXJuIG5leHQoRXJyb3JDb2RlLmdldENvZGUoSFRUUF9TVEFUVVMuVU5BVVRIT1JJWkVELCBBUElfRVJST1IuUEFTU1dPUkRfU0hPUlQoKSkpO1xuICAgICAgICAgIC8qIGVzbGludCBuZXctY2FwOm9mZiAqL1xuICAgICAgICB9XG5cbiAgICAgICAgYXV0aC5jaGFuZ2VQYXNzd29yZChcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIHBhc3N3b3JkLm9sZCxcbiAgICAgICAgICBwYXNzd29yZC5uZXcsXG4gICAgICAgICAgKGVyciwgaXNVcGRhdGVkKTogJE5leHRGdW5jdGlvblZlciA9PiB7XG4gICAgICAgICAgICBpZiAoXy5pc051bGwoZXJyKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQoXG4gICAgICAgICAgICAgICAgRXJyb3JDb2RlLmdldENvZGUoZXJyLnN0YXR1cywgZXJyLm1lc3NhZ2UpIHx8IEVycm9yQ29kZS5nZXRDb25mbGljdChlcnIubWVzc2FnZSlcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGlzVXBkYXRlZCkge1xuICAgICAgICAgICAgICByZXR1cm4gbmV4dChidWlsZFByb2ZpbGUocmVxLnJlbW90ZV91c2VyLm5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXh0KEVycm9yQ29kZS5nZXRJbnRlcm5hbEVycm9yKEFQSV9FUlJPUi5JTlRFUk5BTF9TRVJWRVJfRVJST1IpKTtcbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKF8uaXNOaWwodGZhKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG5leHQoXG4gICAgICAgICAgRXJyb3JDb2RlLmdldENvZGUoSFRUUF9TVEFUVVMuU0VSVklDRV9VTkFWQUlMQUJMRSwgU1VQUE9SVF9FUlJPUlMuVEZBX0RJU0FCTEVEKVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG5leHQoRXJyb3JDb2RlLmdldENvZGUoSFRUUF9TVEFUVVMuSU5URVJOQUxfRVJST1IsIEFQUF9FUlJPUi5QUk9GSUxFX0VSUk9SKSk7XG4gICAgICB9XG4gICAgfVxuICApO1xufVxuIl19