"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

var _express = require("express");

var _bodyParser = _interopRequireDefault(require("body-parser"));

var _search = _interopRequireDefault(require("../../lib/search"));

var _middleware = require("../middleware");

var _user = _interopRequireDefault(require("./endpoint/user"));

var _package = _interopRequireDefault(require("./endpoint/package"));

var _search2 = _interopRequireDefault(require("./endpoint/search"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const route = (0, _express.Router)();
/* eslint new-cap: 0 */

/*
 This file include all verdaccio only API(Web UI), for npm API please see ../endpoint/
*/

function _default(config, auth, storage) {
  _search.default.configureStorage(storage); // validate all of these params as a package name
  // this might be too harsh, so ask if it causes trouble
  // $FlowFixMe


  route.param('package', _middleware.validatePackage); // $FlowFixMe

  route.param('filename', _middleware.validateName);
  route.param('version', _middleware.validateName);
  route.param('anything', (0, _middleware.match)(/.*/));
  route.use(_bodyParser.default.urlencoded({
    extended: false
  }));
  route.use(auth.webUIJWTmiddleware());
  route.use(_middleware.setSecurityWebHeaders);
  (0, _package.default)(route, storage, auth, config);
  (0, _search2.default)(route, storage, auth);
  (0, _user.default)(route, auth, config); // What are you looking for? logout? client side will remove token when user click logout,
  // or it will auto expire after 24 hours.
  // This token is different with the token send to npm client.
  // We will/may replace current token with JWT in next major release, and it will not expire at all(configurable).

  return route;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvd2ViL2FwaS50cyJdLCJuYW1lcyI6WyJyb3V0ZSIsImNvbmZpZyIsImF1dGgiLCJzdG9yYWdlIiwiU2VhcmNoIiwiY29uZmlndXJlU3RvcmFnZSIsInBhcmFtIiwidmFsaWRhdGVQYWNrYWdlIiwidmFsaWRhdGVOYW1lIiwidXNlIiwiYm9keVBhcnNlciIsInVybGVuY29kZWQiLCJleHRlbmRlZCIsIndlYlVJSldUbWlkZGxld2FyZSIsInNldFNlY3VyaXR5V2ViSGVhZGVycyJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7O0FBRUEsTUFBTUEsS0FBSyxHQUFHLHNCQUFkO0FBQXdCOztBQUV4QjtBQUNBO0FBQ0E7O0FBQ2Usa0JBQVVDLE1BQVYsRUFBMEJDLElBQTFCLEVBQXVDQyxPQUF2QyxFQUF5RTtBQUN0RkMsa0JBQU9DLGdCQUFQLENBQXdCRixPQUF4QixFQURzRixDQUd0RjtBQUNBO0FBQ0E7OztBQUNBSCxFQUFBQSxLQUFLLENBQUNNLEtBQU4sQ0FBWSxTQUFaLEVBQXVCQywyQkFBdkIsRUFOc0YsQ0FPdEY7O0FBQ0FQLEVBQUFBLEtBQUssQ0FBQ00sS0FBTixDQUFZLFVBQVosRUFBd0JFLHdCQUF4QjtBQUNBUixFQUFBQSxLQUFLLENBQUNNLEtBQU4sQ0FBWSxTQUFaLEVBQXVCRSx3QkFBdkI7QUFDQVIsRUFBQUEsS0FBSyxDQUFDTSxLQUFOLENBQVksVUFBWixFQUF3Qix1QkFBTSxJQUFOLENBQXhCO0FBRUFOLEVBQUFBLEtBQUssQ0FBQ1MsR0FBTixDQUFVQyxvQkFBV0MsVUFBWCxDQUFzQjtBQUFFQyxJQUFBQSxRQUFRLEVBQUU7QUFBWixHQUF0QixDQUFWO0FBQ0FaLEVBQUFBLEtBQUssQ0FBQ1MsR0FBTixDQUFVUCxJQUFJLENBQUNXLGtCQUFMLEVBQVY7QUFDQWIsRUFBQUEsS0FBSyxDQUFDUyxHQUFOLENBQVVLLGlDQUFWO0FBRUEsd0JBQWlCZCxLQUFqQixFQUF3QkcsT0FBeEIsRUFBaUNELElBQWpDLEVBQXVDRCxNQUF2QztBQUNBLHdCQUFnQkQsS0FBaEIsRUFBdUJHLE9BQXZCLEVBQWdDRCxJQUFoQztBQUNBLHFCQUFlRixLQUFmLEVBQXNCRSxJQUF0QixFQUE0QkQsTUFBNUIsRUFsQnNGLENBb0J0RjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFPRCxLQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBSb3V0ZXIgfSBmcm9tICdleHByZXNzJztcbmltcG9ydCBib2R5UGFyc2VyIGZyb20gJ2JvZHktcGFyc2VyJztcbmltcG9ydCB7IENvbmZpZyB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuaW1wb3J0IFNlYXJjaCBmcm9tICcuLi8uLi9saWIvc2VhcmNoJztcbmltcG9ydCB7IG1hdGNoLCB2YWxpZGF0ZU5hbWUsIHZhbGlkYXRlUGFja2FnZSwgc2V0U2VjdXJpdHlXZWJIZWFkZXJzIH0gZnJvbSAnLi4vbWlkZGxld2FyZSc7XG5pbXBvcnQgeyBJQXV0aCwgSVN0b3JhZ2VIYW5kbGVyIH0gZnJvbSAnLi4vLi4vLi4vdHlwZXMnO1xuaW1wb3J0IGFkZFVzZXJBdXRoQXBpIGZyb20gJy4vZW5kcG9pbnQvdXNlcic7XG5pbXBvcnQgYWRkUGFja2FnZVdlYkFwaSBmcm9tICcuL2VuZHBvaW50L3BhY2thZ2UnO1xuaW1wb3J0IGFkZFNlYXJjaFdlYkFwaSBmcm9tICcuL2VuZHBvaW50L3NlYXJjaCc7XG5cbmNvbnN0IHJvdXRlID0gUm91dGVyKCk7IC8qIGVzbGludCBuZXctY2FwOiAwICovXG5cbi8qXG4gVGhpcyBmaWxlIGluY2x1ZGUgYWxsIHZlcmRhY2NpbyBvbmx5IEFQSShXZWIgVUkpLCBmb3IgbnBtIEFQSSBwbGVhc2Ugc2VlIC4uL2VuZHBvaW50L1xuKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChjb25maWc6IENvbmZpZywgYXV0aDogSUF1dGgsIHN0b3JhZ2U6IElTdG9yYWdlSGFuZGxlcik6IFJvdXRlciB7XG4gIFNlYXJjaC5jb25maWd1cmVTdG9yYWdlKHN0b3JhZ2UpO1xuXG4gIC8vIHZhbGlkYXRlIGFsbCBvZiB0aGVzZSBwYXJhbXMgYXMgYSBwYWNrYWdlIG5hbWVcbiAgLy8gdGhpcyBtaWdodCBiZSB0b28gaGFyc2gsIHNvIGFzayBpZiBpdCBjYXVzZXMgdHJvdWJsZVxuICAvLyAkRmxvd0ZpeE1lXG4gIHJvdXRlLnBhcmFtKCdwYWNrYWdlJywgdmFsaWRhdGVQYWNrYWdlKTtcbiAgLy8gJEZsb3dGaXhNZVxuICByb3V0ZS5wYXJhbSgnZmlsZW5hbWUnLCB2YWxpZGF0ZU5hbWUpO1xuICByb3V0ZS5wYXJhbSgndmVyc2lvbicsIHZhbGlkYXRlTmFtZSk7XG4gIHJvdXRlLnBhcmFtKCdhbnl0aGluZycsIG1hdGNoKC8uKi8pKTtcblxuICByb3V0ZS51c2UoYm9keVBhcnNlci51cmxlbmNvZGVkKHsgZXh0ZW5kZWQ6IGZhbHNlIH0pKTtcbiAgcm91dGUudXNlKGF1dGgud2ViVUlKV1RtaWRkbGV3YXJlKCkpO1xuICByb3V0ZS51c2Uoc2V0U2VjdXJpdHlXZWJIZWFkZXJzKTtcblxuICBhZGRQYWNrYWdlV2ViQXBpKHJvdXRlLCBzdG9yYWdlLCBhdXRoLCBjb25maWcpO1xuICBhZGRTZWFyY2hXZWJBcGkocm91dGUsIHN0b3JhZ2UsIGF1dGgpO1xuICBhZGRVc2VyQXV0aEFwaShyb3V0ZSwgYXV0aCwgY29uZmlnKTtcblxuICAvLyBXaGF0IGFyZSB5b3UgbG9va2luZyBmb3I/IGxvZ291dD8gY2xpZW50IHNpZGUgd2lsbCByZW1vdmUgdG9rZW4gd2hlbiB1c2VyIGNsaWNrIGxvZ291dCxcbiAgLy8gb3IgaXQgd2lsbCBhdXRvIGV4cGlyZSBhZnRlciAyNCBob3Vycy5cbiAgLy8gVGhpcyB0b2tlbiBpcyBkaWZmZXJlbnQgd2l0aCB0aGUgdG9rZW4gc2VuZCB0byBucG0gY2xpZW50LlxuICAvLyBXZSB3aWxsL21heSByZXBsYWNlIGN1cnJlbnQgdG9rZW4gd2l0aCBKV1QgaW4gbmV4dCBtYWpvciByZWxlYXNlLCBhbmQgaXQgd2lsbCBub3QgZXhwaXJlIGF0IGFsbChjb25maWd1cmFibGUpLlxuXG4gIHJldHVybiByb3V0ZTtcbn1cbiJdfQ==