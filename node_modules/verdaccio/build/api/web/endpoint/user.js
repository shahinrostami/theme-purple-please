"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _constants = require("../../../lib/constants");

var _utils = require("../../../lib/utils");

var _authUtils = require("../../../lib/auth-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @prettier
 * @flow
 */
function addUserAuthApi(route, auth, config) {
  route.post('/login', function (req, res, next) {
    const {
      username,
      password
    } = req.body;
    auth.authenticate(username, password, async (err, user) => {
      if (err) {
        const errorCode = err.message ? _constants.HTTP_STATUS.UNAUTHORIZED : _constants.HTTP_STATUS.INTERNAL_ERROR;
        next(_utils.ErrorCode.getCode(errorCode, err.message));
      } else {
        req.remote_user = user;
        const jWTSignOptions = (0, _authUtils.getSecurity)(config).web.sign;
        next({
          token: await auth.jwtEncrypt(user, jWTSignOptions),
          username: req.remote_user.name
        });
      }
    });
  });
  route.put('/reset_password', function (req, res, next) {
    if (_lodash.default.isNil(req.remote_user.name)) {
      res.status(_constants.HTTP_STATUS.UNAUTHORIZED);
      return next({
        // FUTURE: update to a more meaningful message
        message: _constants.API_ERROR.MUST_BE_LOGGED
      });
    }

    const {
      password
    } = req.body;
    const {
      name
    } = req.remote_user;

    if ((0, _authUtils.validatePassword)(password.new) === false) {
      auth.changePassword(name, password.old, password.new, (err, isUpdated) => {
        if (_lodash.default.isNil(err) && isUpdated) {
          next({
            ok: true
          });
        } else {
          return next(_utils.ErrorCode.getInternalError(_constants.API_ERROR.INTERNAL_SERVER_ERROR));
        }
      });
    } else {
      return next(_utils.ErrorCode.getCode(_constants.HTTP_STATUS.BAD_REQUEST, _constants.APP_ERROR.PASSWORD_VALIDATION));
    }
  });
}

var _default = addUserAuthApi;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvd2ViL2VuZHBvaW50L3VzZXIudHMiXSwibmFtZXMiOlsiYWRkVXNlckF1dGhBcGkiLCJyb3V0ZSIsImF1dGgiLCJjb25maWciLCJwb3N0IiwicmVxIiwicmVzIiwibmV4dCIsInVzZXJuYW1lIiwicGFzc3dvcmQiLCJib2R5IiwiYXV0aGVudGljYXRlIiwiZXJyIiwidXNlciIsImVycm9yQ29kZSIsIm1lc3NhZ2UiLCJIVFRQX1NUQVRVUyIsIlVOQVVUSE9SSVpFRCIsIklOVEVSTkFMX0VSUk9SIiwiRXJyb3JDb2RlIiwiZ2V0Q29kZSIsInJlbW90ZV91c2VyIiwialdUU2lnbk9wdGlvbnMiLCJ3ZWIiLCJzaWduIiwidG9rZW4iLCJqd3RFbmNyeXB0IiwibmFtZSIsInB1dCIsIl8iLCJpc05pbCIsInN0YXR1cyIsIkFQSV9FUlJPUiIsIk1VU1RfQkVfTE9HR0VEIiwibmV3IiwiY2hhbmdlUGFzc3dvcmQiLCJvbGQiLCJpc1VwZGF0ZWQiLCJvayIsImdldEludGVybmFsRXJyb3IiLCJJTlRFUk5BTF9TRVJWRVJfRVJST1IiLCJCQURfUkVRVUVTVCIsIkFQUF9FUlJPUiIsIlBBU1NXT1JEX1ZBTElEQVRJT04iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFLQTs7QUFJQTs7QUFFQTs7QUFDQTs7OztBQVpBO0FBQ0E7QUFDQTtBQUNBO0FBV0EsU0FBU0EsY0FBVCxDQUF3QkMsS0FBeEIsRUFBdUNDLElBQXZDLEVBQW9EQyxNQUFwRCxFQUEwRTtBQUN4RUYsRUFBQUEsS0FBSyxDQUFDRyxJQUFOLENBQVcsUUFBWCxFQUFxQixVQUFVQyxHQUFWLEVBQXdCQyxHQUF4QixFQUF1Q0MsSUFBdkMsRUFBcUU7QUFDeEYsVUFBTTtBQUFFQyxNQUFBQSxRQUFGO0FBQVlDLE1BQUFBO0FBQVosUUFBeUJKLEdBQUcsQ0FBQ0ssSUFBbkM7QUFFQVIsSUFBQUEsSUFBSSxDQUFDUyxZQUFMLENBQWtCSCxRQUFsQixFQUE0QkMsUUFBNUIsRUFBc0MsT0FBT0csR0FBUCxFQUFZQyxJQUFaLEtBQWdEO0FBQ3BGLFVBQUlELEdBQUosRUFBUztBQUNQLGNBQU1FLFNBQVMsR0FBR0YsR0FBRyxDQUFDRyxPQUFKLEdBQWNDLHVCQUFZQyxZQUExQixHQUF5Q0QsdUJBQVlFLGNBQXZFO0FBQ0FYLFFBQUFBLElBQUksQ0FBQ1ksaUJBQVVDLE9BQVYsQ0FBa0JOLFNBQWxCLEVBQTZCRixHQUFHLENBQUNHLE9BQWpDLENBQUQsQ0FBSjtBQUNELE9BSEQsTUFHTztBQUNMVixRQUFBQSxHQUFHLENBQUNnQixXQUFKLEdBQWtCUixJQUFsQjtBQUNBLGNBQU1TLGNBQThCLEdBQUcsNEJBQVluQixNQUFaLEVBQW9Cb0IsR0FBcEIsQ0FBd0JDLElBQS9EO0FBRUFqQixRQUFBQSxJQUFJLENBQUM7QUFDSGtCLFVBQUFBLEtBQUssRUFBRSxNQUFNdkIsSUFBSSxDQUFDd0IsVUFBTCxDQUFnQmIsSUFBaEIsRUFBc0JTLGNBQXRCLENBRFY7QUFFSGQsVUFBQUEsUUFBUSxFQUFFSCxHQUFHLENBQUNnQixXQUFKLENBQWdCTTtBQUZ2QixTQUFELENBQUo7QUFJRDtBQUNGLEtBYkQ7QUFjRCxHQWpCRDtBQW1CQTFCLEVBQUFBLEtBQUssQ0FBQzJCLEdBQU4sQ0FBVSxpQkFBVixFQUE2QixVQUFVdkIsR0FBVixFQUF3QkMsR0FBeEIsRUFBdUNDLElBQXZDLEVBQXFFO0FBQ2hHLFFBQUlzQixnQkFBRUMsS0FBRixDQUFRekIsR0FBRyxDQUFDZ0IsV0FBSixDQUFnQk0sSUFBeEIsQ0FBSixFQUFtQztBQUNqQ3JCLE1BQUFBLEdBQUcsQ0FBQ3lCLE1BQUosQ0FBV2YsdUJBQVlDLFlBQXZCO0FBQ0EsYUFBT1YsSUFBSSxDQUFDO0FBQ1Y7QUFDQVEsUUFBQUEsT0FBTyxFQUFFaUIscUJBQVVDO0FBRlQsT0FBRCxDQUFYO0FBSUQ7O0FBRUQsVUFBTTtBQUFFeEIsTUFBQUE7QUFBRixRQUFlSixHQUFHLENBQUNLLElBQXpCO0FBQ0EsVUFBTTtBQUFFaUIsTUFBQUE7QUFBRixRQUFXdEIsR0FBRyxDQUFDZ0IsV0FBckI7O0FBRUEsUUFBSSxpQ0FBaUJaLFFBQVEsQ0FBQ3lCLEdBQTFCLE1BQW1DLEtBQXZDLEVBQThDO0FBQzVDaEMsTUFBQUEsSUFBSSxDQUFDaUMsY0FBTCxDQUFvQlIsSUFBcEIsRUFBb0NsQixRQUFRLENBQUMyQixHQUE3QyxFQUFrRDNCLFFBQVEsQ0FBQ3lCLEdBQTNELEVBQWdFLENBQUN0QixHQUFELEVBQU15QixTQUFOLEtBQTBCO0FBQ3hGLFlBQUlSLGdCQUFFQyxLQUFGLENBQVFsQixHQUFSLEtBQWdCeUIsU0FBcEIsRUFBK0I7QUFDN0I5QixVQUFBQSxJQUFJLENBQUM7QUFDSCtCLFlBQUFBLEVBQUUsRUFBRTtBQURELFdBQUQsQ0FBSjtBQUdELFNBSkQsTUFJTztBQUNMLGlCQUFPL0IsSUFBSSxDQUFDWSxpQkFBVW9CLGdCQUFWLENBQTJCUCxxQkFBVVEscUJBQXJDLENBQUQsQ0FBWDtBQUNEO0FBQ0YsT0FSRDtBQVNELEtBVkQsTUFVTztBQUNMLGFBQU9qQyxJQUFJLENBQUNZLGlCQUFVQyxPQUFWLENBQWtCSix1QkFBWXlCLFdBQTlCLEVBQTJDQyxxQkFBVUMsbUJBQXJELENBQUQsQ0FBWDtBQUNEO0FBQ0YsR0F6QkQ7QUEwQkQ7O2VBRWMzQyxjIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAcHJldHRpZXJcbiAqIEBmbG93XG4gKi9cblxuaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcblxuaW1wb3J0IHsgUm91dGVyLCBSZXNwb25zZSwgUmVxdWVzdCB9IGZyb20gJ2V4cHJlc3MnO1xuaW1wb3J0IHsgQ29uZmlnLCBSZW1vdGVVc2VyLCBKV1RTaWduT3B0aW9ucyB9IGZyb20gJ0B2ZXJkYWNjaW8vdHlwZXMnO1xuaW1wb3J0IHsgQVBJX0VSUk9SLCBBUFBfRVJST1IsIEhUVFBfU1RBVFVTIH0gZnJvbSAnLi4vLi4vLi4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBJQXV0aCwgJE5leHRGdW5jdGlvblZlciB9IGZyb20gJy4uLy4uLy4uLy4uL3R5cGVzJztcbmltcG9ydCB7IEVycm9yQ29kZSB9IGZyb20gJy4uLy4uLy4uL2xpYi91dGlscyc7XG5pbXBvcnQgeyBnZXRTZWN1cml0eSwgdmFsaWRhdGVQYXNzd29yZCB9IGZyb20gJy4uLy4uLy4uL2xpYi9hdXRoLXV0aWxzJztcblxuZnVuY3Rpb24gYWRkVXNlckF1dGhBcGkocm91dGU6IFJvdXRlciwgYXV0aDogSUF1dGgsIGNvbmZpZzogQ29uZmlnKTogdm9pZCB7XG4gIHJvdXRlLnBvc3QoJy9sb2dpbicsIGZ1bmN0aW9uIChyZXE6IFJlcXVlc3QsIHJlczogUmVzcG9uc2UsIG5leHQ6ICROZXh0RnVuY3Rpb25WZXIpOiB2b2lkIHtcbiAgICBjb25zdCB7IHVzZXJuYW1lLCBwYXNzd29yZCB9ID0gcmVxLmJvZHk7XG5cbiAgICBhdXRoLmF1dGhlbnRpY2F0ZSh1c2VybmFtZSwgcGFzc3dvcmQsIGFzeW5jIChlcnIsIHVzZXI6IFJlbW90ZVVzZXIpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgY29uc3QgZXJyb3JDb2RlID0gZXJyLm1lc3NhZ2UgPyBIVFRQX1NUQVRVUy5VTkFVVEhPUklaRUQgOiBIVFRQX1NUQVRVUy5JTlRFUk5BTF9FUlJPUjtcbiAgICAgICAgbmV4dChFcnJvckNvZGUuZ2V0Q29kZShlcnJvckNvZGUsIGVyci5tZXNzYWdlKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXEucmVtb3RlX3VzZXIgPSB1c2VyO1xuICAgICAgICBjb25zdCBqV1RTaWduT3B0aW9uczogSldUU2lnbk9wdGlvbnMgPSBnZXRTZWN1cml0eShjb25maWcpLndlYi5zaWduO1xuXG4gICAgICAgIG5leHQoe1xuICAgICAgICAgIHRva2VuOiBhd2FpdCBhdXRoLmp3dEVuY3J5cHQodXNlciwgaldUU2lnbk9wdGlvbnMpLFxuICAgICAgICAgIHVzZXJuYW1lOiByZXEucmVtb3RlX3VzZXIubmFtZSxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJvdXRlLnB1dCgnL3Jlc2V0X3Bhc3N3b3JkJywgZnVuY3Rpb24gKHJlcTogUmVxdWVzdCwgcmVzOiBSZXNwb25zZSwgbmV4dDogJE5leHRGdW5jdGlvblZlcik6IHZvaWQge1xuICAgIGlmIChfLmlzTmlsKHJlcS5yZW1vdGVfdXNlci5uYW1lKSkge1xuICAgICAgcmVzLnN0YXR1cyhIVFRQX1NUQVRVUy5VTkFVVEhPUklaRUQpO1xuICAgICAgcmV0dXJuIG5leHQoe1xuICAgICAgICAvLyBGVVRVUkU6IHVwZGF0ZSB0byBhIG1vcmUgbWVhbmluZ2Z1bCBtZXNzYWdlXG4gICAgICAgIG1lc3NhZ2U6IEFQSV9FUlJPUi5NVVNUX0JFX0xPR0dFRCxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGNvbnN0IHsgcGFzc3dvcmQgfSA9IHJlcS5ib2R5O1xuICAgIGNvbnN0IHsgbmFtZSB9ID0gcmVxLnJlbW90ZV91c2VyO1xuXG4gICAgaWYgKHZhbGlkYXRlUGFzc3dvcmQocGFzc3dvcmQubmV3KSA9PT0gZmFsc2UpIHtcbiAgICAgIGF1dGguY2hhbmdlUGFzc3dvcmQobmFtZSBhcyBzdHJpbmcsIHBhc3N3b3JkLm9sZCwgcGFzc3dvcmQubmV3LCAoZXJyLCBpc1VwZGF0ZWQpOiB2b2lkID0+IHtcbiAgICAgICAgaWYgKF8uaXNOaWwoZXJyKSAmJiBpc1VwZGF0ZWQpIHtcbiAgICAgICAgICBuZXh0KHtcbiAgICAgICAgICAgIG9rOiB0cnVlLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBuZXh0KEVycm9yQ29kZS5nZXRJbnRlcm5hbEVycm9yKEFQSV9FUlJPUi5JTlRFUk5BTF9TRVJWRVJfRVJST1IpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXh0KEVycm9yQ29kZS5nZXRDb2RlKEhUVFBfU1RBVFVTLkJBRF9SRVFVRVNULCBBUFBfRVJST1IuUEFTU1dPUkRfVkFMSURBVElPTikpO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFkZFVzZXJBdXRoQXBpO1xuIl19