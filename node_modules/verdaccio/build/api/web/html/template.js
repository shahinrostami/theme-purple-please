"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = renderTemplate;

var _debug = _interopRequireDefault(require("debug"));

var _manifest = require("./manifest");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug.default)('verdaccio');

function renderTemplate(template, manifest) {
  var _template$options$tit, _template$options;

  debug('template %o', template);
  debug('manifest %o', manifest);
  return `
    <!DOCTYPE html>
      <html lang="en-us"> 
      <head>
        <meta charset="utf-8">
        <base href="${template === null || template === void 0 ? void 0 : template.options.base}">
        <title>${(_template$options$tit = template === null || template === void 0 ? void 0 : (_template$options = template.options) === null || _template$options === void 0 ? void 0 : _template$options.title) !== null && _template$options$tit !== void 0 ? _template$options$tit : ''}</title>        
        <link rel="icon" href="${template === null || template === void 0 ? void 0 : template.options.base}-/static/favicon.ico"/>
        <meta name="viewport" content="width=device-width, initial-scale=1" /> 
        <script>
            window.__VERDACCIO_BASENAME_UI_OPTIONS=${JSON.stringify(template.options)}
        </script>
        ${template !== null && template !== void 0 && template.metaScripts ? template.metaScripts.join('') : ''}
      </head>    
      <body class="body">
      ${template !== null && template !== void 0 && template.scriptsbodyBefore ? template.scriptsbodyBefore.join('') : ''}
        <div id="root"></div>
        ${(0, _manifest.getManifestValue)(template.manifest.js, manifest, template === null || template === void 0 ? void 0 : template.options.base).map(item => `<script defer="defer" src="${item}"></script>`).join('')}
        ${template !== null && template !== void 0 && template.scriptsBodyAfter ? template.scriptsBodyAfter.join('') : ''}
      </body>
    </html>
  `;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9hcGkvd2ViL2h0bWwvdGVtcGxhdGUudHMiXSwibmFtZXMiOlsiZGVidWciLCJyZW5kZXJUZW1wbGF0ZSIsInRlbXBsYXRlIiwibWFuaWZlc3QiLCJvcHRpb25zIiwiYmFzZSIsInRpdGxlIiwiSlNPTiIsInN0cmluZ2lmeSIsIm1ldGFTY3JpcHRzIiwiam9pbiIsInNjcmlwdHNib2R5QmVmb3JlIiwianMiLCJtYXAiLCJpdGVtIiwic2NyaXB0c0JvZHlBZnRlciJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOzs7O0FBRUEsTUFBTUEsS0FBSyxHQUFHLG9CQUFXLFdBQVgsQ0FBZDs7QUE4QmUsU0FBU0MsY0FBVCxDQUF3QkMsUUFBeEIsRUFBNENDLFFBQTVDLEVBQXVFO0FBQUE7O0FBQ3BGSCxFQUFBQSxLQUFLLENBQUMsYUFBRCxFQUFnQkUsUUFBaEIsQ0FBTDtBQUNBRixFQUFBQSxLQUFLLENBQUMsYUFBRCxFQUFnQkcsUUFBaEIsQ0FBTDtBQUVBLFNBQVE7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQkQsUUFMYixhQUthQSxRQUxiLHVCQUthQSxRQUFRLENBQUVFLE9BQVYsQ0FBa0JDLElBQUs7QUFDN0MsaUJBTlMseUJBTVFILFFBTlIsYUFNUUEsUUFOUiw0Q0FNUUEsUUFBUSxDQUFFRSxPQU5sQixzREFNUSxrQkFBbUJFLEtBTjNCLHlFQU1vQyxFQUFHO0FBQ2hELGlDQUFpQ0osUUFQeEIsYUFPd0JBLFFBUHhCLHVCQU93QkEsUUFBUSxDQUFFRSxPQUFWLENBQWtCQyxJQUFLO0FBQ3hEO0FBQ0E7QUFDQSxxREFBcURFLElBQUksQ0FBQ0MsU0FBTCxDQUFlTixRQUFRLENBQUNFLE9BQXhCLENBQWlDO0FBQ3RGO0FBQ0EsVUFBVUYsUUFBUSxTQUFSLElBQUFBLFFBQVEsV0FBUixJQUFBQSxRQUFRLENBQUVPLFdBQVYsR0FBd0JQLFFBQVEsQ0FBQ08sV0FBVCxDQUFxQkMsSUFBckIsQ0FBMEIsRUFBMUIsQ0FBeEIsR0FBd0QsRUFBRztBQUNyRTtBQUNBO0FBQ0EsUUFBUVIsUUFBUSxTQUFSLElBQUFBLFFBQVEsV0FBUixJQUFBQSxRQUFRLENBQUVTLGlCQUFWLEdBQThCVCxRQUFRLENBQUNTLGlCQUFULENBQTJCRCxJQUEzQixDQUFnQyxFQUFoQyxDQUE5QixHQUFvRSxFQUFHO0FBQy9FO0FBQ0EsVUFBVSxnQ0FBaUJSLFFBQVEsQ0FBQ0MsUUFBVCxDQUFrQlMsRUFBbkMsRUFBdUNULFFBQXZDLEVBQWlERCxRQUFqRCxhQUFpREEsUUFBakQsdUJBQWlEQSxRQUFRLENBQUVFLE9BQVYsQ0FBa0JDLElBQW5FLEVBQXlFUSxHQUF6RSxDQUE4RUMsSUFBRCxJQUFXLDhCQUE2QkEsSUFBSyxhQUExSCxFQUF3SUosSUFBeEksQ0FBNkksRUFBN0ksQ0FBaUo7QUFDM0osVUFBVVIsUUFBUSxTQUFSLElBQUFBLFFBQVEsV0FBUixJQUFBQSxRQUFRLENBQUVhLGdCQUFWLEdBQTZCYixRQUFRLENBQUNhLGdCQUFULENBQTBCTCxJQUExQixDQUErQixFQUEvQixDQUE3QixHQUFrRSxFQUFHO0FBQy9FO0FBQ0E7QUFDQSxHQXJCRTtBQXNCRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBidWlsZERlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IGdldE1hbmlmZXN0VmFsdWUsIE1hbmlmZXN0IH0gZnJvbSAnLi9tYW5pZmVzdCc7XG5cbmNvbnN0IGRlYnVnID0gYnVpbGREZWJ1ZygndmVyZGFjY2lvJyk7XG5cbmV4cG9ydCB0eXBlIFRlbXBsYXRlVUlPcHRpb25zID0ge1xuICB0aXRsZT86IHN0cmluZztcbiAgdXJpPzogc3RyaW5nO1xuICBkYXJrTW9kZT86IGJvb2xlYW47XG4gIHByb3RvY29sPzogc3RyaW5nO1xuICBob3N0Pzogc3RyaW5nO1xuICB1cmxfcHJlZml4Pzogc3RyaW5nO1xuICBiYXNlOiBzdHJpbmc7XG4gIHByaW1hcnlDb2xvcj86IHN0cmluZztcbiAgdmVyc2lvbj86IHN0cmluZztcbiAgbG9nb1VSST86IHN0cmluZztcbiAgc2NvcGU/OiBzdHJpbmc7XG4gIGxhbmd1YWdlPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgVGVtcGxhdGUgPSB7XG4gIG1hbmlmZXN0OiBNYW5pZmVzdDtcbiAgb3B0aW9uczogVGVtcGxhdGVVSU9wdGlvbnM7XG4gIG1ldGFTY3JpcHRzPzogc3RyaW5nW107XG4gIHNjcmlwdHNCb2R5QWZ0ZXI/OiBzdHJpbmdbXTtcbiAgc2NyaXB0c2JvZHlCZWZvcmU/OiBzdHJpbmdbXTtcbn07XG5cbi8vIHRoZSBvdXRjb21lIG9mIHRoZSBXZWJwYWNrIE1hbmlmZXN0IFBsdWdpblxuZXhwb3J0IGludGVyZmFjZSBXZWJwYWNrTWFuaWZlc3Qge1xuICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJlbmRlclRlbXBsYXRlKHRlbXBsYXRlOiBUZW1wbGF0ZSwgbWFuaWZlc3Q6IFdlYnBhY2tNYW5pZmVzdCkge1xuICBkZWJ1ZygndGVtcGxhdGUgJW8nLCB0ZW1wbGF0ZSk7XG4gIGRlYnVnKCdtYW5pZmVzdCAlbycsIG1hbmlmZXN0KTtcblxuICByZXR1cm4gYFxuICAgIDwhRE9DVFlQRSBodG1sPlxuICAgICAgPGh0bWwgbGFuZz1cImVuLXVzXCI+IFxuICAgICAgPGhlYWQ+XG4gICAgICAgIDxtZXRhIGNoYXJzZXQ9XCJ1dGYtOFwiPlxuICAgICAgICA8YmFzZSBocmVmPVwiJHt0ZW1wbGF0ZT8ub3B0aW9ucy5iYXNlfVwiPlxuICAgICAgICA8dGl0bGU+JHt0ZW1wbGF0ZT8ub3B0aW9ucz8udGl0bGUgPz8gJyd9PC90aXRsZT4gICAgICAgIFxuICAgICAgICA8bGluayByZWw9XCJpY29uXCIgaHJlZj1cIiR7dGVtcGxhdGU/Lm9wdGlvbnMuYmFzZX0tL3N0YXRpYy9mYXZpY29uLmljb1wiLz5cbiAgICAgICAgPG1ldGEgbmFtZT1cInZpZXdwb3J0XCIgY29udGVudD1cIndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xXCIgLz4gXG4gICAgICAgIDxzY3JpcHQ+XG4gICAgICAgICAgICB3aW5kb3cuX19WRVJEQUNDSU9fQkFTRU5BTUVfVUlfT1BUSU9OUz0ke0pTT04uc3RyaW5naWZ5KHRlbXBsYXRlLm9wdGlvbnMpfVxuICAgICAgICA8L3NjcmlwdD5cbiAgICAgICAgJHt0ZW1wbGF0ZT8ubWV0YVNjcmlwdHMgPyB0ZW1wbGF0ZS5tZXRhU2NyaXB0cy5qb2luKCcnKSA6ICcnfVxuICAgICAgPC9oZWFkPiAgICBcbiAgICAgIDxib2R5IGNsYXNzPVwiYm9keVwiPlxuICAgICAgJHt0ZW1wbGF0ZT8uc2NyaXB0c2JvZHlCZWZvcmUgPyB0ZW1wbGF0ZS5zY3JpcHRzYm9keUJlZm9yZS5qb2luKCcnKSA6ICcnfVxuICAgICAgICA8ZGl2IGlkPVwicm9vdFwiPjwvZGl2PlxuICAgICAgICAke2dldE1hbmlmZXN0VmFsdWUodGVtcGxhdGUubWFuaWZlc3QuanMsIG1hbmlmZXN0LCB0ZW1wbGF0ZT8ub3B0aW9ucy5iYXNlKS5tYXAoKGl0ZW0pID0+IGA8c2NyaXB0IGRlZmVyPVwiZGVmZXJcIiBzcmM9XCIke2l0ZW19XCI+PC9zY3JpcHQ+YCkuam9pbignJyl9XG4gICAgICAgICR7dGVtcGxhdGU/LnNjcmlwdHNCb2R5QWZ0ZXIgPyB0ZW1wbGF0ZS5zY3JpcHRzQm9keUFmdGVyLmpvaW4oJycpIDogJyd9XG4gICAgICA8L2JvZHk+XG4gICAgPC9odG1sPlxuICBgO1xufVxuIl19