"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isVersionValid = isVersionValid;
exports.getListListenAddresses = getListListenAddresses;
exports.MIN_NODE_VERSION = exports.resolveConfigPath = void 0;

var _path = _interopRequireDefault(require("path"));

var _semver = _interopRequireDefault(require("semver"));

var _utils = require("../utils");

var _constants = require("../constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const logger = require('../logger');

const resolveConfigPath = function (storageLocation, file) {
  return _path.default.resolve(_path.default.dirname(storageLocation), file);
};

exports.resolveConfigPath = resolveConfigPath;
const MIN_NODE_VERSION = '12';
exports.MIN_NODE_VERSION = MIN_NODE_VERSION;

function isVersionValid(version) {
  return _semver.default.satisfies(version, `>=${MIN_NODE_VERSION}`);
}
/**
 * Retrieve all addresses defined in the config file.
 * Verdaccio is able to listen multiple ports
 * @param {String} argListen
 * @param {String} configListen
 * eg:
 *  listen:
 - localhost:5555
 - localhost:5557
 @return {Array}
 */


function getListListenAddresses(argListen, configListen) {
  // command line || config file || default
  let addresses;

  if (argListen) {
    addresses = [argListen];
  } else if (Array.isArray(configListen)) {
    addresses = configListen;
    process.emitWarning('multiple addresses will be deprecated in the next major, only use one');
  } else if (configListen) {
    addresses = [configListen];
  } else {
    addresses = [_constants.DEFAULT_PORT];
  }

  addresses = addresses.map(function (addr) {
    const parsedAddr = (0, _utils.parseAddress)(addr);

    if (!parsedAddr) {
      logger.logger.warn({
        addr: addr
      }, 'invalid address - @{addr}, we expect a port (e.g. "4873"),' + ' host:port (e.g. "localhost:4873") or full url' + ' (e.g. "http://localhost:4873/")');
    }

    return parsedAddr;
  }).filter(Boolean);
  return addresses;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvY2xpL3V0aWxzLnRzIl0sIm5hbWVzIjpbImxvZ2dlciIsInJlcXVpcmUiLCJyZXNvbHZlQ29uZmlnUGF0aCIsInN0b3JhZ2VMb2NhdGlvbiIsImZpbGUiLCJwYXRoIiwicmVzb2x2ZSIsImRpcm5hbWUiLCJNSU5fTk9ERV9WRVJTSU9OIiwiaXNWZXJzaW9uVmFsaWQiLCJ2ZXJzaW9uIiwic2VtdmVyIiwic2F0aXNmaWVzIiwiZ2V0TGlzdExpc3RlbkFkZHJlc3NlcyIsImFyZ0xpc3RlbiIsImNvbmZpZ0xpc3RlbiIsImFkZHJlc3NlcyIsIkFycmF5IiwiaXNBcnJheSIsInByb2Nlc3MiLCJlbWl0V2FybmluZyIsIkRFRkFVTFRfUE9SVCIsIm1hcCIsImFkZHIiLCJwYXJzZWRBZGRyIiwid2FybiIsImZpbHRlciIsIkJvb2xlYW4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUVBOztBQUNBOzs7O0FBRUEsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF0Qjs7QUFFTyxNQUFNQyxpQkFBaUIsR0FBRyxVQUFVQyxlQUFWLEVBQW1DQyxJQUFuQyxFQUFpRDtBQUNoRixTQUFPQyxjQUFLQyxPQUFMLENBQWFELGNBQUtFLE9BQUwsQ0FBYUosZUFBYixDQUFiLEVBQTRDQyxJQUE1QyxDQUFQO0FBQ0QsQ0FGTTs7O0FBSUEsTUFBTUksZ0JBQWdCLEdBQUcsSUFBekI7OztBQUVBLFNBQVNDLGNBQVQsQ0FBd0JDLE9BQXhCLEVBQWlDO0FBQ3RDLFNBQU9DLGdCQUFPQyxTQUFQLENBQWlCRixPQUFqQixFQUEyQixLQUFJRixnQkFBaUIsRUFBaEQsQ0FBUDtBQUNEO0FBR0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ08sU0FBU0ssc0JBQVQsQ0FBZ0NDLFNBQWhDLEVBQW1EQyxZQUFuRCxFQUEyRTtBQUNoRjtBQUNBLE1BQUlDLFNBQUo7O0FBQ0EsTUFBSUYsU0FBSixFQUFlO0FBQ2JFLElBQUFBLFNBQVMsR0FBRyxDQUFDRixTQUFELENBQVo7QUFDRCxHQUZELE1BRU8sSUFBSUcsS0FBSyxDQUFDQyxPQUFOLENBQWNILFlBQWQsQ0FBSixFQUFpQztBQUN0Q0MsSUFBQUEsU0FBUyxHQUFHRCxZQUFaO0FBQ0FJLElBQUFBLE9BQU8sQ0FBQ0MsV0FBUixDQUFvQix1RUFBcEI7QUFDRCxHQUhNLE1BR0EsSUFBSUwsWUFBSixFQUFrQjtBQUN2QkMsSUFBQUEsU0FBUyxHQUFHLENBQUNELFlBQUQsQ0FBWjtBQUNELEdBRk0sTUFFQTtBQUNMQyxJQUFBQSxTQUFTLEdBQUcsQ0FBQ0ssdUJBQUQsQ0FBWjtBQUNEOztBQUNETCxFQUFBQSxTQUFTLEdBQUdBLFNBQVMsQ0FDbEJNLEdBRFMsQ0FDTCxVQUFVQyxJQUFWLEVBQXdCO0FBQzNCLFVBQU1DLFVBQVUsR0FBRyx5QkFBYUQsSUFBYixDQUFuQjs7QUFFQSxRQUFJLENBQUNDLFVBQUwsRUFBaUI7QUFDZnhCLE1BQUFBLE1BQU0sQ0FBQ0EsTUFBUCxDQUFjeUIsSUFBZCxDQUNFO0FBQUVGLFFBQUFBLElBQUksRUFBRUE7QUFBUixPQURGLEVBRUUsK0RBQ0UsZ0RBREYsR0FFRSxrQ0FKSjtBQU1EOztBQUVELFdBQU9DLFVBQVA7QUFDRCxHQWRTLEVBZVRFLE1BZlMsQ0FlRkMsT0FmRSxDQUFaO0FBaUJBLFNBQU9YLFNBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHNlbXZlciBmcm9tICdzZW12ZXInO1xuXG5pbXBvcnQgeyBwYXJzZUFkZHJlc3MgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBERUZBVUxUX1BPUlQgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuXG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi9sb2dnZXInKTtcblxuZXhwb3J0IGNvbnN0IHJlc29sdmVDb25maWdQYXRoID0gZnVuY3Rpb24gKHN0b3JhZ2VMb2NhdGlvbjogc3RyaW5nLCBmaWxlOiBzdHJpbmcpIHtcbiAgcmV0dXJuIHBhdGgucmVzb2x2ZShwYXRoLmRpcm5hbWUoc3RvcmFnZUxvY2F0aW9uKSwgZmlsZSk7XG59O1xuXG5leHBvcnQgY29uc3QgTUlOX05PREVfVkVSU0lPTiA9ICcxMic7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZlcnNpb25WYWxpZCh2ZXJzaW9uKSB7XG4gIHJldHVybiBzZW12ZXIuc2F0aXNmaWVzKHZlcnNpb24sIGA+PSR7TUlOX05PREVfVkVSU0lPTn1gKTtcbn1cblxuXG4vKipcbiAqIFJldHJpZXZlIGFsbCBhZGRyZXNzZXMgZGVmaW5lZCBpbiB0aGUgY29uZmlnIGZpbGUuXG4gKiBWZXJkYWNjaW8gaXMgYWJsZSB0byBsaXN0ZW4gbXVsdGlwbGUgcG9ydHNcbiAqIEBwYXJhbSB7U3RyaW5nfSBhcmdMaXN0ZW5cbiAqIEBwYXJhbSB7U3RyaW5nfSBjb25maWdMaXN0ZW5cbiAqIGVnOlxuICogIGxpc3RlbjpcbiAtIGxvY2FsaG9zdDo1NTU1XG4gLSBsb2NhbGhvc3Q6NTU1N1xuIEByZXR1cm4ge0FycmF5fVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TGlzdExpc3RlbkFkZHJlc3NlcyhhcmdMaXN0ZW46IHN0cmluZywgY29uZmlnTGlzdGVuOiBhbnkpOiBhbnkge1xuICAvLyBjb21tYW5kIGxpbmUgfHwgY29uZmlnIGZpbGUgfHwgZGVmYXVsdFxuICBsZXQgYWRkcmVzc2VzO1xuICBpZiAoYXJnTGlzdGVuKSB7XG4gICAgYWRkcmVzc2VzID0gW2FyZ0xpc3Rlbl07XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShjb25maWdMaXN0ZW4pKSB7XG4gICAgYWRkcmVzc2VzID0gY29uZmlnTGlzdGVuO1xuICAgIHByb2Nlc3MuZW1pdFdhcm5pbmcoJ211bHRpcGxlIGFkZHJlc3NlcyB3aWxsIGJlIGRlcHJlY2F0ZWQgaW4gdGhlIG5leHQgbWFqb3IsIG9ubHkgdXNlIG9uZScpO1xuICB9IGVsc2UgaWYgKGNvbmZpZ0xpc3Rlbikge1xuICAgIGFkZHJlc3NlcyA9IFtjb25maWdMaXN0ZW5dO1xuICB9IGVsc2Uge1xuICAgIGFkZHJlc3NlcyA9IFtERUZBVUxUX1BPUlRdO1xuICB9XG4gIGFkZHJlc3NlcyA9IGFkZHJlc3Nlc1xuICAgIC5tYXAoZnVuY3Rpb24gKGFkZHIpOiBzdHJpbmcge1xuICAgICAgY29uc3QgcGFyc2VkQWRkciA9IHBhcnNlQWRkcmVzcyhhZGRyKTtcblxuICAgICAgaWYgKCFwYXJzZWRBZGRyKSB7XG4gICAgICAgIGxvZ2dlci5sb2dnZXIud2FybihcbiAgICAgICAgICB7IGFkZHI6IGFkZHIgfSxcbiAgICAgICAgICAnaW52YWxpZCBhZGRyZXNzIC0gQHthZGRyfSwgd2UgZXhwZWN0IGEgcG9ydCAoZS5nLiBcIjQ4NzNcIiksJyArXG4gICAgICAgICAgICAnIGhvc3Q6cG9ydCAoZS5nLiBcImxvY2FsaG9zdDo0ODczXCIpIG9yIGZ1bGwgdXJsJyArXG4gICAgICAgICAgICAnIChlLmcuIFwiaHR0cDovL2xvY2FsaG9zdDo0ODczL1wiKSdcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHBhcnNlZEFkZHI7XG4gICAgfSlcbiAgICAuZmlsdGVyKEJvb2xlYW4pO1xuXG4gIHJldHVybiBhZGRyZXNzZXM7XG59XG4iXX0=