"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.InitCommand = exports.DEFAULT_PROCESS_NAME = void 0;

var _path = _interopRequireDefault(require("path"));

var _clipanion = require("clipanion");

var _bootstrap = require("../../bootstrap");

var _configPath = _interopRequireDefault(require("../../config-path"));

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

require('pkginfo')(module);

const pkgVersion = module.exports.version;
const pkgName = module.exports.name;
const DEFAULT_PROCESS_NAME = 'verdaccio';
exports.DEFAULT_PROCESS_NAME = DEFAULT_PROCESS_NAME;

const logger = require('../../logger');

class InitCommand extends _clipanion.Command {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "listen", _clipanion.Option.String('-l,--listen', {
      description: 'host:port number to listen on (default: localhost:4873)'
    }));

    _defineProperty(this, "config", _clipanion.Option.String('-c,--config', {
      description: 'use this configuration file (default: ./config.yaml)'
    }));
  }

  async execute() {
    let configPathLocation;

    try {
      configPathLocation = (0, _configPath.default)(this.config);
      const verdaccioConfiguration = (0, _utils.parseConfigFile)(configPathLocation);

      if (!verdaccioConfiguration.self_path) {
        verdaccioConfiguration.self_path = _path.default.resolve(configPathLocation);
      }

      if (!verdaccioConfiguration.https) {
        verdaccioConfiguration.https = {
          enable: false
        };
      }

      logger.logger.warn({
        file: configPathLocation
      }, 'config file  - @{file}');
      process.title = verdaccioConfiguration.web && verdaccioConfiguration.web.title || 'verdaccio';
      (0, _bootstrap.startVerdaccio)(verdaccioConfiguration, this.listen, configPathLocation, pkgVersion, pkgName, _bootstrap.listenDefaultCallback);
    } catch (err) {
      logger.logger.fatal({
        file: configPathLocation,
        err: err
      }, 'cannot open config file @{file}: @{!err.message}');
      process.exit(1);
    }
  }

}

exports.InitCommand = InitCommand;

_defineProperty(InitCommand, "paths", [_clipanion.Command.Default]);

_defineProperty(InitCommand, "usage", _clipanion.Command.Usage({
  description: `launch the server`,
  details: `
      This start the registry in the default port.

      When used without arguments, it:

      - bootstrap the server at the port  \`4873\`

      The optional arguments are:

      - \`--listen\` to switch the default server port,
      - \`--config\` to define a different configuration path location,

    `,
  examples: [[`Runs the server with the default configuration`, `verdaccio`], [`Runs the server in the port 5000`, `verdaccio --listen 5000`], [`Runs the server by using a different absolute location of the configuration file`, `verdaccio --config /home/user/verdaccio/config.yaml`]]
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9saWIvY2xpL2NvbW1hbmRzL2luaXQudHMiXSwibmFtZXMiOlsicmVxdWlyZSIsIm1vZHVsZSIsInBrZ1ZlcnNpb24iLCJleHBvcnRzIiwidmVyc2lvbiIsInBrZ05hbWUiLCJuYW1lIiwiREVGQVVMVF9QUk9DRVNTX05BTUUiLCJsb2dnZXIiLCJJbml0Q29tbWFuZCIsIkNvbW1hbmQiLCJPcHRpb24iLCJTdHJpbmciLCJkZXNjcmlwdGlvbiIsImV4ZWN1dGUiLCJjb25maWdQYXRoTG9jYXRpb24iLCJjb25maWciLCJ2ZXJkYWNjaW9Db25maWd1cmF0aW9uIiwic2VsZl9wYXRoIiwicGF0aCIsInJlc29sdmUiLCJodHRwcyIsImVuYWJsZSIsIndhcm4iLCJmaWxlIiwicHJvY2VzcyIsInRpdGxlIiwid2ViIiwibGlzdGVuIiwibGlzdGVuRGVmYXVsdENhbGxiYWNrIiwiZXJyIiwiZmF0YWwiLCJleGl0IiwiRGVmYXVsdCIsIlVzYWdlIiwiZGV0YWlscyIsImV4YW1wbGVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBQ0E7O0FBQ0E7Ozs7OztBQUVBQSxPQUFPLENBQUMsU0FBRCxDQUFQLENBQW1CQyxNQUFuQjs7QUFDQSxNQUFNQyxVQUFVLEdBQUdELE1BQU0sQ0FBQ0UsT0FBUCxDQUFlQyxPQUFsQztBQUNBLE1BQU1DLE9BQU8sR0FBR0osTUFBTSxDQUFDRSxPQUFQLENBQWVHLElBQS9CO0FBRU8sTUFBTUMsb0JBQTRCLEdBQUcsV0FBckM7OztBQUNQLE1BQU1DLE1BQU0sR0FBR1IsT0FBTyxDQUFDLGNBQUQsQ0FBdEI7O0FBRU8sTUFBTVMsV0FBTixTQUEwQkMsa0JBQTFCLENBQWtDO0FBQUE7QUFBQTs7QUFBQSxvQ0FHOUJDLGtCQUFPQyxNQUFQLENBQWMsYUFBZCxFQUE2QjtBQUNwQ0MsTUFBQUEsV0FBVyxFQUFFO0FBRHVCLEtBQTdCLENBSDhCOztBQUFBLG9DQThCOUJGLGtCQUFPQyxNQUFQLENBQWMsYUFBZCxFQUE2QjtBQUNwQ0MsTUFBQUEsV0FBVyxFQUFFO0FBRHVCLEtBQTdCLENBOUI4QjtBQUFBOztBQWtDMUIsUUFBUEMsT0FBTyxHQUFHO0FBQ2QsUUFBSUMsa0JBQUo7O0FBQ0EsUUFBSTtBQUNGQSxNQUFBQSxrQkFBa0IsR0FBRyx5QkFBZSxLQUFLQyxNQUFwQixDQUFyQjtBQUNBLFlBQU1DLHNCQUFzQixHQUFHLDRCQUFnQkYsa0JBQWhCLENBQS9COztBQUNBLFVBQUksQ0FBQ0Usc0JBQXNCLENBQUNDLFNBQTVCLEVBQXVDO0FBQ3JDRCxRQUFBQSxzQkFBc0IsQ0FBQ0MsU0FBdkIsR0FBbUNDLGNBQUtDLE9BQUwsQ0FBYUwsa0JBQWIsQ0FBbkM7QUFDRDs7QUFDRCxVQUFJLENBQUNFLHNCQUFzQixDQUFDSSxLQUE1QixFQUFtQztBQUNqQ0osUUFBQUEsc0JBQXNCLENBQUNJLEtBQXZCLEdBQStCO0FBQUVDLFVBQUFBLE1BQU0sRUFBRTtBQUFWLFNBQS9CO0FBQ0Q7O0FBRURkLE1BQUFBLE1BQU0sQ0FBQ0EsTUFBUCxDQUFjZSxJQUFkLENBQW1CO0FBQUVDLFFBQUFBLElBQUksRUFBRVQ7QUFBUixPQUFuQixFQUFpRCx3QkFBakQ7QUFDQVUsTUFBQUEsT0FBTyxDQUFDQyxLQUFSLEdBQWlCVCxzQkFBc0IsQ0FBQ1UsR0FBdkIsSUFBOEJWLHNCQUFzQixDQUFDVSxHQUF2QixDQUEyQkQsS0FBMUQsSUFBb0UsV0FBcEY7QUFFQSxxQ0FBZVQsc0JBQWYsRUFBdUMsS0FBS1csTUFBNUMsRUFBOERiLGtCQUE5RCxFQUFrRmIsVUFBbEYsRUFBOEZHLE9BQTlGLEVBQXVHd0IsZ0NBQXZHO0FBQ0QsS0FkRCxDQWNFLE9BQU9DLEdBQVAsRUFBWTtBQUNadEIsTUFBQUEsTUFBTSxDQUFDQSxNQUFQLENBQWN1QixLQUFkLENBQW9CO0FBQUVQLFFBQUFBLElBQUksRUFBRVQsa0JBQVI7QUFBNEJlLFFBQUFBLEdBQUcsRUFBRUE7QUFBakMsT0FBcEIsRUFBNEQsa0RBQTVEO0FBQ0FMLE1BQUFBLE9BQU8sQ0FBQ08sSUFBUixDQUFhLENBQWI7QUFDRDtBQUNGOztBQXREc0M7Ozs7Z0JBQTVCdkIsVyxXQUNJLENBQUNDLG1CQUFRdUIsT0FBVCxDOztnQkFESnhCLFcsV0FRSUMsbUJBQVF3QixLQUFSLENBQWM7QUFDM0JyQixFQUFBQSxXQUFXLEVBQUcsbUJBRGE7QUFFM0JzQixFQUFBQSxPQUFPLEVBQUc7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FkK0I7QUFlM0JDLEVBQUFBLFFBQVEsRUFBRSxDQUNSLENBQUUsZ0RBQUYsRUFBb0QsV0FBcEQsQ0FEUSxFQUVSLENBQUUsa0NBQUYsRUFBc0MseUJBQXRDLENBRlEsRUFHUixDQUFFLGtGQUFGLEVBQXNGLHFEQUF0RixDQUhRO0FBZmlCLENBQWQsQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHsgQ29tbWFuZCwgT3B0aW9uIH0gZnJvbSAnY2xpcGFuaW9uJztcblxuaW1wb3J0IHsgc3RhcnRWZXJkYWNjaW8sIGxpc3RlbkRlZmF1bHRDYWxsYmFjayB9IGZyb20gJy4uLy4uL2Jvb3RzdHJhcCc7XG5pbXBvcnQgZmluZENvbmZpZ0ZpbGUgZnJvbSAnLi4vLi4vY29uZmlnLXBhdGgnO1xuaW1wb3J0IHsgcGFyc2VDb25maWdGaWxlIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuXG5yZXF1aXJlKCdwa2dpbmZvJykobW9kdWxlKTtcbmNvbnN0IHBrZ1ZlcnNpb24gPSBtb2R1bGUuZXhwb3J0cy52ZXJzaW9uO1xuY29uc3QgcGtnTmFtZSA9IG1vZHVsZS5leHBvcnRzLm5hbWU7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUX1BST0NFU1NfTkFNRTogc3RyaW5nID0gJ3ZlcmRhY2Npbyc7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCcuLi8uLi9sb2dnZXInKTtcblxuZXhwb3J0IGNsYXNzIEluaXRDb21tYW5kIGV4dGVuZHMgQ29tbWFuZCB7XG4gIHN0YXRpYyBwYXRocyA9IFtDb21tYW5kLkRlZmF1bHRdO1xuXG4gIGxpc3RlbiA9IE9wdGlvbi5TdHJpbmcoJy1sLC0tbGlzdGVuJywge1xuICAgIGRlc2NyaXB0aW9uOiAnaG9zdDpwb3J0IG51bWJlciB0byBsaXN0ZW4gb24gKGRlZmF1bHQ6IGxvY2FsaG9zdDo0ODczKScsXG4gIH0pO1xuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICBzdGF0aWMgdXNhZ2UgPSBDb21tYW5kLlVzYWdlKHtcbiAgICBkZXNjcmlwdGlvbjogYGxhdW5jaCB0aGUgc2VydmVyYCxcbiAgICBkZXRhaWxzOiBgXG4gICAgICBUaGlzIHN0YXJ0IHRoZSByZWdpc3RyeSBpbiB0aGUgZGVmYXVsdCBwb3J0LlxuXG4gICAgICBXaGVuIHVzZWQgd2l0aG91dCBhcmd1bWVudHMsIGl0OlxuXG4gICAgICAtIGJvb3RzdHJhcCB0aGUgc2VydmVyIGF0IHRoZSBwb3J0ICBcXGA0ODczXFxgXG5cbiAgICAgIFRoZSBvcHRpb25hbCBhcmd1bWVudHMgYXJlOlxuXG4gICAgICAtIFxcYC0tbGlzdGVuXFxgIHRvIHN3aXRjaCB0aGUgZGVmYXVsdCBzZXJ2ZXIgcG9ydCxcbiAgICAgIC0gXFxgLS1jb25maWdcXGAgdG8gZGVmaW5lIGEgZGlmZmVyZW50IGNvbmZpZ3VyYXRpb24gcGF0aCBsb2NhdGlvbixcblxuICAgIGAsXG4gICAgZXhhbXBsZXM6IFtcbiAgICAgIFtgUnVucyB0aGUgc2VydmVyIHdpdGggdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbmAsIGB2ZXJkYWNjaW9gXSxcbiAgICAgIFtgUnVucyB0aGUgc2VydmVyIGluIHRoZSBwb3J0IDUwMDBgLCBgdmVyZGFjY2lvIC0tbGlzdGVuIDUwMDBgXSxcbiAgICAgIFtgUnVucyB0aGUgc2VydmVyIGJ5IHVzaW5nIGEgZGlmZmVyZW50IGFic29sdXRlIGxvY2F0aW9uIG9mIHRoZSBjb25maWd1cmF0aW9uIGZpbGVgLCBgdmVyZGFjY2lvIC0tY29uZmlnIC9ob21lL3VzZXIvdmVyZGFjY2lvL2NvbmZpZy55YW1sYF0sXG4gICAgXSxcbiAgfSk7XG5cbiAgY29uZmlnID0gT3B0aW9uLlN0cmluZygnLWMsLS1jb25maWcnLCB7XG4gICAgZGVzY3JpcHRpb246ICd1c2UgdGhpcyBjb25maWd1cmF0aW9uIGZpbGUgKGRlZmF1bHQ6IC4vY29uZmlnLnlhbWwpJyxcbiAgfSk7XG5cbiAgYXN5bmMgZXhlY3V0ZSgpIHtcbiAgICBsZXQgY29uZmlnUGF0aExvY2F0aW9uO1xuICAgIHRyeSB7XG4gICAgICBjb25maWdQYXRoTG9jYXRpb24gPSBmaW5kQ29uZmlnRmlsZSh0aGlzLmNvbmZpZyBhcyBzdHJpbmcpO1xuICAgICAgY29uc3QgdmVyZGFjY2lvQ29uZmlndXJhdGlvbiA9IHBhcnNlQ29uZmlnRmlsZShjb25maWdQYXRoTG9jYXRpb24pO1xuICAgICAgaWYgKCF2ZXJkYWNjaW9Db25maWd1cmF0aW9uLnNlbGZfcGF0aCkge1xuICAgICAgICB2ZXJkYWNjaW9Db25maWd1cmF0aW9uLnNlbGZfcGF0aCA9IHBhdGgucmVzb2x2ZShjb25maWdQYXRoTG9jYXRpb24pO1xuICAgICAgfVxuICAgICAgaWYgKCF2ZXJkYWNjaW9Db25maWd1cmF0aW9uLmh0dHBzKSB7XG4gICAgICAgIHZlcmRhY2Npb0NvbmZpZ3VyYXRpb24uaHR0cHMgPSB7IGVuYWJsZTogZmFsc2UgfTtcbiAgICAgIH1cblxuICAgICAgbG9nZ2VyLmxvZ2dlci53YXJuKHsgZmlsZTogY29uZmlnUGF0aExvY2F0aW9uIH0sICdjb25maWcgZmlsZSAgLSBAe2ZpbGV9Jyk7XG4gICAgICBwcm9jZXNzLnRpdGxlID0gKHZlcmRhY2Npb0NvbmZpZ3VyYXRpb24ud2ViICYmIHZlcmRhY2Npb0NvbmZpZ3VyYXRpb24ud2ViLnRpdGxlKSB8fCAndmVyZGFjY2lvJztcblxuICAgICAgc3RhcnRWZXJkYWNjaW8odmVyZGFjY2lvQ29uZmlndXJhdGlvbiwgdGhpcy5saXN0ZW4gYXMgc3RyaW5nLCBjb25maWdQYXRoTG9jYXRpb24sIHBrZ1ZlcnNpb24sIHBrZ05hbWUsIGxpc3RlbkRlZmF1bHRDYWxsYmFjayk7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBsb2dnZXIubG9nZ2VyLmZhdGFsKHsgZmlsZTogY29uZmlnUGF0aExvY2F0aW9uLCBlcnI6IGVyciB9LCAnY2Fubm90IG9wZW4gY29uZmlnIGZpbGUgQHtmaWxlfTogQHshZXJyLm1lc3NhZ2V9Jyk7XG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfVxuICB9XG59XG4iXX0=