"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isObject = isObject;
exports.formatLoggingDate = formatLoggingDate;
exports.fillInMsgTemplate = fillInMsgTemplate;
exports.printMessage = printMessage;
exports.FORMAT_DATE = exports.CUSTOM_PAD_LENGTH = void 0;

var _util = require("util");

var _kleur = require("kleur");

var _lodash = _interopRequireDefault(require("lodash"));

var _dayjs = _interopRequireDefault(require("dayjs"));

var _levels = require("../levels");

var _utils = require("../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const CUSTOM_PAD_LENGTH = 1;
exports.CUSTOM_PAD_LENGTH = CUSTOM_PAD_LENGTH;
const FORMAT_DATE = 'YYYY-MM-DD HH:mm:ss';
exports.FORMAT_DATE = FORMAT_DATE;

function isObject(obj) {
  return _lodash.default.isObject(obj) && _lodash.default.isNull(obj) === false && _lodash.default.isArray(obj) === false;
}

function formatLoggingDate(time, message) {
  const timeFormatted = (0, _dayjs.default)(time).format(FORMAT_DATE);
  return `[${timeFormatted}]${message}`;
}

let LEVEL_VALUE_MAX = 0; // eslint-disable-next-line guard-for-in

for (const l in _levels.levelsColors) {
  LEVEL_VALUE_MAX = Math.max(LEVEL_VALUE_MAX, l.length);
}

const ERROR_FLAG = '!';

function fillInMsgTemplate(msg, templateOptions, colors) {
  const templateRegex = /@{(!?[$A-Za-z_][$0-9A-Za-z\._]*)}/g;
  return msg.replace(templateRegex, (_, name) => {
    let str = templateOptions;
    let isError;

    if (name[0] === ERROR_FLAG) {
      name = name.substr(1);
      isError = true;
    } // object can be @{foo.bar.}


    const listAccessors = name.split('.');

    for (let property = 0; property < listAccessors.length; property++) {
      const id = listAccessors[property];

      if (isObject(str)) {
        str = str[id];
      }
    }

    if (typeof str === 'string') {
      if (colors === false || str.includes('\n')) {
        return str;
      } else if (isError) {
        return (0, _kleur.red)(str);
      }

      return (0, _kleur.green)(str);
    } // object, showHidden, depth, colors


    return (0, _util.inspect)(str, undefined, null, colors);
  });
}

function getMessage(debugLevel, msg, sub, templateObjects, hasColors) {
  const finalMessage = fillInMsgTemplate(msg, templateObjects, hasColors);
  const subSystemType = _levels.subSystemLevels.color[sub !== null && sub !== void 0 ? sub : 'default'];

  if (hasColors) {
    const logString = `${_levels.levelsColors[debugLevel]((0, _utils.padRight)(debugLevel, LEVEL_VALUE_MAX))}${(0, _kleur.white)(`${subSystemType} ${finalMessage}`)}`;
    return (0, _utils.padLeft)(logString);
  }

  const logString = `${(0, _utils.padRight)(debugLevel, LEVEL_VALUE_MAX)}${subSystemType} ${finalMessage}`;
  return (0, _utils.padRight)(logString);
}

function printMessage(templateObjects, options, hasColors = true) {
  const {
    prettyStamp
  } = options;
  const {
    level,
    msg,
    sub
  } = templateObjects;
  const debugLevel = (0, _levels.calculateLevel)(level);
  const logMessage = getMessage(debugLevel, msg, sub, templateObjects, hasColors);
  return prettyStamp ? formatLoggingDate(templateObjects.time, logMessage) : logMessage;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,