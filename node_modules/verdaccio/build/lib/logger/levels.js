"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.calculateLevel = calculateLevel;
exports.subSystemLevels = exports.levelsColors = void 0;

var _kleur = require("kleur");

function calculateLevel(levelCode) {
  switch (true) {
    case levelCode === 10:
      return 'trace';

    case levelCode === 20:
      return 'debug';

    case levelCode === 25:
      return 'http';

    case levelCode === 30:
      return 'info';

    case levelCode === 40:
      return 'warn';

    case levelCode === 50:
      return 'error';

    case levelCode === 60:
      return 'fatal';

    default:
      return 'fatal';
  }
}

const levelsColors = {
  fatal: _kleur.red,
  error: _kleur.red,
  warn: _kleur.yellow,
  http: _kleur.magenta,
  info: _kleur.cyan,
  debug: _kleur.green,
  trace: _kleur.white
};
exports.levelsColors = levelsColors;
var ARROWS;

(function (ARROWS) {
  ARROWS["LEFT"] = "<--";
  ARROWS["RIGHT"] = "-->";
  ARROWS["EQUAL"] = "-=-";
  ARROWS["NEUTRAL"] = "---";
})(ARROWS || (ARROWS = {}));

const subSystemLevels = {
  color: {
    in: (0, _kleur.green)(ARROWS.LEFT),
    out: (0, _kleur.yellow)(ARROWS.RIGHT),
    fs: (0, _kleur.black)(ARROWS.EQUAL),
    default: (0, _kleur.blue)(ARROWS.NEUTRAL)
  },
  white: {
    in: ARROWS.LEFT,
    out: ARROWS.RIGHT,
    fs: ARROWS.EQUAL,
    default: ARROWS.NEUTRAL
  }
};
exports.subSystemLevels = subSystemLevels;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvbG9nZ2VyL2xldmVscy50cyJdLCJuYW1lcyI6WyJjYWxjdWxhdGVMZXZlbCIsImxldmVsQ29kZSIsImxldmVsc0NvbG9ycyIsImZhdGFsIiwicmVkIiwiZXJyb3IiLCJ3YXJuIiwieWVsbG93IiwiaHR0cCIsIm1hZ2VudGEiLCJpbmZvIiwiY3lhbiIsImRlYnVnIiwiZ3JlZW4iLCJ0cmFjZSIsIndoaXRlIiwiQVJST1dTIiwic3ViU3lzdGVtTGV2ZWxzIiwiY29sb3IiLCJpbiIsIkxFRlQiLCJvdXQiLCJSSUdIVCIsImZzIiwiRVFVQUwiLCJkZWZhdWx0IiwiTkVVVFJBTCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFNTyxTQUFTQSxjQUFULENBQXdCQyxTQUF4QixFQUF3RDtBQUMzRCxVQUFRLElBQVI7QUFDSSxTQUFLQSxTQUFTLEtBQUssRUFBbkI7QUFDSSxhQUFPLE9BQVA7O0FBQ0osU0FBS0EsU0FBUyxLQUFLLEVBQW5CO0FBQ0ksYUFBTyxPQUFQOztBQUNKLFNBQUtBLFNBQVMsS0FBSyxFQUFuQjtBQUNJLGFBQU8sTUFBUDs7QUFDSixTQUFLQSxTQUFTLEtBQUssRUFBbkI7QUFDSSxhQUFPLE1BQVA7O0FBQ0osU0FBS0EsU0FBUyxLQUFLLEVBQW5CO0FBQ0ksYUFBTyxNQUFQOztBQUNKLFNBQUtBLFNBQVMsS0FBSyxFQUFuQjtBQUNJLGFBQU8sT0FBUDs7QUFDSixTQUFLQSxTQUFTLEtBQUssRUFBbkI7QUFDSSxhQUFPLE9BQVA7O0FBQ0o7QUFDSSxhQUFPLE9BQVA7QUFoQlI7QUFrQkg7O0FBRU0sTUFBTUMsWUFBWSxHQUFHO0FBQ3hCQyxFQUFBQSxLQUFLLEVBQUVDLFVBRGlCO0FBRXhCQyxFQUFBQSxLQUFLLEVBQUVELFVBRmlCO0FBR3hCRSxFQUFBQSxJQUFJLEVBQUVDLGFBSGtCO0FBSXhCQyxFQUFBQSxJQUFJLEVBQUVDLGNBSmtCO0FBS3hCQyxFQUFBQSxJQUFJLEVBQUVDLFdBTGtCO0FBTXhCQyxFQUFBQSxLQUFLLEVBQUVDLFlBTmlCO0FBT3hCQyxFQUFBQSxLQUFLLEVBQUVDO0FBUGlCLENBQXJCOztJQVVGQyxNOztXQUFBQSxNO0FBQUFBLEVBQUFBLE07QUFBQUEsRUFBQUEsTTtBQUFBQSxFQUFBQSxNO0FBQUFBLEVBQUFBLE07R0FBQUEsTSxLQUFBQSxNOztBQU9FLE1BQU1DLGVBQWUsR0FBRztBQUM3QkMsRUFBQUEsS0FBSyxFQUFFO0FBQ0hDLElBQUFBLEVBQUUsRUFBRSxrQkFBTUgsTUFBTSxDQUFDSSxJQUFiLENBREQ7QUFFSEMsSUFBQUEsR0FBRyxFQUFFLG1CQUFPTCxNQUFNLENBQUNNLEtBQWQsQ0FGRjtBQUdIQyxJQUFBQSxFQUFFLEVBQUUsa0JBQU1QLE1BQU0sQ0FBQ1EsS0FBYixDQUhEO0FBSUhDLElBQUFBLE9BQU8sRUFBRSxpQkFBS1QsTUFBTSxDQUFDVSxPQUFaO0FBSk4sR0FEc0I7QUFPN0JYLEVBQUFBLEtBQUssRUFBRTtBQUNISSxJQUFBQSxFQUFFLEVBQUVILE1BQU0sQ0FBQ0ksSUFEUjtBQUVIQyxJQUFBQSxHQUFHLEVBQUVMLE1BQU0sQ0FBQ00sS0FGVDtBQUdIQyxJQUFBQSxFQUFFLEVBQUVQLE1BQU0sQ0FBQ1EsS0FIUjtBQUlIQyxJQUFBQSxPQUFPLEVBQUVULE1BQU0sQ0FBQ1U7QUFKYjtBQVBzQixDQUF4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHllbGxvdywgZ3JlZW4sIHJlZCwgbWFnZW50YSwgYmxhY2ssIGJsdWUsIGN5YW4sIHdoaXRlIH0gZnJvbSAna2xldXInO1xuXG5leHBvcnQgdHlwZSBMb2dMZXZlbCA9ICd0cmFjZScgfCAnZGVidWcnIHwgJ2luZm8nIHwgJ2h0dHAnIHwgJ3dhcm4nIHwgJ2Vycm9yJyB8ICdmYXRhbCc7XG5cbmV4cG9ydCB0eXBlIExldmVsQ29kZSA9IG51bWJlcjtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZUxldmVsKGxldmVsQ29kZTogTGV2ZWxDb2RlKTogTG9nTGV2ZWwge1xuICAgIHN3aXRjaCAodHJ1ZSkge1xuICAgICAgICBjYXNlIGxldmVsQ29kZSA9PT0gMTA6XG4gICAgICAgICAgICByZXR1cm4gJ3RyYWNlJztcbiAgICAgICAgY2FzZSBsZXZlbENvZGUgPT09IDIwOlxuICAgICAgICAgICAgcmV0dXJuICdkZWJ1Zyc7XG4gICAgICAgIGNhc2UgbGV2ZWxDb2RlID09PSAyNTpcbiAgICAgICAgICAgIHJldHVybiAnaHR0cCc7XG4gICAgICAgIGNhc2UgbGV2ZWxDb2RlID09PSAzMDpcbiAgICAgICAgICAgIHJldHVybiAnaW5mbyc7XG4gICAgICAgIGNhc2UgbGV2ZWxDb2RlID09PSA0MDpcbiAgICAgICAgICAgIHJldHVybiAnd2Fybic7XG4gICAgICAgIGNhc2UgbGV2ZWxDb2RlID09PSA1MDpcbiAgICAgICAgICAgIHJldHVybiAnZXJyb3InO1xuICAgICAgICBjYXNlIGxldmVsQ29kZSA9PT0gNjA6XG4gICAgICAgICAgICByZXR1cm4gJ2ZhdGFsJztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiAnZmF0YWwnO1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGxldmVsc0NvbG9ycyA9IHtcbiAgICBmYXRhbDogcmVkLFxuICAgIGVycm9yOiByZWQsXG4gICAgd2FybjogeWVsbG93LFxuICAgIGh0dHA6IG1hZ2VudGEsXG4gICAgaW5mbzogY3lhbixcbiAgICBkZWJ1ZzogZ3JlZW4sXG4gICAgdHJhY2U6IHdoaXRlLFxufTtcblxuZW51bSBBUlJPV1Mge1xuICBMRUZUID0gJzwtLScsXG4gIFJJR0hUID0gJy0tPicsXG4gIEVRVUFMID0gJy09LScsXG4gIE5FVVRSQUwgPSAnLS0tJ1xufVxuXG5leHBvcnQgY29uc3Qgc3ViU3lzdGVtTGV2ZWxzID0ge1xuICBjb2xvcjoge1xuICAgICAgaW46IGdyZWVuKEFSUk9XUy5MRUZUKSxcbiAgICAgIG91dDogeWVsbG93KEFSUk9XUy5SSUdIVCksXG4gICAgICBmczogYmxhY2soQVJST1dTLkVRVUFMKSxcbiAgICAgIGRlZmF1bHQ6IGJsdWUoQVJST1dTLk5FVVRSQUwpLFxuICB9LFxuICB3aGl0ZToge1xuICAgICAgaW46IEFSUk9XUy5MRUZULFxuICAgICAgb3V0OiBBUlJPV1MuUklHSFQsXG4gICAgICBmczogQVJST1dTLkVRVUFMLFxuICAgICAgZGVmYXVsdDogQVJST1dTLk5FVVRSQUwsXG4gIH0sXG59O1xuIl19