"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createLogger = createLogger;
exports.getLogger = getLogger;
exports.setup = setup;
exports.logger = void 0;

var _pino = _interopRequireDefault(require("pino"));

var _lodash = _interopRequireDefault(require("lodash"));

var _debug = _interopRequireDefault(require("debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function isProd() {
  return process.env.NODE_ENV === 'production';
}

let logger;
exports.logger = logger;
const debug = (0, _debug.default)('verdaccio:logger');
const DEFAULT_LOG_FORMAT = isProd() ? 'json' : 'pretty';

function createLogger(options = {
  level: 'http'
}, destination = _pino.default.destination(1), format = DEFAULT_LOG_FORMAT, prettyPrintOptions = {
  // we hide warning since the prettifier should not be used in production
  // https://getpino.io/#/docs/pretty?id=prettifier-api
  suppressFlushSyncWarning: true
}) {
  if (_lodash.default.isNil(format)) {
    format = DEFAULT_LOG_FORMAT;
  }

  let pinoConfig = _objectSpread(_objectSpread({
    customLevels: {
      http: 25
    }
  }, options), {}, {
    level: options.level,
    serializers: {
      err: _pino.default.stdSerializers.err,
      req: _pino.default.stdSerializers.req,
      res: _pino.default.stdSerializers.res
    }
  });

  debug('has prettifier? %o', !isProd()); // pretty logs are not allowed in production for performance reasons

  if ((format === DEFAULT_LOG_FORMAT || format !== 'json') && isProd() === false) {
    pinoConfig = Object.assign({}, pinoConfig, {
      // more info
      // https://github.com/pinojs/pino-pretty/issues/37
      prettyPrint: _objectSpread({
        levelFirst: true,
        prettyStamp: format === 'pretty-timestamped'
      }, prettyPrintOptions),
      prettifier: require('./formatter')
    });
  }

  const logger = (0, _pino.default)(pinoConfig, destination);

  if (process.env.DEBUG) {
    logger.on('level-change', (lvl, val, prevLvl, prevVal) => {
      debug('%s (%d) was changed to %s (%d)', lvl, val, prevLvl, prevVal);
    });
  }

  return logger;
}

function getLogger() {
  if (_lodash.default.isNil(logger)) {
    process.emitWarning('logger is not defined');
    return;
  }

  return logger;
}

const DEFAULT_LOGGER_CONF = {
  type: 'stdout',
  format: 'pretty',
  level: 'http'
};

function setup(options = [DEFAULT_LOGGER_CONF]) {
  var _loggerConfig;

  debug('setup logger');
  const isLegacyConf = Array.isArray(options);

  if (isLegacyConf) {
    const deprecateMessage = 'deprecate: multiple logger configuration is deprecated, please check the migration guide.';
    process.emitWarning(deprecateMessage);
  } // verdaccio 5 does not allow multiple logger configuration
  // backward compatible, pick only the first option
  // next major will thrown an error


  let loggerConfig = isLegacyConf ? options[0] : options;

  if (!((_loggerConfig = loggerConfig) !== null && _loggerConfig !== void 0 && _loggerConfig.level)) {
    loggerConfig = Object.assign({}, {
      level: 'http'
    }, loggerConfig);
  }

  const pinoConfig = {
    level: loggerConfig.level
  };

  if (loggerConfig.type === 'file') {
    debug('logging file enabled');
    exports.logger = logger = createLogger(pinoConfig, _pino.default.destination(loggerConfig.path), loggerConfig.format);
  } else if (loggerConfig.type === 'rotating-file') {
    process.emitWarning('rotating-file type is not longer supported, consider use [logrotate] instead');
    debug('logging stdout enabled');
    exports.logger = logger = createLogger(pinoConfig, _pino.default.destination(1), loggerConfig.format);
  } else {
    debug('logging stdout enabled');
    exports.logger = logger = createLogger(pinoConfig, _pino.default.destination(1), loggerConfig.format);
  }

  if (isProd()) {
    // why only on prod? https://github.com/pinojs/pino/issues/920#issuecomment-710807667
    const finalHandler = _pino.default.final(logger, (err, finalLogger, event) => {
      finalLogger.info(`${event} caught`);

      if (err) {
        finalLogger.error(err, 'error caused exit');
      }

      process.exit(err ? 1 : 0);
    });

    process.on('uncaughtException', err => finalHandler(err, 'uncaughtException'));
    process.on('unhandledRejection', err => finalHandler(err, 'unhandledRejection'));
    process.on('beforeExit', () => finalHandler(null, 'beforeExit'));
    process.on('exit', () => finalHandler(null, 'exit'));
    process.on('uncaughtException', err => finalHandler(err, 'uncaughtException'));
    process.on('SIGINT', () => finalHandler(null, 'SIGINT'));
    process.on('SIGQUIT', () => finalHandler(null, 'SIGQUIT'));
    process.on('SIGTERM', () => finalHandler(null, 'SIGTERM'));
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,