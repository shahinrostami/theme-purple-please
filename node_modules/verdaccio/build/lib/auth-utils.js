"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validatePassword = validatePassword;
exports.createRemoteUser = createRemoteUser;
exports.createAnonymousRemoteUser = createAnonymousRemoteUser;
exports.allow_action = allow_action;
exports.handleSpecialUnpublish = handleSpecialUnpublish;
exports.getDefaultPlugins = getDefaultPlugins;
exports.createSessionToken = createSessionToken;
exports.getSecurity = getSecurity;
exports.getAuthenticatedMessage = getAuthenticatedMessage;
exports.buildUserBuffer = buildUserBuffer;
exports.isAESLegacy = isAESLegacy;
exports.getApiToken = getApiToken;
exports.parseAuthTokenHeader = parseAuthTokenHeader;
exports.parseBasicPayload = parseBasicPayload;
exports.parseAESCredentials = parseAESCredentials;
exports.verifyJWTPayload = verifyJWTPayload;
exports.isAuthHeaderValid = isAuthHeaderValid;
exports.getMiddlewareCredentials = getMiddlewareCredentials;
exports.expireReasons = exports.defaultSecurity = void 0;

var _lodash = _interopRequireDefault(require("lodash"));

var _debug = _interopRequireDefault(require("debug"));

var _logger = require("../lib/logger");

var _utils = require("./utils");

var _constants = require("./constants");

var _cryptoUtils = require("./crypto-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug.default)('verdaccio');

function validatePassword(password, // pragma: allowlist secret
minLength = _constants.DEFAULT_MIN_LIMIT_PASSWORD) {
  return typeof password === 'string' && password.length >= minLength;
}
/**
 * Create a RemoteUser object
 * @return {Object} { name: xx, pluginGroups: [], real_groups: [] }
 */


function createRemoteUser(name, pluginGroups) {
  const isGroupValid = Array.isArray(pluginGroups);
  const groups = (isGroupValid ? pluginGroups : []).concat([_constants.ROLES.$ALL, _constants.ROLES.$AUTH, _constants.ROLES.DEPRECATED_ALL, _constants.ROLES.DEPRECATED_AUTH, _constants.ROLES.ALL]);
  return {
    name,
    groups,
    real_groups: pluginGroups
  };
}
/**
 * Builds an anonymous remote user in case none is logged in.
 * @return {Object} { name: xx, groups: [], real_groups: [] }
 */


function createAnonymousRemoteUser() {
  return {
    name: undefined,
    // groups without '$' are going to be deprecated eventually
    groups: [_constants.ROLES.$ALL, _constants.ROLES.$ANONYMOUS, _constants.ROLES.DEPRECATED_ALL, _constants.ROLES.DEPRECATED_ANONYMOUS],
    real_groups: []
  };
}

function allow_action(action) {
  return function (user, pkg, callback) {
    debug('[auth/allow_action]: user: %o', user === null || user === void 0 ? void 0 : user.name);
    const {
      name,
      groups
    } = user;
    const groupAccess = pkg[action];
    const hasPermission = groupAccess.some(group => name === group || groups.includes(group));
    debug('[auth/allow_action]: hasPermission? %o} for user: %o', hasPermission, user === null || user === void 0 ? void 0 : user.name);

    if (hasPermission) {
      _logger.logger.info({
        remote: user.name
      }, `auth/allow_action: access granted to: @{user}`);

      return callback(null, true);
    }

    if (name) {
      callback(_utils.ErrorCode.getForbidden(`user ${name} is not allowed to ${action} package ${pkg.name}`));
    } else {
      callback(_utils.ErrorCode.getUnauthorized(`authorization required to ${action} package ${pkg.name}`));
    }
  };
}
/**
 *
 */


function handleSpecialUnpublish() {
  return function (user, pkg, callback) {
    const action = 'unpublish'; // verify whether the unpublish prop has been defined

    const isUnpublishMissing = _lodash.default.isNil(pkg[action]);

    const hasGroups = isUnpublishMissing ? false : pkg[action].length > 0;
    debug('fallback unpublish for @{name} has groups: %o for %o', hasGroups, user === null || user === void 0 ? void 0 : user.name);

    if (isUnpublishMissing || hasGroups === false) {
      return callback(null, undefined);
    }

    debug('allow_action for %o for %o has groups: %o for %o', action, user === null || user === void 0 ? void 0 : user.name, hasGroups, user);
    return allow_action(action)(user, pkg, callback);
  };
}

function getDefaultPlugins(logger) {
  return {
    authenticate(_user, _password, cb) {
      // pragma: allowlist secret
      cb(_utils.ErrorCode.getForbidden(_constants.API_ERROR.BAD_USERNAME_PASSWORD));
    },

    add_user(_user, _password, cb) {
      // pragma: allowlist secret
      return cb(_utils.ErrorCode.getConflict(_constants.API_ERROR.BAD_USERNAME_PASSWORD));
    },

    // FIXME: allow_action and allow_publish should be in the @verdaccio/types
    // @ts-ignore
    allow_access: allow_action('access', logger),
    // @ts-ignore
    allow_publish: allow_action('publish', logger),
    allow_unpublish: handleSpecialUnpublish()
  };
}

function createSessionToken() {
  const tenHoursTime = 10 * 60 * 60 * 1000;
  return {
    // npmjs.org sets 10h expire
    expires: new Date(Date.now() + tenHoursTime)
  };
}

const defaultWebTokenOptions = {
  sign: {
    // The expiration token for the website is 7 days
    expiresIn: _constants.TIME_EXPIRATION_7D
  },
  verify: {}
};
const defaultApiTokenConf = {
  legacy: true
};
const defaultSecurity = {
  web: defaultWebTokenOptions,
  api: defaultApiTokenConf
};
exports.defaultSecurity = defaultSecurity;

function getSecurity(config) {
  if (_lodash.default.isNil(config.security) === false) {
    return _lodash.default.merge(defaultSecurity, config.security);
  }

  return defaultSecurity;
}

function getAuthenticatedMessage(user) {
  return `you are authenticated as '${user}'`;
}

function buildUserBuffer(name, password) {
  return Buffer.from(`${name}:${password}`, 'utf8');
}

function isAESLegacy(security) {
  const {
    legacy,
    jwt
  } = security.api;
  return _lodash.default.isNil(legacy) === false && _lodash.default.isNil(jwt) && legacy === true;
}

async function getApiToken(auth, config, remoteUser, aesPassword) {
  const security = getSecurity(config);

  if (isAESLegacy(security)) {
    // fallback all goes to AES encryption
    return await new Promise(resolve => {
      resolve(auth.aesEncrypt(buildUserBuffer(remoteUser.name, aesPassword)).toString('base64'));
    });
  } // i am wiling to use here _.isNil but flow does not like it yet.


  const {
    jwt
  } = security.api;

  if (jwt && jwt.sign) {
    return await auth.jwtEncrypt(remoteUser, jwt.sign);
  }

  return await new Promise(resolve => {
    resolve(auth.aesEncrypt(buildUserBuffer(remoteUser.name, aesPassword)).toString('base64'));
  });
}

function parseAuthTokenHeader(authorizationHeader) {
  const parts = authorizationHeader.split(' ');
  const [scheme, token] = parts;
  return {
    scheme,
    token
  };
}

function parseBasicPayload(credentials) {
  const index = credentials.indexOf(':');

  if (index < 0) {
    return;
  }

  const user = credentials.slice(0, index);
  const password = credentials.slice(index + 1);
  return {
    user,
    password
  };
}

function parseAESCredentials(authorizationHeader, secret) {
  const {
    scheme,
    token
  } = parseAuthTokenHeader(authorizationHeader); // basic is deprecated and should not be enforced

  if (scheme.toUpperCase() === _constants.TOKEN_BASIC.toUpperCase()) {
    const credentials = (0, _utils.convertPayloadToBase64)(token).toString();
    return credentials;
  } else if (scheme.toUpperCase() === _constants.TOKEN_BEARER.toUpperCase()) {
    const tokenAsBuffer = (0, _utils.convertPayloadToBase64)(token);
    const credentials = (0, _cryptoUtils.aesDecrypt)(tokenAsBuffer, secret).toString('utf8');
    return credentials;
  }
}

const expireReasons = ['JsonWebTokenError', 'TokenExpiredError'];
exports.expireReasons = expireReasons;

function verifyJWTPayload(token, secret) {
  try {
    const payload = (0, _cryptoUtils.verifyPayload)(token, secret);
    return payload;
  } catch (error) {
    // #168 this check should be removed as soon AES encrypt is removed.
    if (expireReasons.includes(error.name)) {
      // it might be possible the jwt configuration is enabled and
      // old tokens fails still remains in usage, thus
      // we return an anonymous user to force log in.
      return createAnonymousRemoteUser();
    }

    throw _utils.ErrorCode.getCode(_constants.HTTP_STATUS.UNAUTHORIZED, error.message);
  }
}

function isAuthHeaderValid(authorization) {
  return authorization.split(' ').length === 2;
}

function getMiddlewareCredentials(security, secret, authorizationHeader) {
  if (isAESLegacy(security)) {
    const credentials = parseAESCredentials(authorizationHeader, secret);

    if (!credentials) {
      return;
    }

    const parsedCredentials = parseBasicPayload(credentials);

    if (!parsedCredentials) {
      return;
    }

    return parsedCredentials;
  }

  const {
    scheme,
    token
  } = parseAuthTokenHeader(authorizationHeader);

  if (_lodash.default.isString(token) && scheme.toUpperCase() === _constants.TOKEN_BEARER.toUpperCase()) {
    return verifyJWTPayload(token, secret);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,