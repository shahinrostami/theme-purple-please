import { Options } from '../types';
import { ScanResult } from './types';
import { TestDependenciesResult, TestDepGraphMeta } from '../snyk-test/legacy';
declare type ResolveAndTestFactsStatus = 'CANCELLED' | 'ERROR' | 'PENDING' | 'RUNNING' | 'OK';
interface PollingTask {
    pollInterval: number;
    maxAttempts: number;
}
interface ResolveAndTestFactsResponse {
    token: string;
    pollingTask: PollingTask;
    result?: TestDependenciesResult;
    meta?: TestDepGraphMeta;
    status?: ResolveAndTestFactsStatus;
    code?: number;
    error?: string;
    message?: string;
    userMessage?: string;
}
export declare function requestPollingToken(options: Options, isAsync: boolean, scanResult: ScanResult): Promise<ResolveAndTestFactsResponse>;
export declare function pollingWithTokenUntilDone(token: string, type: string, options: Options, pollInterval: number, attemptsCount: number, maxAttempts?: number): Promise<ResolveAndTestFactsResponse>;
export {};
