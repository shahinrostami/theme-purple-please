"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStandardData = void 0;
const version = require("../version");
const uuid_1 = require("uuid");
const os = require("os");
const osName = require('os-name');
const crypto = require("crypto");
const is_ci_1 = require("../is-ci");
const sources_1 = require("./sources");
const metrics_1 = require("../metrics");
const createDebug = require("debug");
const debug = createDebug('snyk');
const START_TIME = Date.now();
function getMetrics(durationMs) {
    try {
        const networkTime = metrics_1.MetricsCollector.NETWORK_TIME.getTotal();
        const cpuTime = durationMs - networkTime;
        metrics_1.MetricsCollector.CPU_TIME.createInstance().setValue(cpuTime);
        return metrics_1.MetricsCollector.getAllMetrics();
    }
    catch (err) {
        debug('Error with metrics', err);
    }
}
async function getStandardData(args) {
    const isStandalone = version.isStandaloneBuild();
    const snykVersion = await version.getVersion();
    const seed = uuid_1.v4();
    const shasum = crypto.createHash('sha1');
    const environment = isStandalone
        ? {}
        : {
            npmVersion: await sources_1.getCommandVersion('npm'),
        };
    const durationMs = Date.now() - START_TIME;
    const metrics = getMetrics(durationMs);
    const data = {
        os: osName(os.platform(), os.release()),
        version: snykVersion,
        nodeVersion: process.version,
        standalone: isStandalone,
        integrationName: sources_1.getIntegrationName(args),
        integrationVersion: sources_1.getIntegrationVersion(args),
        integrationEnvironment: sources_1.getIntegrationEnvironment(args),
        integrationEnvironmentVersion: sources_1.getIntegrationEnvironmentVersion(args),
        id: shasum.update(seed).digest('hex'),
        ci: is_ci_1.isCI(),
        environment,
        durationMs,
        metrics,
    };
    return data;
}
exports.getStandardData = getStandardData;
//# sourceMappingURL=getStandardData.js.map