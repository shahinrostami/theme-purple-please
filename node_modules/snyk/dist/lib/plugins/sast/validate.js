"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateCodeTest = void 0;
const config = require("../../config");
const errors_1 = require("../../errors");
async function validateCodeTest(options) {
    const org = options.org || config.org;
    // This is an unexpected path, code plugin executed for non-code command.
    if (!options.code) {
        throw new errors_1.FeatureNotSupportedForOrgError(org);
    }
    // TODO: We would need to remove this once we fix circular import issue
    const { getSastSettingsForOrg, trackUsage } = require('./checks');
    const { isFeatureFlagSupportedForOrg } = require('../../feature-flags');
    const [sastSettingsResponse, snykCodeEnabledResponse, snykCodeCliEnabledResponse,] = await Promise.all([
        getSastSettingsForOrg(org),
        isFeatureFlagSupportedForOrg('snykCode', org),
        isFeatureFlagSupportedForOrg('snykCodeCli', org),
    ]);
    const authError = [
        sastSettingsResponse,
        snykCodeEnabledResponse,
        snykCodeCliEnabledResponse,
    ].find((response) => response.code === 401 || response.code === 403);
    if (authError) {
        throw errors_1.AuthFailedError(authError.error, authError.code);
    }
    if (!snykCodeEnabledResponse.ok || !snykCodeCliEnabledResponse.ok) {
        throw new errors_1.FeatureNotSupportedForOrgError(org, 'Snyk Code');
    }
    if (!sastSettingsResponse.sastEnabled) {
        throw new errors_1.FeatureNotSupportedForOrgError(org, 'Snyk Code', 'enable in Settings > Snyk Code');
    }
    const trackUsageResponse = await trackUsage(org);
    if (trackUsageResponse.code === 429) {
        throw new errors_1.FailedToRunTestError(trackUsageResponse.userMessage, trackUsageResponse.code);
    }
}
exports.validateCodeTest = validateCodeTest;
//# sourceMappingURL=validate.js.map