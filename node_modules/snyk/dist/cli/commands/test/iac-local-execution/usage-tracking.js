"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TestLimitReachedError = exports.trackUsage = void 0;
const request_1 = require("../../../../lib/request");
const config = require("../../../../lib/config");
const api_token_1 = require("../../../../lib/api-token");
const errors_1 = require("../../../../lib/errors");
async function trackUsage(formattedResults) {
    const trackingData = formattedResults.map((res) => {
        return {
            isPrivate: res.meta.isPrivate,
            issuesPrevented: res.result.cloudConfigResults.length,
        };
    });
    const trackingResponse = await request_1.makeRequest({
        method: 'POST',
        headers: {
            Authorization: `token ${api_token_1.api()}`,
        },
        url: `${config.API}/track-iac-usage/cli`,
        body: { results: trackingData },
        gzip: true,
        json: true,
    });
    switch (trackingResponse.res.statusCode) {
        case 200:
            break;
        case 429:
            throw new TestLimitReachedError();
        default:
            throw new errors_1.CustomError('An error occurred while attempting to track test usage: ' +
                JSON.stringify(trackingResponse.res.body));
    }
}
exports.trackUsage = trackUsage;
class TestLimitReachedError extends errors_1.CustomError {
    constructor() {
        super('Test limit reached! You have exceeded your infrastructure as code test allocation for this billing period.');
    }
}
exports.TestLimitReachedError = TestLimitReachedError;
//# sourceMappingURL=usage-tracking.js.map