"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.checkRequiredFieldsMatch = exports.detectConfigType = exports.REQUIRED_CLOUDFORMATION_FIELDS = exports.REQUIRED_K8S_FIELDS = void 0;
const constants_1 = require("../../../../../lib/iac/constants");
const types_1 = require("../types");
exports.REQUIRED_K8S_FIELDS = ['apiVersion', 'kind', 'metadata'];
exports.REQUIRED_CLOUDFORMATION_FIELDS = ['Resources'];
function detectConfigType(fileData, parsedIacFiles) {
    return parsedIacFiles
        .map((parsedFile, docId) => {
        if (checkRequiredFieldsMatch(parsedFile, exports.REQUIRED_CLOUDFORMATION_FIELDS)) {
            return {
                ...fileData,
                jsonContent: parsedFile,
                projectType: constants_1.IacProjectType.CLOUDFORMATION,
                engineType: types_1.EngineType.CloudFormation,
                docId,
            };
        }
        else if (checkRequiredFieldsMatch(parsedFile, exports.REQUIRED_K8S_FIELDS)) {
            return {
                ...fileData,
                jsonContent: parsedFile,
                projectType: constants_1.IacProjectType.K8S,
                engineType: types_1.EngineType.Kubernetes,
                docId,
            };
        }
        else {
            return null;
        }
    })
        .filter((f) => !!f);
}
exports.detectConfigType = detectConfigType;
function checkRequiredFieldsMatch(parsedDocument, requiredFields) {
    if (!parsedDocument) {
        return false;
    }
    return requiredFields.every((requiredField) => parsedDocument.hasOwnProperty(requiredField));
}
exports.checkRequiredFieldsMatch = checkRequiredFieldsMatch;
//# sourceMappingURL=k8s-or-cloudformation-parser.js.map