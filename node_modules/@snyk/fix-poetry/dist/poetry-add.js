"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.poetryAdd = void 0;
const debugLib = require("debug");
const bottleneck_1 = require("bottleneck");
const child_process_1 = require("@snyk/child-process");
const debug = debugLib('snyk-fix:poetry');
const limiter = new bottleneck_1.default({
    maxConcurrent: 4,
});
async function runPoetryAdd(projectPath, dependencyUpdates, config) {
    const args = ['add', ...dependencyUpdates];
    let res;
    if (config.dev) {
        args.push('--dev');
    }
    if (config.python) {
        try {
            // tell poetry to use the given interpreter
            // https://python-poetry.org/docs/managing-environments/
            await child_process_1.execute('poetry', ['env', 'use', config.python], {
                cwd: projectPath,
            });
        }
        catch (e) {
            debug(`'poetry use env ${config.python}' failed with`, e);
        }
    }
    try {
        res = await child_process_1.execute('poetry', args, {
            cwd: projectPath,
        });
    }
    catch (e) {
        debug('Execute failed with', e);
        res = e;
    }
    if (config.python) {
        try {
            // set it back to system python
            await child_process_1.execute('poetry', ['env', 'use', 'system'], {
                cwd: projectPath,
            });
        }
        catch (e) {
            debug(`'poetry use env system' failed with`, e);
        }
    }
    return res;
}
exports.poetryAdd = limiter.wrap(runPoetryAdd);
//# sourceMappingURL=poetry-add.js.map