"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.execute = void 0;
const child_process_1 = require("child_process");
// Executes a subprocess.
// Resolves successfully on exit code 0 with all the info
// available
async function execute(command, args, options) {
    const spawnOptions = {
        shell: true,
        detached: true,
    };
    if (options && options.cwd) {
        spawnOptions.cwd = options.cwd;
    }
    const fullCommand = `${command} ${args.join(' ')}`;
    const startTime = Date.now();
    let processId;
    try {
        const worker = child_process_1.spawn(command, args, options);
        processId = worker.pid;
        return await new Promise((resolve, reject) => {
            let stderr = '';
            let stdout = '';
            worker.stdout.on('data', (data) => {
                stdout += data;
            });
            worker.stderr.on('data', (data) => {
                stderr += data;
            });
            worker.on('error', (e) => {
                reject({
                    stderr,
                    stdout,
                    error: e,
                    duration: Date.now() - startTime,
                    command: fullCommand,
                });
            });
            worker.on('exit', (code) => {
                if (code && code > 0) {
                    resolve({
                        stderr,
                        stdout,
                        duration: Date.now() - startTime,
                        command: fullCommand,
                        exitCode: code,
                    });
                }
                else {
                    resolve({
                        stderr,
                        stdout,
                        duration: Date.now() - startTime,
                        command: fullCommand,
                        exitCode: code,
                    });
                }
            });
        });
    }
    finally {
        if (processId) {
            // Additional anti-zombie protection.
            // Process here should be already stopped.
            try {
                process.kill(processId, 'SIGKILL');
            }
            catch (e) {
                // Process already stopped.
            }
        }
    }
}
exports.execute = execute;
//# sourceMappingURL=child-process.js.map