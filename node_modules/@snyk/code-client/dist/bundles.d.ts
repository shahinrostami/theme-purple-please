import { FileInfo, SupportedFiles } from './interfaces/files.interface';
import { AnalyzeFoldersOptions } from './files';
import { RemoteBundle, ConnectionOptions } from './http';
interface PrepareRemoteBundleOptions extends ConnectionOptions {
    files: FileInfo[];
    bundleHash?: string;
    removedFiles?: string[];
    maxPayload?: number;
}
interface UpdateRemoteBundleOptions extends ConnectionOptions {
    bundleHash: string;
    files: FileInfo[];
    maxPayload?: number;
}
/**
 * Splits files in buckets and upload in parallel
 * @param baseURL
 * @param sessionToken
 * @param remoteBundle
 */
export declare function uploadRemoteBundle({ maxPayload, ...options }: UpdateRemoteBundleOptions): Promise<boolean>;
interface RemoteBundleFactoryOptions extends PrepareRemoteBundleOptions {
    baseDir: string;
}
export declare function remoteBundleFactory(options: RemoteBundleFactoryOptions): Promise<RemoteBundle | null>;
interface CreateBundleFromFoldersOptions extends ConnectionOptions, AnalyzeFoldersOptions {
}
export interface FileBundle extends RemoteBundle {
    baseDir: string;
    supportedFiles: SupportedFiles;
    fileIgnores: string[];
}
/**
 * Creates a remote bundle and returns response from the bundle API
 *
 * @param {CreateBundleFromFoldersOptions} options
 * @returns {Promise<FileBundle | null>}
 */
export declare function createBundleFromFolders(options: CreateBundleFromFoldersOptions): Promise<FileBundle | null>;
export {};
