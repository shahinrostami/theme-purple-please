import { ErrorCodes, GenericErrorTypes } from './constants';
import { BundleFiles, SupportedFiles } from './interfaces/files.interface';
import { AnalysisResult } from './interfaces/analysis-result.interface';
declare type ResultSuccess<T> = {
    type: 'success';
    value: T;
};
declare type ResultError<E> = {
    type: 'error';
    error: {
        statusCode: E;
        statusText: string;
        apiName: string;
    };
};
export declare type Result<T, E> = ResultSuccess<T> | ResultError<E>;
export interface ConnectionOptions {
    baseURL: string;
    sessionToken: string;
    source: string;
}
export declare function determineErrorCode(error: any): ErrorCodes;
declare type StartSessionResponseDto = {
    readonly draftToken: string;
    readonly loginURL: string;
};
interface StartSessionOptions {
    readonly authHost: string;
    readonly source: string;
}
export declare function startSession(options: StartSessionOptions): StartSessionResponseDto;
export declare type IpFamily = 6 | undefined;
/**
 * Dispatches a FORCED IPv6 request to test client's ISP and network capability.
 *
 * @return {number} IP family number used by the client.
 */
export declare function getIpFamily(authHost: string): Promise<IpFamily>;
declare type CheckSessionErrorCodes = GenericErrorTypes | ErrorCodes.unauthorizedUser | ErrorCodes.loginInProgress;
interface CheckSessionOptions {
    readonly authHost: string;
    readonly draftToken: string;
    readonly ipFamily?: IpFamily;
}
export declare function checkSession(options: CheckSessionOptions): Promise<Result<string, CheckSessionErrorCodes>>;
export declare function getFilters(baseURL: string, source: string): Promise<Result<SupportedFiles, GenericErrorTypes>>;
export declare type RemoteBundle = {
    readonly bundleHash: string;
    readonly missingFiles: string[];
};
export declare type CreateBundleErrorCodes = GenericErrorTypes | ErrorCodes.unauthorizedUser | ErrorCodes.unauthorizedBundleAccess | ErrorCodes.bigPayload | ErrorCodes.badRequest | ErrorCodes.notFound;
interface CreateBundleOptions extends ConnectionOptions {
    files: BundleFiles;
}
export declare function createBundle(options: CreateBundleOptions): Promise<Result<RemoteBundle, CreateBundleErrorCodes>>;
export declare type CheckBundleErrorCodes = GenericErrorTypes | ErrorCodes.unauthorizedUser | ErrorCodes.unauthorizedBundleAccess | ErrorCodes.notFound;
interface CheckBundleOptions extends ConnectionOptions {
    bundleHash: string;
}
export declare function checkBundle(options: CheckBundleOptions): Promise<Result<RemoteBundle, CheckBundleErrorCodes>>;
export declare type ExtendBundleErrorCodes = GenericErrorTypes | ErrorCodes.unauthorizedUser | ErrorCodes.badRequest | ErrorCodes.unauthorizedBundleAccess | ErrorCodes.bigPayload | ErrorCodes.notFound;
interface ExtendBundleOptions extends ConnectionOptions {
    readonly bundleHash: string;
    readonly files: BundleFiles;
    readonly removedFiles?: string[];
}
export declare function extendBundle(options: ExtendBundleOptions): Promise<Result<RemoteBundle, ExtendBundleErrorCodes>>;
export declare enum AnalysisStatus {
    waiting = "WAITING",
    fetching = "FETCHING",
    analyzing = "ANALYZING",
    done = "DONE",
    failed = "FAILED",
    complete = "COMPLETE"
}
export declare type AnalysisResponseProgress = {
    readonly status: AnalysisStatus.waiting | AnalysisStatus.fetching | AnalysisStatus.analyzing | AnalysisStatus.done;
    readonly progress: number;
};
export declare type AnalysisFailedResponse = {
    readonly status: AnalysisStatus.failed;
};
export declare type GetAnalysisResponseDto = AnalysisResult | AnalysisFailedResponse | AnalysisResponseProgress;
export declare type GetAnalysisErrorCodes = GenericErrorTypes | ErrorCodes.unauthorizedUser | ErrorCodes.unauthorizedBundleAccess | ErrorCodes.badRequest | ErrorCodes.notFound;
export interface AnalysisOptions {
    readonly severity?: number;
    readonly limitToFiles?: string[];
    readonly prioritized?: boolean;
}
export interface GetAnalysisOptions extends ConnectionOptions, AnalysisOptions {
    bundleHash: string;
}
export declare function getAnalysis(options: GetAnalysisOptions): Promise<Result<GetAnalysisResponseDto, GetAnalysisErrorCodes>>;
export {};
