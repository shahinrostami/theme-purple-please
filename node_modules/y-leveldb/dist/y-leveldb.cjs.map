{"version":3,"file":"y-leveldb.cjs","sources":["../src/y-leveldb.js"],"sourcesContent":["import * as Y from 'yjs'\nimport * as encoding from 'lib0/encoding.js'\nimport * as decoding from 'lib0/decoding.js'\nimport * as binary from 'lib0/binary.js'\nimport * as promise from 'lib0/promise.js'\nimport * as buffer from 'lib0/buffer.js'\n// @ts-ignore\nimport defaultLevel from 'level'\nimport { Buffer } from 'buffer'\n\nexport const PREFERRED_TRIM_SIZE = 500\n\nconst YEncodingString = 0\nconst YEncodingUint32 = 1\n\nconst valueEncoding = {\n  buffer: true,\n  type: 'y-value',\n  encode: /** @param {any} data */ data => data,\n  decode: /** @param {any} data */ data => data\n}\n\n/**\n * Write two bytes as an unsigned integer in big endian order.\n * (most significant byte first)\n *\n * @function\n * @param {encoding.Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nexport const writeUint32BigEndian = (encoder, num) => {\n  for (let i = 3; i >= 0; i--) {\n    encoding.write(encoder, (num >>> (8 * i)) & binary.BITS8)\n  }\n}\n\n/**\n * Read 4 bytes as unsigned integer in big endian order.\n * (most significant byte first)\n *\n * @todo use lib0/decoding instead\n *\n * @function\n * @param {decoding.Decoder} decoder\n * @return {number} An unsigned integer.\n */\nexport const readUint32BigEndian = decoder => {\n  const uint =\n    (decoder.arr[decoder.pos + 3] +\n    (decoder.arr[decoder.pos + 2] << 8) +\n    (decoder.arr[decoder.pos + 1] << 16) +\n    (decoder.arr[decoder.pos] << 24)) >>> 0\n  decoder.pos += 4\n  return uint\n}\n\nexport const keyEncoding = {\n  buffer: true,\n  type: 'y-keys',\n  /* istanbul ignore next */\n  encode: /** @param {Array<string|number>} arr */  arr => {\n    const encoder = encoding.createEncoder()\n    for (let i = 0; i < arr.length; i++) {\n      const v = arr[i]\n      if (typeof v === 'string') {\n        encoding.writeUint8(encoder, YEncodingString)\n        encoding.writeVarString(encoder, v)\n      } else /* istanbul ignore else */ if (typeof v === 'number') {\n        encoding.writeUint8(encoder, YEncodingUint32)\n        writeUint32BigEndian(encoder, v)\n      } else {\n        throw new Error('Unexpected key value')\n      }\n    }\n    return Buffer.from(encoding.toUint8Array(encoder))\n  },\n  decode: /** @param {Uint8Array} buf */ buf => {\n    const decoder = decoding.createDecoder(buf)\n    const key = []\n    while (decoding.hasContent(decoder)) {\n      switch (decoding.readUint8(decoder)) {\n        case YEncodingString:\n          key.push(decoding.readVarString(decoder))\n          break\n        case YEncodingUint32:\n          key.push(readUint32BigEndian(decoder))\n          break\n      }\n    }\n    return key\n  }\n}\n\n/**\n * level returns an error if a value is not found.\n *\n * This helper method for level returns `null` instead if the key is not found.\n *\n * @param {any} db\n * @param {any} key\n */\nconst levelGet = async (db, key) => {\n  let res\n  try {\n    res = await db.get(key)\n  } catch (err) {\n    /* istanbul ignore else */\n    if (err.notFound) {\n      return null\n    } else {\n      throw err\n    }\n  }\n  return res\n}\n\n/**\n * Level expects a Buffer, but in Yjs we typically work with Uint8Arrays.\n *\n * Since Level thinks that these are two entirely different things,\n * we transform the Uint8array to a Buffer before storing it.\n *\n * @param {any} db\n * @param {any} key\n * @param {Uint8Array} val\n */\nconst levelPut = async (db, key, val) => db.put(key, Buffer.from(val))\n\n/**\n * A \"bulkier\" implementation of level streams. Returns the result in one flush.\n *\n * @param {any} db\n * @param {object} opts\n * @return {Promise<Array<any>>}\n */\nexport const getLevelBulkData = (db, opts) => promise.create((resolve, reject) => {\n  /**\n   * @type {Array<any>} result\n   */\n  const result = []\n  db.createReadStream(\n    opts\n  ).on('data', /** @param {any} data */ data =>\n    result.push(data)\n  ).on('end', () =>\n    resolve(result)\n  ).on('error', reject)\n})\n\n/**\n * Get all document updates for a specific document.\n *\n * @param {any} db\n * @param {string} docName\n * @param {any} [opts]\n * @return {Promise<Array<Buffer>>}\n */\nexport const getLevelUpdates = (db, docName, opts = { values: true, keys: false }) => getLevelBulkData(db, {\n  gte: createDocumentUpdateKey(docName, 0),\n  lt: createDocumentUpdateKey(docName, binary.BITS32),\n  ...opts\n})\n\n/**\n * Get all document updates for a specific document.\n *\n * @param {any} db\n * @param {boolean} values\n * @param {boolean} keys\n * @return {Promise<Array<any>>}\n */\nexport const getAllDocs = (db, values, keys) => getLevelBulkData(db, {\n  gte: ['v1_sv'],\n  lt: ['v1_sw'],\n  keys,\n  values\n})\n\n/**\n * @param {any} db\n * @param {string} docName\n * @return {Promise<number>} Returns -1 if this document doesn't exist yet\n */\nexport const getCurrentUpdateClock = (db, docName) => getLevelUpdates(db, docName, { keys: true, values: false, reverse: true, limit: 1 }).then(keys => {\n  if (keys.length === 0) {\n    return -1\n  } else {\n    return keys[0][3]\n  }\n})\n\n/**\n * @param {any} db\n * @param {Array<string|number>} gte Greater than or equal\n * @param {Array<string|number>} lt lower than (not equal)\n * @return {Promise<void>}\n */\nconst clearRange = async (db, gte, lt) => {\n  /* istanbul ignore else */\n  if (db.supports.clear) {\n    await db.clear({ gte, lt })\n  } else {\n    const keys = await getLevelBulkData(db, { values: false, keys: true, gte, lt })\n    const ops = keys.map(key => ({ type: 'del', key }))\n    await db.batch(ops)\n  }\n}\n\n/**\n * @param {any} db\n * @param {string} docName\n * @param {number} from Greater than or equal\n * @param {number} to lower than (not equal)\n * @return {Promise<void>}\n */\nconst clearUpdatesRange = async (db, docName, from, to) => clearRange(db, createDocumentUpdateKey(docName, from), createDocumentUpdateKey(docName, to))\n\n/**\n * Create a unique key for a update message.\n * We encode the result using `keyEncoding` which expects an array.\n *\n * @param {string} docName\n * @param {number} clock must be unique\n * @return {Array<string|number>}\n */\nconst createDocumentUpdateKey = (docName, clock) => ['v1', docName, 'update', clock]\n\n/**\n * @param {string} docName\n * @param {string} metaKey\n */\nconst createDocumentMetaKey = (docName, metaKey) => ['v1', docName, 'meta', metaKey]\n\n/**\n * @param {string} docName\n */\nconst createDocumentMetaEndKey = (docName) => ['v1', docName, 'metb'] // simple trick\n\n/**\n * We have a separate state vector key so we can iterate efficiently over all documents\n * @param {string} docName\n */\nconst createDocumentStateVectorKey = (docName) => ['v1_sv', docName]\n\n/**\n * @param {string} docName\n */\nconst createDocumentFirstKey = (docName) => ['v1', docName]\n\n/**\n * We use this key as the upper limit of all keys that can be written.\n * Make sure that all document keys are smaller! Strings are encoded using varLength string encoding,\n * so we need to make sure that this key has the biggest size!\n *\n * @param {string} docName\n */\nconst createDocumentLastKey = (docName) => ['v1', docName, 'zzzzzzz']\n\n// const emptyStateVector = (() => Y.encodeStateVector(new Y.Doc()))()\n\n/**\n * For now this is a helper method that creates a Y.Doc and then re-encodes a document update.\n * In the future this will be handled by Yjs without creating a Y.Doc (constant memory consumption).\n *\n * @param {Array<Uint8Array>} updates\n * @return {{update:Uint8Array, sv: Uint8Array}}\n */\nconst mergeUpdates = (updates) => {\n  const ydoc = new Y.Doc()\n  ydoc.transact(() => {\n    for (let i = 0; i < updates.length; i++) {\n      Y.applyUpdate(ydoc, updates[i])\n    }\n  })\n  return { update: Y.encodeStateAsUpdate(ydoc), sv: Y.encodeStateVector(ydoc) }\n}\n\n/**\n * @param {any} db\n * @param {string} docName\n * @param {Uint8Array} sv state vector\n * @param {number} clock current clock of the document so we can determine when this statevector was created\n */\nconst writeStateVector = async (db, docName, sv, clock) => {\n  const encoder = encoding.createEncoder()\n  encoding.writeVarUint(encoder, clock)\n  encoding.writeVarUint8Array(encoder, sv)\n  await levelPut(db, createDocumentStateVectorKey(docName), encoding.toUint8Array(encoder))\n}\n\n/**\n * @param {Uint8Array} buf\n * @return {{ sv: Uint8Array, clock: number }}\n */\nconst decodeLeveldbStateVector = buf => {\n  const decoder = decoding.createDecoder(buf)\n  const clock = decoding.readVarUint(decoder)\n  const sv = decoding.readVarUint8Array(decoder)\n  return { sv, clock }\n}\n\n/**\n * @param {any} db\n * @param {string} docName\n */\nconst readStateVector = async (db, docName) => {\n  const buf = await levelGet(db, createDocumentStateVectorKey(docName))\n  if (buf === null) {\n    // no state vector created yet or no document exists\n    return { sv: null, clock: -1 }\n  }\n  return decodeLeveldbStateVector(buf)\n}\n\n/**\n * @param {any} db\n * @param {string} docName\n * @param {Uint8Array} stateAsUpdate\n * @param {Uint8Array} stateVector\n * @return {Promise<number>} returns the clock of the flushed doc\n */\nconst flushDocument = async (db, docName, stateAsUpdate, stateVector) => {\n  const clock = await storeUpdate(db, docName, stateAsUpdate)\n  await writeStateVector(db, docName, stateVector, clock)\n  await clearUpdatesRange(db, docName, 0, clock) // intentionally not waiting for the promise to resolve!\n  return clock\n}\n\n/**\n * @param {any} db\n * @param {string} docName\n * @param {Uint8Array} update\n * @return {Promise<number>} Returns the clock of the stored update\n */\nconst storeUpdate = async (db, docName, update) => {\n  const clock = await getCurrentUpdateClock(db, docName)\n  if (clock === -1) {\n    // make sure that a state vector is aways written, so we can search for available documents\n    const ydoc = new Y.Doc()\n    Y.applyUpdate(ydoc, update)\n    const sv = Y.encodeStateVector(ydoc)\n    await writeStateVector(db, docName, sv, 0)\n  }\n  await levelPut(db, createDocumentUpdateKey(docName, clock + 1), update)\n  return clock + 1\n}\n\nexport class LeveldbPersistence {\n  /**\n   * @param {string} location\n   * @param {object} [opts]\n   * @param {any} [opts.level] Level-compatible adapter. E.g. leveldown, level-rem, level-indexeddb. Defaults to `level`\n   * @param {object} [opts.levelOptions] Options that are passed down to the level instance\n   */\n  constructor (location, /* istanbul ignore next */ { level = defaultLevel, levelOptions = {} } = {}) {\n    const db = level(location, { ...levelOptions, valueEncoding, keyEncoding })\n    this.tr = promise.resolve()\n    /**\n     * Execute an transaction on a database. This will ensure that other processes are currently not writing.\n     *\n     * This is a private method and might change in the future.\n     *\n     * @todo only transact on the same room-name. Allow for concurrency of different rooms.\n     *\n     * @template T\n     *\n     * @param {function(any):Promise<T>} f A transaction that receives the db object\n     * @return {Promise<T>}\n     */\n    this._transact = f => {\n      const currTr = this.tr\n      this.tr = (async () => {\n        await currTr\n        let res = /** @type {any} */ (null)\n        try {\n          res = await f(db)\n        } catch (err) {\n          /* istanbul ignore next */\n          console.warn('Error during y-leveldb transaction', err)\n        }\n        return res\n      })()\n      return this.tr\n    }\n  }\n\n  /**\n   * @param {string} docName\n   */\n  flushDocument (docName) {\n    return this._transact(async db => {\n      const updates = await getLevelUpdates(db, docName)\n      const { update, sv } = mergeUpdates(updates)\n      await flushDocument(db, docName, update, sv)\n    })\n  }\n\n  /**\n   * @param {string} docName\n   * @return {Promise<Y.Doc>}\n   */\n  getYDoc (docName) {\n    return this._transact(async db => {\n      const updates = await getLevelUpdates(db, docName)\n      const ydoc = new Y.Doc()\n      ydoc.transact(() => {\n        for (let i = 0; i < updates.length; i++) {\n          Y.applyUpdate(ydoc, updates[i])\n        }\n      })\n      if (updates.length > PREFERRED_TRIM_SIZE) {\n        await flushDocument(db, docName, Y.encodeStateAsUpdate(ydoc), Y.encodeStateVector(ydoc))\n      }\n      return ydoc\n    })\n  }\n\n  /**\n   * @param {string} docName\n   * @return {Promise<Uint8Array>}\n   */\n  getStateVector (docName) {\n    return this._transact(async db => {\n      const { clock, sv } = await readStateVector(db, docName)\n      let curClock = -1\n      if (sv !== null) {\n        curClock = await getCurrentUpdateClock(db, docName)\n      }\n      if (sv !== null && clock === curClock) {\n        return sv\n      } else {\n        // current state vector is outdated\n        const updates = await getLevelUpdates(db, docName)\n        const { update, sv } = mergeUpdates(updates)\n        await flushDocument(db, docName, update, sv)\n        return sv\n      }\n    })\n  }\n\n  /**\n   * @param {string} docName\n   * @param {Uint8Array} update\n   * @return {Promise<number>} Returns the clock of the stored update\n   */\n  storeUpdate (docName, update) {\n    return this._transact(db => storeUpdate(db, docName, update))\n  }\n\n  /**\n   * @param {string} docName\n   * @param {Uint8Array} stateVector\n   */\n  async getDiff (docName, stateVector) {\n    const ydoc = await this.getYDoc(docName)\n    return Y.encodeStateAsUpdate(ydoc, stateVector)\n  }\n\n  /**\n   * @param {string} docName\n   * @return {Promise<void>}\n   */\n  clearDocument (docName) {\n    return this._transact(async db => {\n      await db.del(createDocumentStateVectorKey(docName))\n      await clearRange(db, createDocumentFirstKey(docName), createDocumentLastKey(docName))\n    })\n  }\n\n  /**\n   * @param {string} docName\n   * @param {string} metaKey\n   * @param {any} value\n   * @return {Promise<void>}\n   */\n  setMeta (docName, metaKey, value) {\n    return this._transact(db => levelPut(db, createDocumentMetaKey(docName, metaKey), buffer.encodeAny(value)))\n  }\n\n  /**\n   * @param {string} docName\n   * @param {string} metaKey\n   * @return {Promise<any>}\n   */\n  delMeta (docName, metaKey) {\n    return this._transact(db => db.del(createDocumentMetaKey(docName, metaKey)))\n  }\n\n  /**\n   * @param {string} docName\n   * @param {string} metaKey\n   * @return {Promise<any>}\n   */\n  getMeta (docName, metaKey) {\n    return this._transact(async db => {\n      const res = await levelGet(db, createDocumentMetaKey(docName, metaKey))\n      if (res === null) {\n        return// return void\n      }\n      return buffer.decodeAny(res)\n    })\n  }\n\n  /**\n   * @return {Promise<Array<string>>}\n   */\n  getAllDocNames () {\n    return this._transact(async db => {\n      const docKeys = await getAllDocs(db, false, true)\n      return docKeys.map(key => key[1])\n    })\n  }\n\n  /**\n   * @return {Promise<Array<{ name: string, sv: Uint8Array, clock: number }>>}\n   */\n  getAllDocStateVecors () {\n    return this._transact(async db => {\n      const docs = /** @type {any} */ (await getAllDocs(db, true, true))\n      return docs.map(doc => {\n        const { sv, clock } = decodeLeveldbStateVector(doc.value)\n        return { name: doc.key[1], sv, clock }\n      })\n    })\n  }\n\n  /**\n   * @param {string} docName\n   * @return {Promise<Map<string, any>>}\n   */\n  getMetas (docName) {\n    return this._transact(async db => {\n      const data = await getLevelBulkData(db, {\n        gte: createDocumentMetaKey(docName, ''),\n        lt: createDocumentMetaEndKey(docName),\n        keys: true,\n        values: true\n      })\n      const metas = new Map()\n      data.forEach(v => { metas.set(v.key[3], buffer.decodeAny(v.value)) })\n      return metas\n    })\n  }\n\n  /**\n   * Close connection to a leveldb database and discard all state and bindings\n   *\n   * @return {Promise<void>}\n   */\n  destroy () {\n    return this._transact(db => db.close())\n  }\n\n  /**\n   * Delete all data in database.\n   */\n  clearAll () {\n    return this._transact(async db => db.clear())\n  }\n}\n"],"names":["encoding.write","binary.BITS8","encoding.createEncoder","encoding.writeUint8","encoding.writeVarString","Buffer","encoding.toUint8Array","decoding.createDecoder","decoding.hasContent","decoding.readUint8","decoding.readVarString","promise.create","binary.BITS32","Y.Doc","Y.applyUpdate","Y.encodeStateAsUpdate","Y.encodeStateVector","encoding.writeVarUint","encoding.writeVarUint8Array","decoding.readVarUint","decoding.readVarUint8Array","promise.resolve","buffer.encodeAny","buffer.decodeAny"],"mappings":"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"}