{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../src/boxengine.ts","../src/widget.ts","../src/layout.ts","../src/title.ts","../src/utils.ts","../src/panellayout.ts","../src/splitlayout.ts","../src/accordionlayout.ts","../src/panel.ts","../src/splitpanel.ts","../src/accordionpanel.ts","../src/boxlayout.ts","../src/boxpanel.ts","../src/commandpalette.ts","../src/menu.ts","../src/contextmenu.ts","../src/tabbar.ts","../src/docklayout.ts","../src/dockpanel.ts","../src/gridlayout.ts","../src/menubar.ts","../src/focustracker.ts","../src/scrollbar.ts","../src/stackedpanel.ts","../src/singletonlayout.ts","../src/stackedlayout.ts","../src/tabpanel.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","BoxEngine","sizeHint","minSize","maxSize","Infinity","stretch","size","done","calc","sizers","space","count","totalMin","totalMax","totalSize","totalStretch","stretchCount","min","sizer","max","hint","Math","notDoneCount","freeSpace","distSpace","distStretch","amt","adjust","index","delta","growLimit","shrinkLimit","grow","limit","shrink","growSizer","shrinkSizer","Private","Layout","Title","options","_label","_caption","_mnemonic","_iconClass","_iconLabel","_className","_closable","_changed","Signal","owner","undefined","label","mnemonic","icon","_icon","iconClass","iconLabel","iconRenderer","caption","className","closable","_dataset","dataset","defineProperty","value","emit","Widget","_flags","_layout","_parent","_disposed","node","createNode","addClass","dispose","isDisposed","setFlag","Flag","IsDisposed","parent","isAttached","detach","clearData","MessageLoop","AttachedProperty","testFlag","IsAttached","IsHidden","IsVisible","titleProperty","get","id","contains","Error","msg","ChildMessage","sendMessage","Msg","ParentChanged","DisallowLayout","children","iter","empty","widget","hasClass","name","classList","add","removeClass","remove","toggleClass","force","toggle","update","postMessage","UpdateRequest","fit","FitRequest","activate","ActivateRequest","close","CloseRequest","show","isVisible","BeforeShow","clearFlag","AfterShow","hide","BeforeHide","AfterHide","setHidden","hidden","flag","processMessage","type","notifyLayout","onResize","onUpdateRequest","onFitRequest","onBeforeShow","onAfterShow","onBeforeHide","onAfterHide","onBeforeAttach","isHidden","onAfterAttach","onBeforeDetach","onAfterDetach","onActivateRequest","onCloseRequest","onChildAdded","onChildRemoved","processParentMessage","Message","BeforeAttach","AfterAttach","BeforeDetach","AfterDetach","ConflatableMessage","_super","child","_this","ResizeMessage","width","height","UnknownSize","attach","host","ref","document","body","insertBefore","parentNode","removeChild","createElement","tag","_fitPolicy","fitPolicy","layout","init","style","minWidth","minHeight","maxWidth","maxHeight","onChildShown","onChildHidden","each","removeWidget","getHorizontalAlignment","horizontalAlignmentProperty","setHorizontalAlignment","set","getVerticalAlignment","verticalAlignmentProperty","setVerticalAlignment","LayoutItem","_top","NaN","_left","_width","_height","_minWidth","_minHeight","_maxWidth","_maxHeight","position","top","left","limits","ElementExt","sizeLimits","clampW","clampH","resized","onAlignmentChanged","changed","Utils","PanelLayout","_widgets","pop","addWidget","insertWidget","indexOf","j","ArrayExt","insert","attachWidget","move","moveWidget","removeWidgetAt","removeAt","detachWidget","fromIndex","toIndex","clampDimension","floor","SplitLayout","Utils$1","widgetOffset","_fixed","_spacing","_dirty","_hasNormedSizes","_sizers","_items","_handles","_box","_alignment","_orientation","renderer","orientation","alignment","spacing","item","relativeSizes","normalize","map","setRelativeSizes","sizes","temp","slice","push","normed","moveHandle","handle","offsetLeft","offsetTop","_i","_a","createHandle","average","averageSize","createSizer","appendChild","_update","_fit","updateItemPosition","isHorizontal","handleStyle","nVisible","lastHandleIndex","horz","minW","minH","getStretch","box","boxSizing","horizontalSum","verticalSum","offsetWidth","offsetHeight","paddingTop","paddingLeft","extra","offset","fullOffset","stretchProperty","setStretch","coerce","BoxSizer","reduce","v","values","sum","a","abs","AccordionLayout","_titles","titleSpace","title","createTitle","setAttribute","titleStyle","data","createSectionTitle","SplitPanel","Renderer","BoxLayout","BoxPanel","Panel","createLayout","widgets","_pressData","_releaseMouse","handles","handleEvent","event","_evtMouseDown","_evtMouseMove","_evtMouseUp","_evtKeyDown","preventDefault","stopPropagation","addEventListener","removeEventListener","keyCode","button","findFirstIndex","target","rect","getBoundingClientRect","clientX","clientY","window","getComputedStyle","override","Drag","overrideCursor","cursor","pos","defaultRenderer","AccordionPanel","titles","_evtClick","_eventKeyDown","defaultPrevented","handled","toString","key","match","click","direction","length_1","newIndex","focus","titleClassName","_titleID","_titleKeys","WeakMap","createCollapseIcon","aData","createTitleKey","textContent","_direction","getSizeBasis","sizeBasisProperty","setSizeBasis","onChildSizingChanged","dir","clampSpacing","CommandPalette","_activeIndex","_results","commands","commandChanged","connect","_onGenericChange","keyBindingChanged","getElementsByClassName","addItem","createItem","refresh","addItems","items","newItems","forEach","removeItem","removeItemAt","clearItems","inputNode","display","_toggleFocused","input","select","query","contentNode","results","search","canActivate","content_1","renderEmptyMessage","VirtualDOM","render","activeIndex","content","result","indices","category","renderHeader","active","renderItem","scrollTop","element","scrollIntoViewIfNeeded","_execute","altKey","ctrlKey","metaKey","shiftKey","_activatePreviousItem","_activateNextItem","ai","start","stop","findLastIndex","part","toLowerCase","isEnabled","execute","command","args","focused","activeElement","formatHeader","h","li","createItemClass","createItemDataset","isToggleable","role","aria-checked","isToggled","renderItemIcon","renderItemContent","renderItemShortcut","formatEmptyMessage","createIconClass","div","renderItemLabel","renderItemCaption","formatItemLabel","formatItemCaption","formatItemShortcut","StringExt","highlight","mark","kb","keyBinding","keys","CommandRegistry","formatKeystroke","join","fuzzySearch","source","score","rgx","rgxMatch","exec","matchSumOfDeltas","pivot","lowerBound","categoryIndices","labelIndices","matchType","scoreCmp","m1","d1","i1","i2","d2","localeCompare","r1","rank","r2","wrapper","clear","spellcheck","CommandItem","scores","text","replace","matchItems","sort","visited","fill","_b","item_1","createResults","_commands","trim","JSONExt","emptyObject","findLastValue","keyBindings","deepEqual","Menu","_childIndex","_openTimerID","_closeTimerID","_childMenu","_parentMenu","_aboutToClose","_menuRequested","menu","childNodes","activateNextItem","activatePreviousItem","triggerActiveItem","activeItem","_cancelOpenTimer","_cancelCloseTimer","rootMenu","console","log","_openChildMenu","insertItem","open","x","y","forceX","forceY","openRootMenu","_evtMouseEnter","_evtMouseLeave","collapsedFlags","computeCollapsed","collapsed","onfocus","childMenu","parentMenu","kc","getKeyboardLayout","keyForKeydownEvent","findMnemonic","multiple","auto","hitTest","_startCloseTimer","submenu","_startOpenTimer","hitTestMenus","activateFirst","_closeChildMenu","itemNode","openSubmenu","setTimeout","TIMER_DELAY","clearTimeout","aria","createItemARIA","tabindex","renderIcon","renderLabel","renderShortcut","renderSubmenu","formatLabel","formatShortcut","prefix","suffix","char","span","SUBMENU_OVERLAP","tabIndex","MenuItem","k1","k2","px","pageXOffset","py","pageYOffset","cw","documentElement","clientWidth","ch","clientHeight","visibility","itemRect","right","borderTop","bottom","borderBottom","paddingBottom","upperKey","toUpperCase","k","mn","command_1","args_1","ContextMenu","_groupByTarget","_idTick","_sortBySelector","groupByTarget","sortBySelector","others","e","getOwnPropertySymbols","propertyIsEnumerable","__rest","DisposableDelegate","removeFirstOf","itemCmpRank","itemCmp","s1","Selector","calculateSpecificity","selector","s2","isValid","validateSelector","currentTarget","elementFromPoint","availableItems","matches","parentElement","TabBar","_currentIndex","_titlesEditable","_previousTitle","_dragData","_addButtonEnabled","_tabMoved","_currentChanged","_addRequested","_tabCloseRequested","_tabDetachRequested","_tabActivateRequested","tabsMovable","titlesEditable","allowDeselect","addButtonEnabled","insertBehavior","removeBehavior","currentIndex","pi","pt","ci","ct","previousIndex","previousTitle","currentTitle","_name","removeAttribute","addButtonNode","addTab","insertTab","asTitle","_onTitleChanged","_adjustCurrentForInsert","_adjustCurrentForMove","removeTab","removeTabAt","disconnect","_adjustCurrentForRemove","clearTabs","releaseMouse","_evtDblClick","current","zIndex","renderTab","tabs","tab","querySelector","oldValue_1","innerHTML","input_1","onblur_1","addButtonClicked","pressX","pressY","tabPos","tabSize","tabPressPos","targetIndex","tabLayout","contentRect","dragActive","dragAborted","detachRequested","closeIconSelector","dragExceeded","tabRect","snapTabLayout","detachExceeded","layoutTabs","finalizeTabPosition","duration","parseTransitionDuration","resetTabPositions","bh","sender","_tabID","_tabKeys","createTabKey","createTabStyle","createTabClass","createTabDataset","createTabARIA","renderCloseIcon","aria-selected","addButtonSelector","DRAG_THRESHOLD","DETACH_THRESHOLD","parseFloat","transitionDuration","margin","marginLeft","marginTop","dx","dy","pressPos","localPos","clientPos","clientSize","targetPos","targetEnd","pxPos","threshold","ideal","tgt","final","DockLayout","_root","Map","iterAllWidgets","iterUserWidgets","selectedWidgets","iterSelectedWidgets","tabBars","iterTabBars","iterHandles","offsetX","offsetY","findSplitNode","holdSizes","saveLayout","holdAllSizes","main","createConfig","restoreLayout","config","mainConfig","widgetSet","Set","normalizeAreaConfig","oldWidgets","oldTabBars","oldHandles","has","tabBar","realizeAreaConfig","createTabBar","_createTabBar","_createHandle","mode","refNode","findTabNode","_insertTab","_insertSplit","_removeWidget","hitTestTabAreas","borderLeft","tabNode","hitTestTabNodes","borderWidth","borderRight","borderHeight","delete","removeAria","splitNode","syncHandles","maybeParent","childNode","childHandle","TabLayoutNode","splitHandle","i_1","gChild","gHandle","gSizer","after","addAria","findFirstTabNode","root","_splitRoot","i_2","normalizeSizes","GOLDEN_RATIO","i_3","j_1","SplitLayoutNode","normalized","oldRoot","newRoot","normalizeTabAreaConfig","normalizeSplitAreaConfig","realizeTabAreaConfig","realizeSplitAreaConfig","tabSizer","widgetSizer","chain","once","tabBarItem","widgetItem","tabBarSizer","ChainIterator","createNormalizedSizes","horizontal","fixed","tabId","DockPanel","_drag","_tabsMovable","_tabsConstrained","_layoutModified","_mode","_renderer","_edges","edges","DEFAULT_EDGES","tabsConstrained","overlay","Overlay","createSingleDocumentConfig","LayoutModified","tabbar","isEmpty","selectWidget","find","bar","activateWidget","Platform","IS_EDGE","IS_IE","flush","_evtDragEnter","_evtDragLeave","_evtDragOver","_evtDrop","isGeneratedTabBarProperty","mimeData","hasData","_showOverlay","dropAction","proposedAction","Private$e","findDropTarget","zone","factory","getData","getDropRef","deltaX","deltaY","xPos","yPos","paddingRight","tabHeight","tabMoved","_onTabMoved","currentChanged","_onCurrentChanged","tabCloseRequested","_onTabCloseRequested","tabDetachRequested","_onTabDetachRequested","tabActivateRequested","_onTabActivateRequested","addRequested","_onTabAddRequested","MimeData","setData","dragImage","cloneNode","supportedActions","then","_timer","_hidden","geo","delay","panel","toArray","selected","next","panelRect","pl","pr","pb","al","at","ar","ab","rx","round","ry","GridLayout","FocusTracker","_counter","_activeWidget","_currentWidget","_numbers","_nodes","_activeChanged","w","focusNumber","disposed","_onWidgetDisposed","_setWidgets","valid","filter","previous","first","second","_evtFocus","_evtBlur","oldCurrent","oldActive","oldValue","newValue","focusTarget","relatedTarget","_rowSpacing","_columnSpacing","_rowStarts","_columnStarts","_rowSizers","_columnSizers","rowCount","reallocSizers","columnCount","rowSpacing","clampValue","columnSpacing","rowStretch","setRowStretch","columnStretch","setColumnStretch","it","maxRow","maxCol","rowSpanCmp","getCellConfig","row","rowSpan","distributeMin","columnSpanCmp","c1","column","c2","columnSpan","fixedRowSpace","fixedColSpace","cellConfigProperty","setCellConfig","normalizeConfig","portion","MenuBar","_menus","_forceItemsPosition","forceItemsPosition","openActiveMenu","addMenu","insertMenu","aboutToClose","_onMenuAboutToClose","menuRequested","_onMenuMenuRequested","removeMenu","removeMenuAt","clearMenus","menus","blur","stopImmediatePropagation","newMenu","activeMenu","oldMenu","aria-haspopup","ScrollBar","_onRepeat","_repeatTimer","mouseX","mouseY","trackNode","thumbNode","thumbRect","_pageRequested","incrementNode","_stepRequested","decrementNode","_value","_page","_maximum","_thumbMoved","maximum","page","thumbStyle","transform","_moveThumb","findPart","trackPos","trackSpan","trackRect","decrement","increment","track","thumb","scrollBar","SingletonLayout","_widget","StackedLayout","StackedPanel","_widgetRemoved","TabPanel","stackedPanel","widgetRemoved","_onWidgetRemoved","_tabPlacement","tabPlacement","directionFromPlacement","orientationFromPlacement","currentWidget","previousWidget","plc","placementToOrientationMap","placementToDirectionMap"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\n\n\n/**\n * A sizer object for use with the box engine layout functions.\n *\n * #### Notes\n * A box sizer holds the geometry information for an object along an\n * arbitrary layout orientation.\n *\n * For best performance, this class should be treated as a raw data\n * struct. It should not typically be subclassed.\n */\nexport\nclass BoxSizer {\n  /**\n   * The preferred size for the sizer.\n   *\n   * #### Notes\n   * The sizer will be given this initial size subject to its size\n   * bounds. The sizer will not deviate from this size unless such\n   * deviation is required to fit into the available layout space.\n   *\n   * There is no limit to this value, but it will be clamped to the\n   * bounds defined by [[minSize]] and [[maxSize]].\n   *\n   * The default value is `0`.\n   */\n  sizeHint = 0;\n\n  /**\n   * The minimum size of the sizer.\n   *\n   * #### Notes\n   * The sizer will never be sized less than this value, even if\n   * it means the sizer will overflow the available layout space.\n   *\n   * It is assumed that this value lies in the range `[0, Infinity)`\n   * and that it is `<=` to [[maxSize]]. Failure to adhere to this\n   * constraint will yield undefined results.\n   *\n   * The default value is `0`.\n   */\n  minSize = 0;\n\n  /**\n   * The maximum size of the sizer.\n   *\n   * #### Notes\n   * The sizer will never be sized greater than this value, even if\n   * it means the sizer will underflow the available layout space.\n   *\n   * It is assumed that this value lies in the range `[0, Infinity]`\n   * and that it is `>=` to [[minSize]]. Failure to adhere to this\n   * constraint will yield undefined results.\n   *\n   * The default value is `Infinity`.\n   */\n  maxSize = Infinity;\n\n  /**\n   * The stretch factor for the sizer.\n   *\n   * #### Notes\n   * This controls how much the sizer stretches relative to its sibling\n   * sizers when layout space is distributed. A stretch factor of zero\n   * is special and will cause the sizer to only be resized after all\n   * other sizers with a stretch factor greater than zero have been\n   * resized to their limits.\n   *\n   * It is assumed that this value is an integer that lies in the range\n   * `[0, Infinity)`. Failure to adhere to this constraint will yield\n   * undefined results.\n   *\n   * The default value is `1`.\n   */\n  stretch = 1;\n\n  /**\n   * The computed size of the sizer.\n   *\n   * #### Notes\n   * This value is the output of a call to [[boxCalc]]. It represents\n   * the computed size for the object along the layout orientation,\n   * and will always lie in the range `[minSize, maxSize]`.\n   *\n   * This value is output only.\n   *\n   * Changing this value will have no effect.\n   */\n  size = 0;\n\n  /**\n   * An internal storage property for the layout algorithm.\n   *\n   * #### Notes\n   * This value is used as temporary storage by the layout algorithm.\n   *\n   * Changing this value will have no effect.\n   */\n  done = false;\n}\n\n\n/**\n * The namespace for the box engine layout functions.\n */\nexport\nnamespace BoxEngine {\n  /**\n   * Calculate the optimal layout sizes for a sequence of box sizers.\n   *\n   * This distributes the available layout space among the box sizers\n   * according to the following algorithm:\n   *\n   * 1. Initialize the sizers's size to its size hint and compute the\n   *    sums for each of size hint, min size, and max size.\n   *\n   * 2. If the total size hint equals the available space, return.\n   *\n   * 3. If the available space is less than the total min size, set all\n   *    sizers to their min size and return.\n   *\n   * 4. If the available space is greater than the total max size, set\n   *    all sizers to their max size and return.\n   *\n   * 5. If the layout space is less than the total size hint, distribute\n   *    the negative delta as follows:\n   *\n   *    a. Shrink each sizer with a stretch factor greater than zero by\n   *       an amount proportional to the negative space and the sum of\n   *       stretch factors. If the sizer reaches its min size, remove\n   *       it and its stretch factor from the computation.\n   *\n   *    b. If after adjusting all stretch sizers there remains negative\n   *       space, distribute the space equally among the sizers with a\n   *       stretch factor of zero. If a sizer reaches its min size,\n   *       remove it from the computation.\n   *\n   * 6. If the layout space is greater than the total size hint,\n   *    distribute the positive delta as follows:\n   *\n   *    a. Expand each sizer with a stretch factor greater than zero by\n   *       an amount proportional to the postive space and the sum of\n   *       stretch factors. If the sizer reaches its max size, remove\n   *       it and its stretch factor from the computation.\n   *\n   *    b. If after adjusting all stretch sizers there remains positive\n   *       space, distribute the space equally among the sizers with a\n   *       stretch factor of zero. If a sizer reaches its max size,\n   *       remove it from the computation.\n   *\n   * 7. return\n   *\n   * @param sizers - The sizers for a particular layout line.\n   *\n   * @param space - The available layout space for the sizers.\n   *\n   * @returns The delta between the provided available space and the\n   *   actual consumed space. This value will be zero if the sizers\n   *   can be adjusted to fit, negative if the available space is too\n   *   small, and positive if the available space is too large.\n   *\n   * #### Notes\n   * The [[size]] of each sizer is updated with the computed size.\n   *\n   * This function can be called at any time to recompute the layout for\n   * an existing sequence of sizers. The previously computed results will\n   * have no effect on the new output. It is therefore not necessary to\n   * create new sizer objects on each resize event.\n   */\n  export\n  function calc(sizers: ArrayLike<BoxSizer>, space: number): number {\n    // Bail early if there is nothing to do.\n    let count = sizers.length;\n    if (count === 0) {\n      return space;\n    }\n\n    // Setup the size and stretch counters.\n    let totalMin = 0;\n    let totalMax = 0;\n    let totalSize = 0;\n    let totalStretch = 0;\n    let stretchCount = 0;\n\n    // Setup the sizers and compute the totals.\n    for (let i = 0; i < count; ++i) {\n      let sizer = sizers[i];\n      let min = sizer.minSize;\n      let max = sizer.maxSize;\n      let hint = sizer.sizeHint;\n      sizer.done = false;\n      sizer.size = Math.max(min, Math.min(hint, max));\n      totalSize += sizer.size;\n      totalMin += min;\n      totalMax += max;\n      if (sizer.stretch > 0) {\n        totalStretch += sizer.stretch;\n        stretchCount++;\n      }\n    }\n\n    // If the space is equal to the total size, return early.\n    if (space === totalSize) {\n      return 0;\n    }\n\n    // If the space is less than the total min, minimize each sizer.\n    if (space <= totalMin) {\n      for (let i = 0; i < count; ++i) {\n        let sizer = sizers[i];\n        sizer.size = sizer.minSize;\n      }\n      return space - totalMin;\n    }\n\n    // If the space is greater than the total max, maximize each sizer.\n    if (space >= totalMax) {\n      for (let i = 0; i < count; ++i) {\n        let sizer = sizers[i];\n        sizer.size = sizer.maxSize;\n      }\n      return space - totalMax;\n    }\n\n    // The loops below perform sub-pixel precision sizing. A near zero\n    // value is used for compares instead of zero to ensure that the\n    // loop terminates when the subdivided space is reasonably small.\n    let nearZero = 0.01;\n\n    // A counter which is decremented each time a sizer is resized to\n    // its limit. This ensures the loops terminate even if there is\n    // space remaining to distribute.\n    let notDoneCount = count;\n\n    // Distribute negative delta space.\n    if (space < totalSize) {\n      // Shrink each stretchable sizer by an amount proportional to its\n      // stretch factor. If a sizer reaches its min size it's marked as\n      // done. The loop progresses in phases where each sizer is given\n      // a chance to consume its fair share for the pass, regardless of\n      // whether a sizer before it reached its limit. This continues\n      // until the stretchable sizers or the free space is exhausted.\n      let freeSpace = totalSize - space;\n      while (stretchCount > 0 && freeSpace > nearZero) {\n        let distSpace = freeSpace;\n        let distStretch = totalStretch;\n        for (let i = 0; i < count; ++i) {\n          let sizer = sizers[i];\n          if (sizer.done || sizer.stretch === 0) {\n            continue;\n          }\n          let amt = sizer.stretch * distSpace / distStretch;\n          if (sizer.size - amt <= sizer.minSize) {\n            freeSpace -= sizer.size - sizer.minSize;\n            totalStretch -= sizer.stretch;\n            sizer.size = sizer.minSize;\n            sizer.done = true;\n            notDoneCount--;\n            stretchCount--;\n          } else {\n            freeSpace -= amt;\n            sizer.size -= amt;\n          }\n        }\n      }\n      // Distribute any remaining space evenly among the non-stretchable\n      // sizers. This progresses in phases in the same manner as above.\n      while (notDoneCount > 0 && freeSpace > nearZero) {\n        let amt = freeSpace / notDoneCount;\n        for (let i = 0; i < count; ++i) {\n          let sizer = sizers[i];\n          if (sizer.done) {\n            continue;\n          }\n          if (sizer.size - amt <= sizer.minSize) {\n            freeSpace -= sizer.size - sizer.minSize;\n            sizer.size = sizer.minSize;\n            sizer.done = true;\n            notDoneCount--;\n          } else {\n            freeSpace -= amt;\n            sizer.size -= amt;\n          }\n        }\n      }\n    }\n    // Distribute positive delta space.\n    else {\n      // Expand each stretchable sizer by an amount proportional to its\n      // stretch factor. If a sizer reaches its max size it's marked as\n      // done. The loop progresses in phases where each sizer is given\n      // a chance to consume its fair share for the pass, regardless of\n      // whether a sizer before it reached its limit. This continues\n      // until the stretchable sizers or the free space is exhausted.\n      let freeSpace = space - totalSize;\n      while (stretchCount > 0 && freeSpace > nearZero) {\n        let distSpace = freeSpace;\n        let distStretch = totalStretch;\n        for (let i = 0; i < count; ++i) {\n          let sizer = sizers[i];\n          if (sizer.done || sizer.stretch === 0) {\n            continue;\n          }\n          let amt = sizer.stretch * distSpace / distStretch;\n          if (sizer.size + amt >= sizer.maxSize) {\n            freeSpace -= sizer.maxSize - sizer.size;\n            totalStretch -= sizer.stretch;\n            sizer.size = sizer.maxSize;\n            sizer.done = true;\n            notDoneCount--;\n            stretchCount--;\n          } else {\n            freeSpace -= amt;\n            sizer.size += amt;\n          }\n        }\n      }\n      // Distribute any remaining space evenly among the non-stretchable\n      // sizers. This progresses in phases in the same manner as above.\n      while (notDoneCount > 0 && freeSpace > nearZero) {\n        let amt = freeSpace / notDoneCount;\n        for (let i = 0; i < count; ++i) {\n          let sizer = sizers[i];\n          if (sizer.done) {\n            continue;\n          }\n          if (sizer.size + amt >= sizer.maxSize) {\n            freeSpace -= sizer.maxSize - sizer.size;\n            sizer.size = sizer.maxSize;\n            sizer.done = true;\n            notDoneCount--;\n          } else {\n            freeSpace -= amt;\n            sizer.size += amt;\n          }\n        }\n      }\n    }\n\n    // Indicate that the consumed space equals the available space.\n    return 0;\n  }\n\n  /**\n   * Adjust a sizer by a delta and update its neighbors accordingly.\n   *\n   * @param sizers - The sizers which should be adjusted.\n   *\n   * @param index - The index of the sizer to grow.\n   *\n   * @param delta - The amount to adjust the sizer, positive or negative.\n   *\n   * #### Notes\n   * This will adjust the indicated sizer by the specified amount, along\n   * with the sizes of the appropriate neighbors, subject to the limits\n   * specified by each of the sizers.\n   *\n   * This is useful when implementing box layouts where the boundaries\n   * between the sizers are interactively adjustable by the user.\n   */\n  export\n  function adjust(sizers: ArrayLike<BoxSizer>, index: number, delta: number): void {\n    // Bail early when there is nothing to do.\n    if (sizers.length === 0 || delta === 0) {\n      return;\n    }\n\n    // Dispatch to the proper implementation.\n    if (delta > 0) {\n      growSizer(sizers, index, delta);\n    } else {\n      shrinkSizer(sizers, index, -delta);\n    }\n  }\n\n  /**\n   * Grow a sizer by a positive delta and adjust neighbors.\n   */\n  function growSizer(sizers: ArrayLike<BoxSizer>, index: number, delta: number): void {\n    // Compute how much the items to the left can expand.\n    let growLimit = 0;\n    for (let i = 0; i <= index; ++i) {\n      let sizer = sizers[i];\n      growLimit += sizer.maxSize - sizer.size;\n    }\n\n    // Compute how much the items to the right can shrink.\n    let shrinkLimit = 0;\n    for (let i = index + 1, n = sizers.length; i < n; ++i) {\n      let sizer = sizers[i];\n      shrinkLimit += sizer.size - sizer.minSize;\n    }\n\n    // Clamp the delta adjustment to the limits.\n    delta = Math.min(delta, growLimit, shrinkLimit);\n\n    // Grow the sizers to the left by the delta.\n    let grow = delta;\n    for (let i = index; i >= 0 && grow > 0; --i) {\n      let sizer = sizers[i];\n      let limit = sizer.maxSize - sizer.size;\n      if (limit >= grow) {\n        sizer.sizeHint = sizer.size + grow;\n        grow = 0;\n      } else {\n        sizer.sizeHint = sizer.size + limit;\n        grow -= limit;\n      }\n    }\n\n    // Shrink the sizers to the right by the delta.\n    let shrink = delta;\n    for (let i = index + 1, n = sizers.length; i < n && shrink > 0; ++i) {\n      let sizer = sizers[i];\n      let limit = sizer.size - sizer.minSize;\n      if (limit >= shrink) {\n        sizer.sizeHint = sizer.size - shrink;\n        shrink = 0;\n      } else {\n        sizer.sizeHint = sizer.size - limit;\n        shrink -= limit;\n      }\n    }\n  }\n\n  /**\n   * Shrink a sizer by a positive delta and adjust neighbors.\n   */\n  function shrinkSizer(sizers: ArrayLike<BoxSizer>, index: number, delta: number): void {\n    // Compute how much the items to the right can expand.\n    let growLimit = 0;\n    for (let i = index + 1, n = sizers.length; i < n; ++i) {\n      let sizer = sizers[i];\n      growLimit += sizer.maxSize - sizer.size;\n    }\n\n    // Compute how much the items to the left can shrink.\n    let shrinkLimit = 0;\n    for (let i = 0; i <= index; ++i) {\n      let sizer = sizers[i];\n      shrinkLimit += sizer.size - sizer.minSize;\n    }\n\n    // Clamp the delta adjustment to the limits.\n    delta = Math.min(delta, growLimit, shrinkLimit);\n\n    // Grow the sizers to the right by the delta.\n    let grow = delta;\n    for (let i = index + 1, n = sizers.length; i < n && grow > 0; ++i) {\n      let sizer = sizers[i];\n      let limit = sizer.maxSize - sizer.size;\n      if (limit >= grow) {\n        sizer.sizeHint = sizer.size + grow;\n        grow = 0;\n      } else {\n        sizer.sizeHint = sizer.size + limit;\n        grow -= limit;\n      }\n    }\n\n    // Shrink the sizers to the left by the delta.\n    let shrink = delta;\n    for (let i = index; i >= 0 && shrink > 0; --i) {\n      let sizer = sizers[i];\n      let limit = sizer.size - sizer.minSize;\n      if (limit >= shrink) {\n        sizer.sizeHint = sizer.size - shrink;\n        shrink = 0;\n      } else {\n        sizer.sizeHint = sizer.size - limit;\n        shrink -= limit;\n      }\n    }\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  IIterator, empty\n} from '@lumino/algorithm';\n\nimport {\n  IObservableDisposable\n} from '@lumino/disposable';\n\nimport {\n  ConflatableMessage, IMessageHandler, Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  AttachedProperty\n} from '@lumino/properties';\n\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  Layout\n} from './layout';\n\nimport {\n  Title\n} from './title';\n\n\n/**\n * The base class of the lumino widget hierarchy.\n *\n * #### Notes\n * This class will typically be subclassed in order to create a useful\n * widget. However, it can be used directly to host externally created\n * content.\n */\nexport\nclass Widget implements IMessageHandler, IObservableDisposable {\n  /**\n   * Construct a new widget.\n   *\n   * @param options - The options for initializing the widget.\n   */\n  constructor(options: Widget.IOptions = {}) {\n    this.node = Private.createNode(options);\n    this.addClass('lm-Widget');\n    /* <DEPRECATED> */\n    this.addClass('p-Widget');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * Dispose of the widget and its descendant widgets.\n   *\n   * #### Notes\n   * It is unsafe to use the widget after it has been disposed.\n   *\n   * All calls made to this method after the first are a no-op.\n   */\n  dispose(): void {\n    // Do nothing if the widget is already disposed.\n    if (this.isDisposed) {\n      return;\n    }\n\n    // Set the disposed flag and emit the disposed signal.\n    this.setFlag(Widget.Flag.IsDisposed);\n    this._disposed.emit(undefined);\n\n    // Remove or detach the widget if necessary.\n    if (this.parent) {\n      this.parent = null;\n    } else if (this.isAttached) {\n      Widget.detach(this);\n    }\n\n    // Dispose of the widget layout.\n    if (this._layout) {\n      this._layout.dispose();\n      this._layout = null;\n    }\n\n    // Clear the extra data associated with the widget.\n    Signal.clearData(this);\n    MessageLoop.clearData(this);\n    AttachedProperty.clearData(this);\n  }\n\n  /**\n   * A signal emitted when the widget is disposed.\n   */\n  get disposed(): ISignal<this, void> {\n    return this._disposed;\n  }\n\n  /**\n   * Get the DOM node owned by the widget.\n   */\n  readonly node: HTMLElement;\n\n  /**\n   * Test whether the widget has been disposed.\n   */\n  get isDisposed(): boolean {\n    return this.testFlag(Widget.Flag.IsDisposed);\n  }\n\n  /**\n   * Test whether the widget's node is attached to the DOM.\n   */\n  get isAttached(): boolean {\n    return this.testFlag(Widget.Flag.IsAttached);\n  }\n\n  /**\n   * Test whether the widget is explicitly hidden.\n   */\n  get isHidden(): boolean {\n    return this.testFlag(Widget.Flag.IsHidden);\n  }\n\n  /**\n   * Test whether the widget is visible.\n   *\n   * #### Notes\n   * A widget is visible when it is attached to the DOM, is not\n   * explicitly hidden, and has no explicitly hidden ancestors.\n   */\n  get isVisible(): boolean {\n    return this.testFlag(Widget.Flag.IsVisible);\n  }\n\n  /**\n   * The title object for the widget.\n   *\n   * #### Notes\n   * The title object is used by some container widgets when displaying\n   * the widget alongside some title, such as a tab panel or side bar.\n   *\n   * Since not all widgets will use the title, it is created on demand.\n   *\n   * The `owner` property of the title is set to this widget.\n   */\n  get title(): Title<Widget> {\n    return Private.titleProperty.get(this);\n  }\n\n  /**\n   * Get the id of the widget's DOM node.\n   */\n  get id(): string {\n    return this.node.id;\n  }\n\n  /**\n   * Set the id of the widget's DOM node.\n   */\n  set id(value: string) {\n    this.node.id = value;\n  }\n\n  /**\n   * The dataset for the widget's DOM node.\n   */\n  get dataset(): DOMStringMap {\n    return this.node.dataset;\n  }\n\n  /**\n   * Get the parent of the widget.\n   */\n  get parent(): Widget | null {\n    return this._parent;\n  }\n\n  /**\n   * Set the parent of the widget.\n   *\n   * #### Notes\n   * Children are typically added to a widget by using a layout, which\n   * means user code will not normally set the parent widget directly.\n   *\n   * The widget will be automatically removed from its old parent.\n   *\n   * This is a no-op if there is no effective parent change.\n   */\n  set parent(value: Widget | null) {\n    if (this._parent === value) {\n      return;\n    }\n    if (value && this.contains(value)) {\n      throw new Error('Invalid parent widget.');\n    }\n    if (this._parent && !this._parent.isDisposed) {\n      let msg = new Widget.ChildMessage('child-removed', this);\n      MessageLoop.sendMessage(this._parent, msg);\n    }\n    this._parent = value;\n    if (this._parent && !this._parent.isDisposed) {\n      let msg = new Widget.ChildMessage('child-added', this);\n      MessageLoop.sendMessage(this._parent, msg);\n    }\n    if (!this.isDisposed) {\n      MessageLoop.sendMessage(this, Widget.Msg.ParentChanged);\n    }\n  }\n\n  /**\n   * Get the layout for the widget.\n   */\n  get layout(): Layout | null {\n    return this._layout;\n  }\n\n  /**\n   * Set the layout for the widget.\n   *\n   * #### Notes\n   * The layout is single-use only. It cannot be changed after the\n   * first assignment.\n   *\n   * The layout is disposed automatically when the widget is disposed.\n   */\n  set layout(value: Layout | null) {\n    if (this._layout === value) {\n      return;\n    }\n    if (this.testFlag(Widget.Flag.DisallowLayout)) {\n      throw new Error('Cannot set widget layout.');\n    }\n    if (this._layout) {\n      throw new Error('Cannot change widget layout.');\n    }\n    if (value!.parent) {\n      throw new Error('Cannot change layout parent.');\n    }\n    this._layout = value;\n    value!.parent = this;\n  }\n\n  /**\n   * Create an iterator over the widget's children.\n   *\n   * @returns A new iterator over the children of the widget.\n   *\n   * #### Notes\n   * The widget must have a populated layout in order to have children.\n   *\n   * If a layout is not installed, the returned iterator will be empty.\n   */\n  children(): IIterator<Widget> {\n    return this._layout ? this._layout.iter() : empty<Widget>();\n  }\n\n  /**\n   * Test whether a widget is a descendant of this widget.\n   *\n   * @param widget - The descendant widget of interest.\n   *\n   * @returns `true` if the widget is a descendant, `false` otherwise.\n   */\n  contains(widget: Widget): boolean {\n    for (let value: Widget | null = widget; value; value = value._parent) {\n      if (value === this) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Test whether the widget's DOM node has the given class name.\n   *\n   * @param name - The class name of interest.\n   *\n   * @returns `true` if the node has the class, `false` otherwise.\n   */\n  hasClass(name: string): boolean {\n    return this.node.classList.contains(name);\n  }\n\n  /**\n   * Add a class name to the widget's DOM node.\n   *\n   * @param name - The class name to add to the node.\n   *\n   * #### Notes\n   * If the class name is already added to the node, this is a no-op.\n   *\n   * The class name must not contain whitespace.\n   */\n  addClass(name: string): void {\n    this.node.classList.add(name);\n  }\n\n  /**\n   * Remove a class name from the widget's DOM node.\n   *\n   * @param name - The class name to remove from the node.\n   *\n   * #### Notes\n   * If the class name is not yet added to the node, this is a no-op.\n   *\n   * The class name must not contain whitespace.\n   */\n  removeClass(name: string): void {\n    this.node.classList.remove(name);\n  }\n\n  /**\n   * Toggle a class name on the widget's DOM node.\n   *\n   * @param name - The class name to toggle on the node.\n   *\n   * @param force - Whether to force add the class (`true`) or force\n   *   remove the class (`false`). If not provided, the presence of\n   *   the class will be toggled from its current state.\n   *\n   * @returns `true` if the class is now present, `false` otherwise.\n   *\n   * #### Notes\n   * The class name must not contain whitespace.\n   */\n  toggleClass(name: string, force?: boolean): boolean {\n    if (force === true) {\n      this.node.classList.add(name);\n      return true;\n    }\n    if (force === false) {\n      this.node.classList.remove(name);\n      return false;\n    }\n    return this.node.classList.toggle(name);\n  }\n\n  /**\n   * Post an `'update-request'` message to the widget.\n   *\n   * #### Notes\n   * This is a simple convenience method for posting the message.\n   */\n  update(): void {\n    MessageLoop.postMessage(this, Widget.Msg.UpdateRequest);\n  }\n\n  /**\n   * Post a `'fit-request'` message to the widget.\n   *\n   * #### Notes\n   * This is a simple convenience method for posting the message.\n   */\n  fit(): void {\n    MessageLoop.postMessage(this, Widget.Msg.FitRequest);\n  }\n\n  /**\n   * Post an `'activate-request'` message to the widget.\n   *\n   * #### Notes\n   * This is a simple convenience method for posting the message.\n   */\n  activate(): void {\n    MessageLoop.postMessage(this, Widget.Msg.ActivateRequest);\n  }\n\n  /**\n   * Send a `'close-request'` message to the widget.\n   *\n   * #### Notes\n   * This is a simple convenience method for sending the message.\n   */\n  close(): void {\n    MessageLoop.sendMessage(this, Widget.Msg.CloseRequest);\n  }\n\n  /**\n   * Show the widget and make it visible to its parent widget.\n   *\n   * #### Notes\n   * This causes the [[isHidden]] property to be `false`.\n   *\n   * If the widget is not explicitly hidden, this is a no-op.\n   */\n  show(): void {\n    if (!this.testFlag(Widget.Flag.IsHidden)) {\n      return;\n    }\n    if (this.isAttached && (!this.parent || this.parent.isVisible)) {\n      MessageLoop.sendMessage(this, Widget.Msg.BeforeShow);\n    }\n    this.clearFlag(Widget.Flag.IsHidden);\n    this.removeClass('lm-mod-hidden');\n    /* <DEPRECATED> */\n    this.removeClass('p-mod-hidden');\n    /* </DEPRECATED> */\n    if (this.isAttached && (!this.parent || this.parent.isVisible)) {\n      MessageLoop.sendMessage(this, Widget.Msg.AfterShow);\n    }\n    if (this.parent) {\n      let msg = new Widget.ChildMessage('child-shown', this);\n      MessageLoop.sendMessage(this.parent, msg);\n    }\n  }\n\n  /**\n   * Hide the widget and make it hidden to its parent widget.\n   *\n   * #### Notes\n   * This causes the [[isHidden]] property to be `true`.\n   *\n   * If the widget is explicitly hidden, this is a no-op.\n   */\n  hide(): void {\n    if (this.testFlag(Widget.Flag.IsHidden)) {\n      return;\n    }\n    if (this.isAttached && (!this.parent || this.parent.isVisible)) {\n      MessageLoop.sendMessage(this, Widget.Msg.BeforeHide);\n    }\n    this.setFlag(Widget.Flag.IsHidden);\n    this.addClass('lm-mod-hidden');\n    /* <DEPRECATED> */\n    this.addClass('p-mod-hidden');\n    /* </DEPRECATED> */\n    if (this.isAttached && (!this.parent || this.parent.isVisible)) {\n      MessageLoop.sendMessage(this, Widget.Msg.AfterHide);\n    }\n    if (this.parent) {\n      let msg = new Widget.ChildMessage('child-hidden', this);\n      MessageLoop.sendMessage(this.parent, msg);\n    }\n  }\n\n  /**\n   * Show or hide the widget according to a boolean value.\n   *\n   * @param hidden - `true` to hide the widget, or `false` to show it.\n   *\n   * #### Notes\n   * This is a convenience method for `hide()` and `show()`.\n   */\n  setHidden(hidden: boolean): void {\n    if (hidden) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  /**\n   * Test whether the given widget flag is set.\n   *\n   * #### Notes\n   * This will not typically be called directly by user code.\n   */\n  testFlag(flag: Widget.Flag): boolean {\n    return (this._flags & flag) !== 0;\n  }\n\n  /**\n   * Set the given widget flag.\n   *\n   * #### Notes\n   * This will not typically be called directly by user code.\n   */\n  setFlag(flag: Widget.Flag): void {\n    this._flags |= flag;\n  }\n\n  /**\n   * Clear the given widget flag.\n   *\n   * #### Notes\n   * This will not typically be called directly by user code.\n   */\n  clearFlag(flag: Widget.Flag): void {\n    this._flags &= ~flag;\n  }\n\n  /**\n   * Process a message sent to the widget.\n   *\n   * @param msg - The message sent to the widget.\n   *\n   * #### Notes\n   * Subclasses may reimplement this method as needed.\n   */\n  processMessage(msg: Message): void {\n    switch (msg.type) {\n    case 'resize':\n      this.notifyLayout(msg);\n      this.onResize(msg as Widget.ResizeMessage);\n      break;\n    case 'update-request':\n      this.notifyLayout(msg);\n      this.onUpdateRequest(msg);\n      break;\n    case 'fit-request':\n      this.notifyLayout(msg);\n      this.onFitRequest(msg);\n      break;\n    case 'before-show':\n      this.notifyLayout(msg);\n      this.onBeforeShow(msg);\n      break;\n    case 'after-show':\n      this.setFlag(Widget.Flag.IsVisible);\n      this.notifyLayout(msg);\n      this.onAfterShow(msg);\n      break;\n    case 'before-hide':\n      this.notifyLayout(msg);\n      this.onBeforeHide(msg);\n      break;\n    case 'after-hide':\n      this.clearFlag(Widget.Flag.IsVisible);\n      this.notifyLayout(msg);\n      this.onAfterHide(msg);\n      break;\n    case 'before-attach':\n      this.notifyLayout(msg);\n      this.onBeforeAttach(msg);\n      break;\n    case 'after-attach':\n      if (!this.isHidden && (!this.parent || this.parent.isVisible)) {\n        this.setFlag(Widget.Flag.IsVisible);\n      }\n      this.setFlag(Widget.Flag.IsAttached);\n      this.notifyLayout(msg);\n      this.onAfterAttach(msg);\n      break;\n    case 'before-detach':\n      this.notifyLayout(msg);\n      this.onBeforeDetach(msg);\n      break;\n    case 'after-detach':\n      this.clearFlag(Widget.Flag.IsVisible);\n      this.clearFlag(Widget.Flag.IsAttached);\n      this.notifyLayout(msg);\n      this.onAfterDetach(msg);\n      break;\n    case 'activate-request':\n      this.notifyLayout(msg);\n      this.onActivateRequest(msg);\n      break;\n    case 'close-request':\n      this.notifyLayout(msg);\n      this.onCloseRequest(msg);\n      break;\n    case 'child-added':\n      this.notifyLayout(msg);\n      this.onChildAdded(msg as Widget.ChildMessage);\n      break;\n    case 'child-removed':\n      this.notifyLayout(msg);\n      this.onChildRemoved(msg as Widget.ChildMessage);\n      break;\n    default:\n      this.notifyLayout(msg);\n      break;\n    }\n  }\n\n  /**\n   * Invoke the message processing routine of the widget's layout.\n   *\n   * @param msg - The message to dispatch to the layout.\n   *\n   * #### Notes\n   * This is a no-op if the widget does not have a layout.\n   *\n   * This will not typically be called directly by user code.\n   */\n  protected notifyLayout(msg: Message): void {\n    if (this._layout) {\n      this._layout.processParentMessage(msg);\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'close-request'` message.\n   *\n   * #### Notes\n   * The default implementation unparents or detaches the widget.\n   */\n  protected onCloseRequest(msg: Message): void {\n    if (this.parent) {\n      this.parent = null;\n    } else if (this.isAttached) {\n      Widget.detach(this);\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void { }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onUpdateRequest(msg: Message): void { }\n\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onFitRequest(msg: Message): void { }\n\n  /**\n   * A message handler invoked on an `'activate-request'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onActivateRequest(msg: Message): void { }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onBeforeShow(msg: Message): void { }\n\n  /**\n   * A message handler invoked on an `'after-show'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onAfterShow(msg: Message): void { }\n\n  /**\n   * A message handler invoked on a `'before-hide'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onBeforeHide(msg: Message): void { }\n\n  /**\n   * A message handler invoked on an `'after-hide'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onAfterHide(msg: Message): void { }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onBeforeAttach(msg: Message): void { }\n\n  /**\n   * A message handler invoked on an `'after-attach'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onAfterAttach(msg: Message): void { }\n\n  /**\n   * A message handler invoked on a `'before-detach'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onBeforeDetach(msg: Message): void { }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onAfterDetach(msg: Message): void { }\n\n  /**\n   * A message handler invoked on a `'child-added'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onChildAdded(msg: Widget.ChildMessage): void { }\n\n  /**\n   * A message handler invoked on a `'child-removed'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onChildRemoved(msg: Widget.ChildMessage): void { }\n\n  private _flags = 0;\n  private _layout: Layout | null = null;\n  private _parent: Widget | null = null;\n  private _disposed = new Signal<this, void>(this);\n}\n\n\n/**\n * The namespace for the `Widget` class statics.\n */\nexport\nnamespace Widget {\n  /**\n   * An options object for initializing a widget.\n   */\n  export\n  interface IOptions {\n    /**\n     * The optional node to use for the widget.\n     *\n     * If a node is provided, the widget will assume full ownership\n     * and control of the node, as if it had created the node itself.\n     *\n     * The default is a new `<div>`.\n     */\n    node?: HTMLElement;\n\n    /**\n     * The optional element tag, used for constructing the widget's node.\n     *\n     * If a pre-constructed node is provided via the `node` arg, this\n     * value is ignored.\n     */\n    tag?: keyof HTMLElementTagNameMap;\n  }\n\n  /**\n   * An enum of widget bit flags.\n   */\n  export\n  enum Flag {\n    /**\n     * The widget has been disposed.\n     */\n    IsDisposed = 0x1,\n\n    /**\n     * The widget is attached to the DOM.\n     */\n    IsAttached = 0x2,\n\n    /**\n     * The widget is hidden.\n     */\n    IsHidden = 0x4,\n\n    /**\n     * The widget is visible.\n     */\n    IsVisible = 0x8,\n\n    /**\n     * A layout cannot be set on the widget.\n     */\n    DisallowLayout = 0x10\n  }\n\n  /**\n   * A collection of stateless messages related to widgets.\n   */\n  export\n  namespace Msg {\n    /**\n     * A singleton `'before-show'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget before it becomes visible.\n     *\n     * This message is **not** sent when the widget is being attached.\n     */\n    export\n    const BeforeShow = new Message('before-show');\n\n    /**\n     * A singleton `'after-show'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget after it becomes visible.\n     *\n     * This message is **not** sent when the widget is being attached.\n     */\n    export\n    const AfterShow = new Message('after-show');\n\n    /**\n     * A singleton `'before-hide'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget before it becomes not-visible.\n     *\n     * This message is **not** sent when the widget is being detached.\n     */\n    export\n    const BeforeHide = new Message('before-hide');\n\n    /**\n     * A singleton `'after-hide'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget after it becomes not-visible.\n     *\n     * This message is **not** sent when the widget is being detached.\n     */\n    export\n    const AfterHide = new Message('after-hide');\n\n    /**\n     * A singleton `'before-attach'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget before it is attached.\n     */\n    export\n    const BeforeAttach = new Message('before-attach');\n\n    /**\n     * A singleton `'after-attach'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget after it is attached.\n     */\n    export\n    const AfterAttach = new Message('after-attach');\n\n    /**\n     * A singleton `'before-detach'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget before it is detached.\n     */\n    export\n    const BeforeDetach = new Message('before-detach');\n\n    /**\n     * A singleton `'after-detach'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget after it is detached.\n     */\n    export\n    const AfterDetach = new Message('after-detach');\n\n    /**\n     * A singleton `'parent-changed'` message.\n     *\n     * #### Notes\n     * This message is sent to a widget when its parent has changed.\n     */\n    export\n    const ParentChanged = new Message('parent-changed');\n\n    /**\n     * A singleton conflatable `'update-request'` message.\n     *\n     * #### Notes\n     * This message can be dispatched to supporting widgets in order to\n     * update their content based on the current widget state. Not all\n     * widgets will respond to messages of this type.\n     *\n     * For widgets with a layout, this message will inform the layout to\n     * update the position and size of its child widgets.\n     */\n    export\n    const UpdateRequest = new ConflatableMessage('update-request');\n\n    /**\n     * A singleton conflatable `'fit-request'` message.\n     *\n     * #### Notes\n     * For widgets with a layout, this message will inform the layout to\n     * recalculate its size constraints to fit the space requirements of\n     * its child widgets, and to update their position and size. Not all\n     * layouts will respond to messages of this type.\n     */\n    export\n    const FitRequest = new ConflatableMessage('fit-request');\n\n    /**\n     * A singleton conflatable `'activate-request'` message.\n     *\n     * #### Notes\n     * This message should be dispatched to a widget when it should\n     * perform the actions necessary to activate the widget, which\n     * may include focusing its node or descendant node.\n     */\n    export\n    const ActivateRequest = new ConflatableMessage('activate-request');\n\n    /**\n     * A singleton conflatable `'close-request'` message.\n     *\n     * #### Notes\n     * This message should be dispatched to a widget when it should close\n     * and remove itself from the widget hierarchy.\n     */\n    export\n    const CloseRequest = new ConflatableMessage('close-request');\n  }\n\n  /**\n   * A message class for child related messages.\n   */\n  export\n  class ChildMessage extends Message {\n    /**\n     * Construct a new child message.\n     *\n     * @param type - The message type.\n     *\n     * @param child - The child widget for the message.\n     */\n    constructor(type: string, child: Widget) {\n      super(type);\n      this.child = child;\n    }\n\n    /**\n     * The child widget for the message.\n     */\n    readonly child: Widget;\n  }\n\n  /**\n   * A message class for `'resize'` messages.\n   */\n  export\n  class ResizeMessage extends Message {\n    /**\n     * Construct a new resize message.\n     *\n     * @param width - The **offset width** of the widget, or `-1` if\n     *   the width is not known.\n     *\n     * @param height - The **offset height** of the widget, or `-1` if\n     *   the height is not known.\n     */\n    constructor(width: number, height: number) {\n      super('resize');\n      this.width = width;\n      this.height = height;\n    }\n\n    /**\n     * The offset width of the widget.\n     *\n     * #### Notes\n     * This will be `-1` if the width is unknown.\n     */\n    readonly width: number;\n\n    /**\n     * The offset height of the widget.\n     *\n     * #### Notes\n     * This will be `-1` if the height is unknown.\n     */\n    readonly height: number;\n  }\n\n  /**\n   * The namespace for the `ResizeMessage` class statics.\n   */\n  export\n  namespace ResizeMessage {\n    /**\n     * A singleton `'resize'` message with an unknown size.\n     */\n    export\n    const UnknownSize = new ResizeMessage(-1, -1);\n  }\n\n  /**\n   * Attach a widget to a host DOM node.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param host - The DOM node to use as the widget's host.\n   *\n   * @param ref - The child of `host` to use as the reference element.\n   *   If this is provided, the widget will be inserted before this\n   *   node in the host. The default is `null`, which will cause the\n   *   widget to be added as the last child of the host.\n   *\n   * #### Notes\n   * This will throw an error if the widget is not a root widget, if\n   * the widget is already attached, or if the host is not attached\n   * to the DOM.\n   */\n  export\n  function attach(widget: Widget, host: HTMLElement, ref: HTMLElement | null = null): void {\n    if (widget.parent) {\n      throw new Error('Cannot attach a child widget.');\n    }\n    if (widget.isAttached || document.body.contains(widget.node)) {\n      throw new Error('Widget is already attached.');\n    }\n    if (!document.body.contains(host)) {\n      throw new Error('Host is not attached.');\n    }\n    MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    host.insertBefore(widget.node, ref);\n    MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n  }\n\n  /**\n   * Detach the widget from its host DOM node.\n   *\n   * @param widget - The widget of interest.\n   *\n   * #### Notes\n   * This will throw an error if the widget is not a root widget,\n   * or if the widget is not attached to the DOM.\n   */\n  export\n  function detach(widget: Widget): void {\n    if (widget.parent) {\n      throw new Error('Cannot detach a child widget.');\n    }\n    if (!widget.isAttached || !document.body.contains(widget.node)) {\n      throw new Error('Widget is not attached.');\n    }\n    MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    widget.node.parentNode!.removeChild(widget.node);\n    MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * An attached property for the widget title object.\n   */\n  export\n  const titleProperty = new AttachedProperty<Widget, Title<Widget>>({\n    name: 'title',\n    create: owner => new Title<Widget>({ owner }),\n  });\n\n  /**\n   * Create a DOM node for the given widget options.\n   */\n  export\n  function createNode(options: Widget.IOptions): HTMLElement {\n    return options.node || document.createElement(options.tag || 'div');\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  IIterable, IIterator, each\n} from '@lumino/algorithm';\n\nimport {\n  IDisposable\n} from '@lumino/disposable';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  AttachedProperty\n} from '@lumino/properties';\n\nimport {\n  Signal\n} from '@lumino/signaling';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * An abstract base class for creating lumino layouts.\n *\n * #### Notes\n * A layout is used to add widgets to a parent and to arrange those\n * widgets within the parent's DOM node.\n *\n * This class implements the base functionality which is required of\n * nearly all layouts. It must be subclassed in order to be useful.\n *\n * Notably, this class does not define a uniform interface for adding\n * widgets to the layout. A subclass should define that API in a way\n * which is meaningful for its intended use.\n */\nexport\nabstract class Layout implements IIterable<Widget>, IDisposable {\n  /**\n   * Construct a new layout.\n   *\n   * @param options - The options for initializing the layout.\n   */\n  constructor(options: Layout.IOptions = {}) {\n    this._fitPolicy = options.fitPolicy || 'set-min-size';\n  }\n\n  /**\n   * Dispose of the resources held by the layout.\n   *\n   * #### Notes\n   * This should be reimplemented to clear and dispose of the widgets.\n   *\n   * All reimplementations should call the superclass method.\n   *\n   * This method is called automatically when the parent is disposed.\n   */\n  dispose(): void {\n    this._parent = null;\n    this._disposed = true;\n    Signal.clearData(this);\n    AttachedProperty.clearData(this);\n  }\n\n  /**\n   * Test whether the layout is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._disposed;\n  }\n\n  /**\n   * Get the parent widget of the layout.\n   */\n  get parent(): Widget | null {\n    return this._parent;\n  }\n\n  /**\n   * Set the parent widget of the layout.\n   *\n   * #### Notes\n   * This is set automatically when installing the layout on the parent\n   * widget. The parent widget should not be set directly by user code.\n   */\n  set parent(value: Widget | null) {\n    if (this._parent === value) {\n      return;\n    }\n    if (this._parent) {\n      throw new Error('Cannot change parent widget.');\n    }\n    if (value!.layout !== this) {\n      throw new Error('Invalid parent widget.');\n    }\n    this._parent = value;\n    this.init();\n  }\n\n  /**\n   * Get the fit policy for the layout.\n   *\n   * #### Notes\n   * The fit policy controls the computed size constraints which are\n   * applied to the parent widget by the layout.\n   *\n   * Some layout implementations may ignore the fit policy.\n   */\n  get fitPolicy(): Layout.FitPolicy {\n    return this._fitPolicy;\n  }\n\n  /**\n   * Set the fit policy for the layout.\n   *\n   * #### Notes\n   * The fit policy controls the computed size constraints which are\n   * applied to the parent widget by the layout.\n   *\n   * Some layout implementations may ignore the fit policy.\n   *\n   * Changing the fit policy will clear the current size constraint\n   * for the parent widget and then re-fit the parent.\n   */\n  set fitPolicy(value: Layout.FitPolicy) {\n    // Bail if the policy does not change\n    if (this._fitPolicy === value) {\n      return;\n    }\n\n    // Update the internal policy.\n    this._fitPolicy = value;\n\n    // Clear the size constraints and schedule a fit of the parent.\n    if (this._parent) {\n      let style = this._parent.node.style;\n      style.minWidth = '';\n      style.minHeight = '';\n      style.maxWidth = '';\n      style.maxHeight = '';\n      this._parent.fit();\n    }\n  }\n\n  /**\n   * Create an iterator over the widgets in the layout.\n   *\n   * @returns A new iterator over the widgets in the layout.\n   *\n   * #### Notes\n   * This abstract method must be implemented by a subclass.\n   */\n  abstract iter(): IIterator<Widget>;\n\n  /**\n   * Remove a widget from the layout.\n   *\n   * @param widget - The widget to remove from the layout.\n   *\n   * #### Notes\n   * A widget is automatically removed from the layout when its `parent`\n   * is set to `null`. This method should only be invoked directly when\n   * removing a widget from a layout which has yet to be installed on a\n   * parent widget.\n   *\n   * This method should *not* modify the widget's `parent`.\n   */\n  abstract removeWidget(widget: Widget): void;\n\n  /**\n   * Process a message sent to the parent widget.\n   *\n   * @param msg - The message sent to the parent widget.\n   *\n   * #### Notes\n   * This method is called by the parent widget to process a message.\n   *\n   * Subclasses may reimplement this method as needed.\n   */\n  processParentMessage(msg: Message): void {\n    switch (msg.type) {\n    case 'resize':\n      this.onResize(msg as Widget.ResizeMessage);\n      break;\n    case 'update-request':\n      this.onUpdateRequest(msg);\n      break;\n    case 'fit-request':\n      this.onFitRequest(msg);\n      break;\n    case 'before-show':\n      this.onBeforeShow(msg);\n      break;\n    case 'after-show':\n      this.onAfterShow(msg);\n      break;\n    case 'before-hide':\n      this.onBeforeHide(msg);\n      break;\n    case 'after-hide':\n      this.onAfterHide(msg);\n      break;\n    case 'before-attach':\n      this.onBeforeAttach(msg);\n      break;\n    case 'after-attach':\n      this.onAfterAttach(msg);\n      break;\n    case 'before-detach':\n      this.onBeforeDetach(msg);\n      break;\n    case 'after-detach':\n      this.onAfterDetach(msg);\n      break;\n    case 'child-removed':\n      this.onChildRemoved(msg as Widget.ChildMessage);\n      break;\n    case 'child-shown':\n      this.onChildShown(msg as Widget.ChildMessage);\n      break;\n    case 'child-hidden':\n      this.onChildHidden(msg as Widget.ChildMessage);\n      break;\n    }\n  }\n\n  /**\n   * Perform layout initialization which requires the parent widget.\n   *\n   * #### Notes\n   * This method is invoked immediately after the layout is installed\n   * on the parent widget.\n   *\n   * The default implementation reparents all of the widgets to the\n   * layout parent widget.\n   *\n   * Subclasses should reimplement this method and attach the child\n   * widget nodes to the parent widget's node.\n   */\n  protected init(): void {\n    each(this, widget => {\n      widget.parent = this.parent;\n    });\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   *\n   * #### Notes\n   * The layout should ensure that its widgets are resized according\n   * to the specified layout space, and that they are sent a `'resize'`\n   * message if appropriate.\n   *\n   * The default implementation of this method sends an `UnknownSize`\n   * resize message to all widgets.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    each(this, widget => {\n      MessageLoop.sendMessage(widget, Widget.ResizeMessage.UnknownSize);\n    });\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   *\n   * #### Notes\n   * The layout should ensure that its widgets are resized according\n   * to the available layout space, and that they are sent a `'resize'`\n   * message if appropriate.\n   *\n   * The default implementation of this method sends an `UnknownSize`\n   * resize message to all widgets.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    each(this, widget => {\n      MessageLoop.sendMessage(widget, Widget.ResizeMessage.UnknownSize);\n    });\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message\n   * to all widgets. It assumes all widget nodes are attached to the\n   * parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    each(this, widget => {\n      MessageLoop.sendMessage(widget, msg);\n    });\n  }\n\n  /**\n   * A message handler invoked on an `'after-attach'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message\n   * to all widgets. It assumes all widget nodes are attached to the\n   * parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onAfterAttach(msg: Message): void {\n    each(this, widget => {\n      MessageLoop.sendMessage(widget, msg);\n    });\n  }\n\n  /**\n   * A message handler invoked on a `'before-detach'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message\n   * to all widgets. It assumes all widget nodes are attached to the\n   * parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onBeforeDetach(msg: Message): void {\n    each(this, widget => {\n      MessageLoop.sendMessage(widget, msg);\n    });\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message\n   * to all widgets. It assumes all widget nodes are attached to the\n   * parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onAfterDetach(msg: Message): void {\n    each(this, widget => {\n      MessageLoop.sendMessage(widget, msg);\n    });\n  }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message to\n   * all non-hidden widgets. It assumes all widget nodes are attached\n   * to the parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onBeforeShow(msg: Message): void {\n    each(this, widget => {\n      if (!widget.isHidden) {\n        MessageLoop.sendMessage(widget, msg);\n      }\n    });\n  }\n\n  /**\n   * A message handler invoked on an `'after-show'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message to\n   * all non-hidden widgets. It assumes all widget nodes are attached\n   * to the parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onAfterShow(msg: Message): void {\n    each(this, widget => {\n      if (!widget.isHidden) {\n        MessageLoop.sendMessage(widget, msg);\n      }\n    });\n  }\n\n  /**\n   * A message handler invoked on a `'before-hide'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message to\n   * all non-hidden widgets. It assumes all widget nodes are attached\n   * to the parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onBeforeHide(msg: Message): void {\n    each(this, widget => {\n      if (!widget.isHidden) {\n        MessageLoop.sendMessage(widget, msg);\n      }\n    });\n  }\n\n  /**\n   * A message handler invoked on an `'after-hide'` message.\n   *\n   * #### Notes\n   * The default implementation of this method forwards the message to\n   * all non-hidden widgets. It assumes all widget nodes are attached\n   * to the parent widget node.\n   *\n   * This may be reimplemented by subclasses as needed.\n   */\n  protected onAfterHide(msg: Message): void {\n    each(this, widget => {\n      if (!widget.isHidden) {\n        MessageLoop.sendMessage(widget, msg);\n      }\n    });\n  }\n\n  /**\n   * A message handler invoked on a `'child-removed'` message.\n   *\n   * #### Notes\n   * This will remove the child widget from the layout.\n   *\n   * Subclasses should **not** typically reimplement this method.\n   */\n  protected onChildRemoved(msg: Widget.ChildMessage): void {\n    this.removeWidget(msg.child);\n  }\n\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onFitRequest(msg: Message): void { }\n\n  /**\n   * A message handler invoked on a `'child-shown'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onChildShown(msg: Widget.ChildMessage): void { }\n\n  /**\n   * A message handler invoked on a `'child-hidden'` message.\n   *\n   * #### Notes\n   * The default implementation of this handler is a no-op.\n   */\n  protected onChildHidden(msg: Widget.ChildMessage): void { }\n\n  private _disposed = false;\n  private _fitPolicy: Layout.FitPolicy;\n  private _parent: Widget | null = null;\n}\n\n\n/**\n * The namespace for the `Layout` class statics.\n */\nexport\nnamespace Layout {\n  /**\n   * A type alias for the layout fit policy.\n   *\n   * #### Notes\n   * The fit policy controls the computed size constraints which are\n   * applied to the parent widget by the layout.\n   *\n   * Some layout implementations may ignore the fit policy.\n   */\n  export\n  type FitPolicy = (\n    /**\n     * No size constraint will be applied to the parent widget.\n     */\n    'set-no-constraint' |\n\n    /**\n     * The computed min size will be applied to the parent widget.\n     */\n    'set-min-size'\n  );\n\n  /**\n   * An options object for initializing a layout.\n   */\n  export\n  interface IOptions {\n    /**\n     * The fit policy for the layout.\n     *\n     * The default is `'set-min-size'`.\n     */\n    fitPolicy?: FitPolicy;\n  }\n\n  /**\n   * A type alias for the horizontal alignment of a widget.\n   */\n  export\n  type HorizontalAlignment = 'left' | 'center' | 'right';\n\n  /**\n   * A type alias for the vertical alignment of a widget.\n   */\n  export\n  type VerticalAlignment = 'top' | 'center' | 'bottom';\n\n  /**\n   * Get the horizontal alignment for a widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The horizontal alignment for the widget.\n   *\n   * #### Notes\n   * If the layout width allocated to a widget is larger than its max\n   * width, the horizontal alignment controls how the widget is placed\n   * within the extra horizontal space.\n   *\n   * If the allocated width is less than the widget's max width, the\n   * horizontal alignment has no effect.\n   *\n   * Some layout implementations may ignore horizontal alignment.\n   */\n  export\n  function getHorizontalAlignment(widget: Widget): HorizontalAlignment {\n    return Private.horizontalAlignmentProperty.get(widget);\n  }\n\n  /**\n   * Set the horizontal alignment for a widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the horizontal alignment.\n   *\n   * #### Notes\n   * If the layout width allocated to a widget is larger than its max\n   * width, the horizontal alignment controls how the widget is placed\n   * within the extra horizontal space.\n   *\n   * If the allocated width is less than the widget's max width, the\n   * horizontal alignment has no effect.\n   *\n   * Some layout implementations may ignore horizontal alignment.\n   *\n   * Changing the horizontal alignment will post an `update-request`\n   * message to widget's parent, provided the parent has a layout\n   * installed.\n   */\n  export\n  function setHorizontalAlignment(widget: Widget, value: HorizontalAlignment): void {\n    Private.horizontalAlignmentProperty.set(widget, value);\n  }\n\n  /**\n   * Get the vertical alignment for a widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The vertical alignment for the widget.\n   *\n   * #### Notes\n   * If the layout height allocated to a widget is larger than its max\n   * height, the vertical alignment controls how the widget is placed\n   * within the extra vertical space.\n   *\n   * If the allocated height is less than the widget's max height, the\n   * vertical alignment has no effect.\n   *\n   * Some layout implementations may ignore vertical alignment.\n   */\n  export\n  function getVerticalAlignment(widget: Widget): VerticalAlignment {\n    return Private.verticalAlignmentProperty.get(widget);\n  }\n\n  /**\n   * Set the vertical alignment for a widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the vertical alignment.\n   *\n   * #### Notes\n   * If the layout height allocated to a widget is larger than its max\n   * height, the vertical alignment controls how the widget is placed\n   * within the extra vertical space.\n   *\n   * If the allocated height is less than the widget's max height, the\n   * vertical alignment has no effect.\n   *\n   * Some layout implementations may ignore vertical alignment.\n   *\n   * Changing the horizontal alignment will post an `update-request`\n   * message to widget's parent, provided the parent has a layout\n   * installed.\n   */\n  export\n  function setVerticalAlignment(widget: Widget, value: VerticalAlignment): void {\n    Private.verticalAlignmentProperty.set(widget, value);\n  }\n}\n\n\n/**\n * An object which assists in the absolute layout of widgets.\n *\n * #### Notes\n * This class is useful when implementing a layout which arranges its\n * widgets using absolute positioning.\n *\n * This class is used by nearly all of the built-in lumino layouts.\n */\nexport\nclass LayoutItem implements IDisposable {\n  /**\n   * Construct a new layout item.\n   *\n   * @param widget - The widget to be managed by the item.\n   *\n   * #### Notes\n   * The widget will be set to absolute positioning.\n   */\n  constructor(widget: Widget) {\n    this.widget = widget;\n    this.widget.node.style.position = 'absolute';\n  }\n\n  /**\n   * Dispose of the the layout item.\n   *\n   * #### Notes\n   * This will reset the positioning of the widget.\n   */\n  dispose(): void {\n    // Do nothing if the item is already disposed.\n    if (this._disposed) {\n      return;\n    }\n\n    // Mark the item as disposed.\n    this._disposed = true;\n\n    // Reset the widget style.\n    let style = this.widget.node.style;\n    style.position = '';\n    style.top = '';\n    style.left = '';\n    style.width = '';\n    style.height = '';\n  }\n\n  /**\n   * The widget managed by the layout item.\n   */\n  readonly widget: Widget;\n\n  /**\n   * The computed minimum width of the widget.\n   *\n   * #### Notes\n   * This value can be updated by calling the `fit` method.\n   */\n  get minWidth(): number {\n    return this._minWidth;\n  }\n\n  /**\n   * The computed minimum height of the widget.\n   *\n   * #### Notes\n   * This value can be updated by calling the `fit` method.\n   */\n  get minHeight(): number {\n    return this._minHeight;\n  }\n\n  /**\n   * The computed maximum width of the widget.\n   *\n   * #### Notes\n   * This value can be updated by calling the `fit` method.\n   */\n  get maxWidth(): number {\n    return this._maxWidth;\n  }\n\n  /**\n   * The computed maximum height of the widget.\n   *\n   * #### Notes\n   * This value can be updated by calling the `fit` method.\n   */\n  get maxHeight(): number {\n    return this._maxHeight;\n  }\n\n  /**\n   * Whether the layout item is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._disposed;\n  }\n\n  /**\n   * Whether the managed widget is hidden.\n   */\n  get isHidden(): boolean {\n    return this.widget.isHidden;\n  }\n\n  /**\n   * Whether the managed widget is visible.\n   */\n  get isVisible(): boolean {\n    return this.widget.isVisible;\n  }\n\n  /**\n   * Whether the managed widget is attached.\n   */\n  get isAttached(): boolean {\n    return this.widget.isAttached;\n  }\n\n  /**\n   * Update the computed size limits of the managed widget.\n   */\n  fit(): void {\n    let limits = ElementExt.sizeLimits(this.widget.node);\n    this._minWidth = limits.minWidth;\n    this._minHeight = limits.minHeight;\n    this._maxWidth = limits.maxWidth;\n    this._maxHeight = limits.maxHeight;\n  }\n\n  /**\n   * Update the position and size of the managed widget.\n   *\n   * @param left - The left edge position of the layout box.\n   *\n   * @param top - The top edge position of the layout box.\n   *\n   * @param width - The width of the layout box.\n   *\n   * @param height - The height of the layout box.\n   */\n  update(left: number, top: number, width: number, height: number): void {\n    // Clamp the size to the computed size limits.\n    let clampW = Math.max(this._minWidth, Math.min(width, this._maxWidth));\n    let clampH = Math.max(this._minHeight, Math.min(height, this._maxHeight));\n\n    // Adjust the left edge for the horizontal alignment, if needed.\n    if (clampW < width) {\n      switch (Layout.getHorizontalAlignment(this.widget)) {\n      case 'left':\n        break;\n      case 'center':\n        left += (width - clampW) / 2;\n        break;\n      case 'right':\n        left += width - clampW;\n        break;\n      default:\n        throw 'unreachable';\n      }\n    }\n\n    // Adjust the top edge for the vertical alignment, if needed.\n    if (clampH < height) {\n      switch (Layout.getVerticalAlignment(this.widget)) {\n      case 'top':\n        break;\n      case 'center':\n        top += (height - clampH) / 2;\n        break;\n      case 'bottom':\n        top += height - clampH;\n        break;\n      default:\n        throw 'unreachable';\n      }\n    }\n\n    // Set up the resize variables.\n    let resized = false;\n    let style = this.widget.node.style;\n\n    // Update the top edge of the widget if needed.\n    if (this._top !== top) {\n      this._top = top;\n      style.top = `${top}px`;\n    }\n\n    // Update the left edge of the widget if needed.\n    if (this._left !== left) {\n      this._left = left;\n      style.left = `${left}px`;\n    }\n\n    // Update the width of the widget if needed.\n    if (this._width !== clampW) {\n      resized = true;\n      this._width = clampW;\n      style.width = `${clampW}px`;\n    }\n\n    // Update the height of the widget if needed.\n    if (this._height !== clampH) {\n      resized = true;\n      this._height = clampH;\n      style.height = `${clampH}px`;\n    }\n\n    // Send a resize message to the widget if needed.\n    if (resized) {\n      let msg = new Widget.ResizeMessage(clampW, clampH);\n      MessageLoop.sendMessage(this.widget, msg);\n    }\n  }\n\n  private _top = NaN;\n  private _left = NaN;\n  private _width = NaN;\n  private _height = NaN;\n  private _minWidth = 0;\n  private _minHeight = 0;\n  private _maxWidth = Infinity;\n  private _maxHeight = Infinity;\n  private _disposed = false;\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The attached property for a widget horizontal alignment.\n   */\n  export\n  const horizontalAlignmentProperty = new AttachedProperty<Widget, Layout.HorizontalAlignment>({\n    name: 'horizontalAlignment',\n    create: () => 'center',\n    changed: onAlignmentChanged\n  });\n\n  /**\n   * The attached property for a widget vertical alignment.\n   */\n  export\n  const verticalAlignmentProperty = new AttachedProperty<Widget, Layout.VerticalAlignment>({\n    name: 'verticalAlignment',\n    create: () => 'top',\n    changed: onAlignmentChanged\n  });\n\n  /**\n   * The change handler for the attached alignment properties.\n   */\n  function onAlignmentChanged(child: Widget): void {\n    if (child.parent && child.parent.layout) {\n      child.parent.update();\n    }\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport { VirtualElement } from \"@lumino/virtualdom\";\n\n\n/**\n * An object which holds data related to an object's title.\n *\n * #### Notes\n * A title object is intended to hold the data necessary to display a\n * header for a particular object. A common example is the `TabPanel`,\n * which uses the widget title to populate the tab for a child widget.\n */\nexport\nclass Title<T> {\n  /**\n   * Construct a new title.\n   *\n   * @param options - The options for initializing the title.\n   */\n  constructor(options: Title.IOptions<T>) {\n    this.owner = options.owner;\n    if (options.label !== undefined) {\n      this._label = options.label;\n    }\n    if (options.mnemonic !== undefined) {\n      this._mnemonic = options.mnemonic;\n    }\n    if (options.icon !== undefined) {\n      /* <DEPRECATED> */\n      if (typeof options.icon === \"string\") {\n        // when ._icon is null, the .icon getter will alias .iconClass\n        this._icon = null;\n        this._iconClass = options.icon;\n      } else {\n      /* </DEPRECATED> */\n\n      this._icon = options.icon;\n\n      /* <DEPRECATED> */\n      }\n      /* </DEPRECATED> */\n    }\n\n    /* <DEPRECATED> */\n    else {\n      // if unset, default to aliasing .iconClass\n      this._icon = null;\n    }\n    /* </DEPRECATED> */\n\n    if (options.iconClass !== undefined) {\n      this._iconClass = options.iconClass;\n    }\n    if (options.iconLabel !== undefined) {\n      this._iconLabel = options.iconLabel;\n    }\n    if (options.iconRenderer !== undefined) {\n      this._icon = options.iconRenderer;\n    }\n    if (options.caption !== undefined) {\n      this._caption = options.caption;\n    }\n    if (options.className !== undefined) {\n      this._className = options.className;\n    }\n    if (options.closable !== undefined) {\n      this._closable = options.closable;\n    }\n    this._dataset = options.dataset || {};\n  }\n\n  /**\n   * A signal emitted when the state of the title changes.\n   */\n  get changed(): ISignal<this, void> {\n    return this._changed;\n  }\n\n  /**\n   * The object which owns the title.\n   */\n  readonly owner: T;\n\n  /**\n   * Get the label for the title.\n   *\n   * #### Notes\n   * The default value is an empty string.\n   */\n  get label(): string {\n    return this._label;\n  }\n\n  /**\n   * Set the label for the title.\n   */\n  set label(value: string) {\n    if (this._label === value) {\n      return;\n    }\n    this._label = value;\n    this._changed.emit(undefined);\n  }\n\n  /**\n   * Get the mnemonic index for the title.\n   *\n   * #### Notes\n   * The default value is `-1`.\n   */\n  get mnemonic(): number {\n    return this._mnemonic;\n  }\n\n  /**\n   * Set the mnemonic index for the title.\n   */\n  set mnemonic(value: number) {\n    if (this._mnemonic === value) {\n      return;\n    }\n    this._mnemonic = value;\n    this._changed.emit(undefined);\n  }\n\n  /**\n   * Get the icon renderer for the title.\n   *\n   * #### Notes\n   * The default value is undefined.\n   *\n   * DEPRECATED: if set to a string value, the .icon field will function as\n   * an alias for the .iconClass field, for backwards compatibility\n   */\n  get icon(): VirtualElement.IRenderer| undefined\n  /* <DEPRECATED> */ | string /* </DEPRECATED> */\n  {\n    /* <DEPRECATED> */\n    if (this._icon === null) {\n      // only alias .iconClass if ._icon has been explicitly nulled\n      return this.iconClass\n    }\n    /* </DEPRECATED> */\n\n    return this._icon;\n  }\n\n  /**\n   * Set the icon renderer for the title.\n   *\n   * #### Notes\n   * A renderer is an object that supplies a render and unrender function.\n   *\n   * DEPRECATED: if set to a string value, the .icon field will function as\n   * an alias for the .iconClass field, for backwards compatibility\n   */\n  set icon(value: VirtualElement.IRenderer | undefined\n  /* <DEPRECATED> */ | string /* </DEPRECATED> */\n  ) {\n    /* <DEPRECATED> */\n    if (typeof value === \"string\") {\n      // when ._icon is null, the .icon getter will alias .iconClass\n      this._icon = null;\n      this.iconClass = value;\n    } else {\n    /* </DEPRECATED> */\n\n    if (this._icon === value) {\n      return;\n    }\n    this._icon = value;\n    this._changed.emit(undefined);\n\n    /* <DEPRECATED> */\n    }\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * Get the icon class name for the title.\n   *\n   * #### Notes\n   * The default value is an empty string.\n   */\n  get iconClass(): string {\n    return this._iconClass;\n  }\n\n  /**\n   * Set the icon class name for the title.\n   *\n   * #### Notes\n   * Multiple class names can be separated with whitespace.\n   */\n  set iconClass(value: string) {\n    if (this._iconClass === value) {\n      return;\n    }\n    this._iconClass = value;\n    this._changed.emit(undefined);\n  }\n\n  /**\n   * Get the icon label for the title.\n   *\n   * #### Notes\n   * The default value is an empty string.\n   */\n  get iconLabel(): string {\n    return this._iconLabel;\n  }\n\n  /**\n   * Set the icon label for the title.\n   *\n   * #### Notes\n   * Multiple class names can be separated with whitespace.\n   */\n  set iconLabel(value: string) {\n    if (this._iconLabel === value) {\n      return;\n    }\n    this._iconLabel = value;\n    this._changed.emit(undefined);\n  }\n\n  /**\n   * @deprecated Use `icon` instead.\n   */\n  get iconRenderer(): VirtualElement.IRenderer | undefined {\n    return this._icon || undefined;\n  }\n\n  /**\n   * @deprecated Use `icon` instead.\n   */\n  set iconRenderer(value: VirtualElement.IRenderer | undefined) {\n    this.icon = value;\n  }\n\n  /**\n   * Get the caption for the title.\n   *\n   * #### Notes\n   * The default value is an empty string.\n   */\n  get caption(): string {\n    return this._caption;\n  }\n\n  /**\n   * Set the caption for the title.\n   */\n  set caption(value: string) {\n    if (this._caption === value) {\n      return;\n    }\n    this._caption = value;\n    this._changed.emit(undefined);\n  }\n\n  /**\n   * Get the extra class name for the title.\n   *\n   * #### Notes\n   * The default value is an empty string.\n   */\n  get className(): string {\n    return this._className;\n  }\n\n  /**\n   * Set the extra class name for the title.\n   *\n   * #### Notes\n   * Multiple class names can be separated with whitespace.\n   */\n  set className(value: string) {\n    if (this._className === value) {\n      return;\n    }\n    this._className = value;\n    this._changed.emit(undefined);\n  }\n\n  /**\n   * Get the closable state for the title.\n   *\n   * #### Notes\n   * The default value is `false`.\n   */\n  get closable(): boolean {\n    return this._closable;\n  }\n\n  /**\n   * Set the closable state for the title.\n   *\n   * #### Notes\n   * This controls the presence of a close icon when applicable.\n   */\n  set closable(value: boolean) {\n    if (this._closable === value) {\n      return;\n    }\n    this._closable = value;\n    this._changed.emit(undefined);\n  }\n\n  /**\n   * Get the dataset for the title.\n   *\n   * #### Notes\n   * The default value is an empty dataset.\n   */\n  get dataset(): Title.Dataset {\n    return this._dataset;\n  }\n\n  /**\n   * Set the dataset for the title.\n   *\n   * #### Notes\n   * This controls the data attributes when applicable.\n   */\n  set dataset(value: Title.Dataset) {\n    if (this._dataset === value) {\n      return;\n    }\n    this._dataset = value;\n    this._changed.emit(undefined);\n  }\n\n  private _label = '';\n  private _caption = '';\n  private _mnemonic = -1;\n\n  private _icon: VirtualElement.IRenderer | undefined\n  /* <DEPRECATED> */ | null /* </DEPRECATED> */;\n\n  private _iconClass = '';\n  private _iconLabel = '';\n  private _className = '';\n  private _closable = false;\n  private _dataset: Title.Dataset;\n  private _changed = new Signal<this, void>(this);\n}\n\n\n/**\n * The namespace for the `Title` class statics.\n */\nexport\nnamespace Title {\n  /**\n   * A type alias for a simple immutable string dataset.\n   */\n  export\n  type Dataset = { readonly [key: string]: string };\n\n  /**\n   * An options object for initializing a title.\n   */\n  export\n  interface IOptions<T> {\n    /**\n     * The object which owns the title.\n     */\n    owner: T;\n\n    /**\n     * The label for the title.\n     */\n    label?: string;\n\n    /**\n     * The mnemonic index for the title.\n     */\n    mnemonic?: number;\n\n    /**\n     * The icon renderer for the title.\n     *\n     * DEPRECATED: if set to a string value, the .icon field will function as\n     * an alias for the .iconClass field, for backwards compatibility\n     */\n    icon?: VirtualElement.IRenderer | string;\n\n    /**\n     * The icon class name for the title.\n     */\n    iconClass?: string;\n\n    /**\n     * The icon label for the title.\n     */\n    iconLabel?: string;\n\n    /**\n     * @deprecated Use `icon` instead.\n     */\n    iconRenderer?: VirtualElement.IRenderer;\n\n    /**\n     * The caption for the title.\n     */\n    caption?: string;\n\n    /**\n     * The extra class name for the title.\n     */\n    className?: string;\n\n    /**\n     * The closable state for the title.\n     */\n    closable?: boolean;\n\n    /**\n     * The dataset for the title.\n     */\n    dataset?: Dataset;\n  }\n}\n","export namespace Utils {\n  /**\n   * Clamp a dimension value to an integer >= 0.\n   */\n  export function clampDimension(value: number): number {\n    return Math.max(0, Math.floor(value));\n  }\n}\n\nexport default Utils\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, IIterator, each, iter\n} from '@lumino/algorithm';\n\nimport {\n  MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  Layout\n} from './layout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A concrete layout implementation suitable for many use cases.\n *\n * #### Notes\n * This class is suitable as a base class for implementing a variety of\n * layouts, but can also be used directly with standard CSS to layout a\n * collection of widgets.\n */\nexport\nclass PanelLayout extends Layout {\n  /**\n   * Dispose of the resources held by the layout.\n   *\n   * #### Notes\n   * This will clear and dispose all widgets in the layout.\n   *\n   * All reimplementations should call the superclass method.\n   *\n   * This method is called automatically when the parent is disposed.\n   */\n  dispose(): void {\n    while (this._widgets.length > 0) {\n      this._widgets.pop()!.dispose();\n    }\n    super.dispose();\n  }\n\n  /**\n   * A read-only array of the widgets in the layout.\n   */\n  get widgets(): ReadonlyArray<Widget> {\n    return this._widgets;\n  }\n\n  /**\n   * Create an iterator over the widgets in the layout.\n   *\n   * @returns A new iterator over the widgets in the layout.\n   */\n  iter(): IIterator<Widget> {\n    return iter(this._widgets);\n  }\n\n  /**\n   * Add a widget to the end of the layout.\n   *\n   * @param widget - The widget to add to the layout.\n   *\n   * #### Notes\n   * If the widget is already contained in the layout, it will be moved.\n   */\n  addWidget(widget: Widget): void {\n    this.insertWidget(this._widgets.length, widget);\n  }\n\n  /**\n   * Insert a widget into the layout at the specified index.\n   *\n   * @param index - The index at which to insert the widget.\n   *\n   * @param widget - The widget to insert into the layout.\n   *\n   * #### Notes\n   * The index will be clamped to the bounds of the widgets.\n   *\n   * If the widget is already added to the layout, it will be moved.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral.\n   */\n  insertWidget(index: number, widget: Widget): void {\n    // Remove the widget from its current parent. This is a no-op\n    // if the widget's parent is already the layout parent widget.\n    widget.parent = this.parent;\n\n    // Look up the current index of the widget.\n    let i = this._widgets.indexOf(widget);\n\n    // Clamp the insert index to the array bounds.\n    let j = Math.max(0, Math.min(index, this._widgets.length));\n\n    // If the widget is not in the array, insert it.\n    if (i === -1) {\n      // Insert the widget into the array.\n      ArrayExt.insert(this._widgets, j, widget);\n\n      // If the layout is parented, attach the widget to the DOM.\n      if (this.parent) {\n        this.attachWidget(j, widget);\n      }\n\n      // There is nothing more to do.\n      return;\n    }\n\n    // Otherwise, the widget exists in the array and should be moved.\n\n    // Adjust the index if the location is at the end of the array.\n    if (j === this._widgets.length) {\n      j--;\n    }\n\n    // Bail if there is no effective move.\n    if (i === j) {\n      return;\n    }\n\n    // Move the widget to the new location.\n    ArrayExt.move(this._widgets, i, j);\n\n    // If the layout is parented, move the widget in the DOM.\n    if (this.parent) {\n      this.moveWidget(i, j, widget);\n    }\n  }\n\n  /**\n   * Remove a widget from the layout.\n   *\n   * @param widget - The widget to remove from the layout.\n   *\n   * #### Notes\n   * A widget is automatically removed from the layout when its `parent`\n   * is set to `null`. This method should only be invoked directly when\n   * removing a widget from a layout which has yet to be installed on a\n   * parent widget.\n   *\n   * This method does *not* modify the widget's `parent`.\n   */\n  removeWidget(widget: Widget): void {\n    this.removeWidgetAt(this._widgets.indexOf(widget));\n  }\n\n  /**\n   * Remove the widget at a given index from the layout.\n   *\n   * @param index - The index of the widget to remove.\n   *\n   * #### Notes\n   * A widget is automatically removed from the layout when its `parent`\n   * is set to `null`. This method should only be invoked directly when\n   * removing a widget from a layout which has yet to be installed on a\n   * parent widget.\n   *\n   * This method does *not* modify the widget's `parent`.\n   *\n   * #### Undefined Behavior\n   * An `index` which is non-integral.\n   */\n  removeWidgetAt(index: number): void {\n    // Remove the widget from the array.\n    let widget = ArrayExt.removeAt(this._widgets, index);\n\n    // If the layout is parented, detach the widget from the DOM.\n    if (widget && this.parent) {\n      this.detachWidget(index, widget);\n    }\n  }\n\n  /**\n   * Perform layout initialization which requires the parent widget.\n   */\n  protected init(): void {\n    super.init();\n    each(this, (widget, index) => {\n      this.attachWidget(index, widget);\n    });\n  }\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param index - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to attach to the parent.\n   *\n   * #### Notes\n   * This method is called automatically by the panel layout at the\n   * appropriate time. It should not be called directly by user code.\n   *\n   * The default implementation adds the widgets's node to the parent's\n   * node at the proper location, and sends the appropriate attach\n   * messages to the widget if the parent is attached to the DOM.\n   *\n   * Subclasses may reimplement this method to control how the widget's\n   * node is added to the parent's node.\n   */\n  protected attachWidget(index: number, widget: Widget): void {\n    // Look up the next sibling reference node.\n    let ref = this.parent!.node.children[index];\n\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Insert the widget's node before the sibling.\n    this.parent!.node.insertBefore(widget.node, ref);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n  }\n\n  /**\n   * Move a widget in the parent's DOM node.\n   *\n   * @param fromIndex - The previous index of the widget in the layout.\n   *\n   * @param toIndex - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to move in the parent.\n   *\n   * #### Notes\n   * This method is called automatically by the panel layout at the\n   * appropriate time. It should not be called directly by user code.\n   *\n   * The default implementation moves the widget's node to the proper\n   * location in the parent's node and sends the appropriate attach and\n   * detach messages to the widget if the parent is attached to the DOM.\n   *\n   * Subclasses may reimplement this method to control how the widget's\n   * node is moved in the parent's node.\n   */\n  protected moveWidget(fromIndex: number, toIndex: number, widget: Widget): void {\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget's node from the parent.\n    this.parent!.node.removeChild(widget.node);\n\n    // Send an `'after-detach'` and  message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n\n    // Look up the next sibling reference node.\n    let ref = this.parent!.node.children[toIndex];\n\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Insert the widget's node before the sibling.\n    this.parent!.node.insertBefore(widget.node, ref);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param index - The previous index of the widget in the layout.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This method is called automatically by the panel layout at the\n   * appropriate time. It should not be called directly by user code.\n   *\n   * The default implementation removes the widget's node from the\n   * parent's node, and sends the appropriate detach messages to the\n   * widget if the parent is attached to the DOM.\n   *\n   * Subclasses may reimplement this method to control how the widget's\n   * node is removed from the parent's node.\n   */\n  protected detachWidget(index: number, widget: Widget): void {\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget's node from the parent.\n    this.parent!.node.removeChild(widget.node);\n\n    // Send an `'after-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n  }\n\n  private _widgets: Widget[] = [];\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { ArrayExt, each } from '@lumino/algorithm';\n\nimport { ElementExt } from '@lumino/domutils';\n\nimport { Message, MessageLoop } from '@lumino/messaging';\n\nimport { AttachedProperty } from '@lumino/properties';\n\nimport { BoxEngine, BoxSizer } from './boxengine';\n\nimport { LayoutItem } from './layout';\n\nimport { PanelLayout } from './panellayout';\n\nimport { Utils } from './utils';\n\nimport { Widget } from './widget';\n\n/**\n * A layout which arranges its widgets into resizable sections.\n */\nexport class SplitLayout extends PanelLayout {\n  /**\n   * Construct a new split layout.\n   *\n   * @param options - The options for initializing the layout.\n   */\n  constructor(options: SplitLayout.IOptions) {\n    super();\n    this.renderer = options.renderer;\n    if (options.orientation !== undefined) {\n      this._orientation = options.orientation;\n    }\n    if (options.alignment !== undefined) {\n      this._alignment = options.alignment;\n    }\n    if (options.spacing !== undefined) {\n      this._spacing = Utils.clampDimension(options.spacing);\n    }\n  }\n\n  /**\n   * Dispose of the resources held by the layout.\n   */\n  dispose(): void {\n    // Dispose of the layout items.\n    each(this._items, (item) => {\n      item.dispose();\n    });\n\n    // Clear the layout state.\n    this._box = null;\n    this._items.length = 0;\n    this._sizers.length = 0;\n    this._handles.length = 0;\n\n    // Dispose of the rest of the layout.\n    super.dispose();\n  }\n\n  /**\n   * The renderer used by the split layout.\n   */\n  readonly renderer: SplitLayout.IRenderer;\n\n  /**\n   * Get the layout orientation for the split layout.\n   */\n  get orientation(): SplitLayout.Orientation {\n    return this._orientation;\n  }\n\n  /**\n   * Set the layout orientation for the split layout.\n   */\n  set orientation(value: SplitLayout.Orientation) {\n    if (this._orientation === value) {\n      return;\n    }\n    this._orientation = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.dataset['orientation'] = value;\n    this.parent.fit();\n  }\n\n  /**\n   * Get the content alignment for the split layout.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand  to fill the\n   * entire split layout.\n   */\n  get alignment(): SplitLayout.Alignment {\n    return this._alignment;\n  }\n\n  /**\n   * Set the content alignment for the split layout.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand  to fill the\n   * entire split layout.\n   */\n  set alignment(value: SplitLayout.Alignment) {\n    if (this._alignment === value) {\n      return;\n    }\n    this._alignment = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.dataset['alignment'] = value;\n    this.parent.update();\n  }\n\n  /**\n   * Get the inter-element spacing for the split layout.\n   */\n  get spacing(): number {\n    return this._spacing;\n  }\n\n  /**\n   * Set the inter-element spacing for the split layout.\n   */\n  set spacing(value: number) {\n    value = Utils.clampDimension(value);\n    if (this._spacing === value) {\n      return;\n    }\n    this._spacing = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.fit();\n  }\n\n  /**\n   * A read-only array of the split handles in the layout.\n   */\n  get handles(): ReadonlyArray<HTMLDivElement> {\n    return this._handles;\n  }\n\n  /**\n   * Get the relative sizes of the widgets in the layout.\n   *\n   * @returns A new array of the relative sizes of the widgets.\n   *\n   * #### Notes\n   * The returned sizes reflect the sizes of the widgets normalized\n   * relative to their siblings.\n   *\n   * This method **does not** measure the DOM nodes.\n   */\n  relativeSizes(): number[] {\n    return Private.normalize(this._sizers.map((sizer) => sizer.size));\n  }\n\n  /**\n   * Set the relative sizes for the widgets in the layout.\n   *\n   * @param sizes - The relative sizes for the widgets in the panel.\n   *\n   * #### Notes\n   * Extra values are ignored, too few will yield an undefined layout.\n   *\n   * The actual geometry of the DOM nodes is updated asynchronously.\n   */\n  setRelativeSizes(sizes: number[]): void {\n    // Copy the sizes and pad with zeros as needed.\n    let n = this._sizers.length;\n    let temp = sizes.slice(0, n);\n    while (temp.length < n) {\n      temp.push(0);\n    }\n\n    // Normalize the padded sizes.\n    let normed = Private.normalize(temp);\n\n    // Apply the normalized sizes to the sizers.\n    for (let i = 0; i < n; ++i) {\n      let sizer = this._sizers[i];\n      sizer.sizeHint = normed[i];\n      sizer.size = normed[i];\n    }\n\n    // Set the flag indicating the sizes are normalized.\n    this._hasNormedSizes = true;\n\n    // Trigger an update of the parent widget.\n    if (this.parent) {\n      this.parent.update();\n    }\n  }\n\n  /**\n   * Move the offset position of a split handle.\n   *\n   * @param index - The index of the handle of the interest.\n   *\n   * @param position - The desired offset position of the handle.\n   *\n   * #### Notes\n   * The position is relative to the offset parent.\n   *\n   * This will move the handle as close as possible to the desired\n   * position. The sibling widgets will be adjusted as necessary.\n   */\n  moveHandle(index: number, position: number): void {\n    // Bail if the index is invalid or the handle is hidden.\n    let handle = this._handles[index];\n    if (!handle || handle.classList.contains('lm-mod-hidden')) {\n      return;\n    }\n\n    // Compute the desired delta movement for the handle.\n    let delta: number;\n    if (this._orientation === 'horizontal') {\n      delta = position - handle.offsetLeft;\n    } else {\n      delta = position - handle.offsetTop;\n    }\n\n    // Bail if there is no handle movement.\n    if (delta === 0) {\n      return;\n    }\n\n    // Prevent widget resizing unless needed.\n    for (let sizer of this._sizers) {\n      if (sizer.size > 0) {\n        sizer.sizeHint = sizer.size;\n      }\n    }\n\n    // Adjust the sizers to reflect the handle movement.\n    BoxEngine.adjust(this._sizers, index, delta);\n\n    // Update the layout of the widgets.\n    if (this.parent) {\n      this.parent.update();\n    }\n  }\n\n  /**\n   * Perform layout initialization which requires the parent widget.\n   */\n  protected init(): void {\n    this.parent!.dataset['orientation'] = this.orientation;\n    this.parent!.dataset['alignment'] = this.alignment;\n    super.init();\n  }\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param index - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to attach to the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected attachWidget(index: number, widget: Widget): void {\n    // Create the item, handle, and sizer for the new widget.\n    let item = new LayoutItem(widget);\n    let handle = Private.createHandle(this.renderer);\n    let average = Private.averageSize(this._sizers);\n    let sizer = Private.createSizer(average);\n\n    // Insert the item, handle, and sizer into the internal arrays.\n    ArrayExt.insert(this._items, index, item);\n    ArrayExt.insert(this._sizers, index, sizer);\n    ArrayExt.insert(this._handles, index, handle);\n\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Add the widget and handle nodes to the parent.\n    this.parent!.node.appendChild(widget.node);\n    this.parent!.node.appendChild(handle);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * Move a widget in the parent's DOM node.\n   *\n   * @param fromIndex - The previous index of the widget in the layout.\n   *\n   * @param toIndex - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to move in the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected moveWidget(\n    fromIndex: number,\n    toIndex: number,\n    widget: Widget\n  ): void {\n    // Move the item, sizer, and handle for the widget.\n    ArrayExt.move(this._items, fromIndex, toIndex);\n    ArrayExt.move(this._sizers, fromIndex, toIndex);\n    ArrayExt.move(this._handles, fromIndex, toIndex);\n\n    // Post a fit request to the parent to show/hide last handle.\n    this.parent!.fit();\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param index - The previous index of the widget in the layout.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected detachWidget(index: number, widget: Widget): void {\n    // Remove the item, handle, and sizer for the widget.\n    let item = ArrayExt.removeAt(this._items, index);\n    let handle = ArrayExt.removeAt(this._handles, index);\n    ArrayExt.removeAt(this._sizers, index);\n\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget and handle nodes from the parent.\n    this.parent!.node.removeChild(widget.node);\n    this.parent!.node.removeChild(handle!);\n\n    // Send an `'after-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n\n    // Dispose of the layout item.\n    item!.dispose();\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   */\n  protected onBeforeShow(msg: Message): void {\n    super.onBeforeShow(msg);\n    this.parent!.update();\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    super.onBeforeAttach(msg);\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-shown'` message.\n   */\n  protected onChildShown(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-hidden'` message.\n   */\n  protected onChildHidden(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    if (this.parent!.isVisible) {\n      this._update(msg.width, msg.height);\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    if (this.parent!.isVisible) {\n      this._update(-1, -1);\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   */\n  protected onFitRequest(msg: Message): void {\n    if (this.parent!.isAttached) {\n      this._fit();\n    }\n  }\n\n  /**\n   * Update the item position.\n   * \n   * @param i Item index\n   * @param isHorizontal Whether the layout is horizontal or not\n   * @param left Left position in pixels\n   * @param top Top position in pixels\n   * @param height Item height\n   * @param width Item width\n   * @param size Item size\n   */\n  protected updateItemPosition(\n    i: number,\n    isHorizontal: boolean,\n    left: number,\n    top: number,\n    height: number,\n    width: number,\n    size: number\n  ): void {\n    const item = this._items[i];\n    if (item.isHidden) {\n      return;\n    }\n\n    // Fetch the style for the handle.\n    let handleStyle = this._handles[i].style;\n\n    // Update the widget and handle, and advance the relevant edge.\n    if (isHorizontal) {\n      left += this.widgetOffset;\n      item.update(left, top, size, height);\n      left += size;\n      handleStyle.top = `${top}px`;\n      handleStyle.left = `${left}px`;\n      handleStyle.width = `${this._spacing}px`;\n      handleStyle.height = `${height}px`;\n    } else {\n      top += this.widgetOffset;\n      item.update(left, top, width, size);\n      top += size;\n      handleStyle.top = `${top}px`;\n      handleStyle.left = `${left}px`;\n      handleStyle.width = `${width}px`;\n      handleStyle.height = `${this._spacing}px`;\n    }\n  }\n\n  /**\n   * Fit the layout to the total size required by the widgets.\n   */\n  private _fit(): void {\n    // Update the handles and track the visible widget count.\n    let nVisible = 0;\n    let lastHandleIndex = -1;\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      if (this._items[i].isHidden) {\n        this._handles[i].classList.add('lm-mod-hidden');\n        /* <DEPRECATED> */\n        this._handles[i].classList.add('p-mod-hidden');\n        /* </DEPRECATED> */\n      } else {\n        this._handles[i].classList.remove('lm-mod-hidden');\n        /* <DEPRECATED> */\n        this._handles[i].classList.remove('p-mod-hidden');\n        /* </DEPRECATED> */\n        lastHandleIndex = i;\n        nVisible++;\n      }\n    }\n\n    // Hide the handle for the last visible widget.\n    if (lastHandleIndex !== -1) {\n      this._handles[lastHandleIndex].classList.add('lm-mod-hidden');\n      /* <DEPRECATED> */\n      this._handles[lastHandleIndex].classList.add('p-mod-hidden');\n      /* </DEPRECATED> */\n    }\n\n    // Update the fixed space for the visible items.\n    this._fixed =\n      this._spacing * Math.max(0, nVisible - 1) +\n      this.widgetOffset * this._items.length;\n\n    // Setup the computed minimum size.\n    let horz = this._orientation === 'horizontal';\n    let minW = horz ? this._fixed : 0;\n    let minH = horz ? 0 : this._fixed;\n\n    // Update the sizers and computed size limits.\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      // Fetch the item and corresponding box sizer.\n      let item = this._items[i];\n      let sizer = this._sizers[i];\n\n      // Prevent resizing unless necessary.\n      if (sizer.size > 0) {\n        sizer.sizeHint = sizer.size;\n      }\n\n      // If the item is hidden, it should consume zero size.\n      if (item.isHidden) {\n        sizer.minSize = 0;\n        sizer.maxSize = 0;\n        continue;\n      }\n\n      // Update the size limits for the item.\n      item.fit();\n\n      // Update the stretch factor.\n      sizer.stretch = SplitLayout.getStretch(item.widget);\n\n      // Update the sizer limits and computed min size.\n      if (horz) {\n        sizer.minSize = item.minWidth;\n        sizer.maxSize = item.maxWidth;\n        minW += item.minWidth;\n        minH = Math.max(minH, item.minHeight);\n      } else {\n        sizer.minSize = item.minHeight;\n        sizer.maxSize = item.maxHeight;\n        minH += item.minHeight;\n        minW = Math.max(minW, item.minWidth);\n      }\n    }\n\n    // Update the box sizing and add it to the computed min size.\n    let box = (this._box = ElementExt.boxSizing(this.parent!.node));\n    minW += box.horizontalSum;\n    minH += box.verticalSum;\n\n    // Update the parent's min size constraints.\n    let style = this.parent!.node.style;\n    style.minWidth = `${minW}px`;\n    style.minHeight = `${minH}px`;\n\n    // Set the dirty flag to ensure only a single update occurs.\n    this._dirty = true;\n\n    // Notify the ancestor that it should fit immediately. This may\n    // cause a resize of the parent, fulfilling the required update.\n    if (this.parent!.parent) {\n      MessageLoop.sendMessage(this.parent!.parent!, Widget.Msg.FitRequest);\n    }\n\n    // If the dirty flag is still set, the parent was not resized.\n    // Trigger the required update on the parent widget immediately.\n    if (this._dirty) {\n      MessageLoop.sendMessage(this.parent!, Widget.Msg.UpdateRequest);\n    }\n  }\n\n  /**\n   * Update the layout position and size of the widgets.\n   *\n   * The parent offset dimensions should be `-1` if unknown.\n   */\n  private _update(offsetWidth: number, offsetHeight: number): void {\n    // Clear the dirty flag to indicate the update occurred.\n    this._dirty = false;\n\n    // Compute the visible item count.\n    let nVisible = 0;\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      nVisible += +!this._items[i].isHidden;\n    }\n\n    // Bail early if there are no visible items to layout.\n    if (nVisible === 0 && this.widgetOffset === 0) {\n      return;\n    }\n\n    // Measure the parent if the offset dimensions are unknown.\n    if (offsetWidth < 0) {\n      offsetWidth = this.parent!.node.offsetWidth;\n    }\n    if (offsetHeight < 0) {\n      offsetHeight = this.parent!.node.offsetHeight;\n    }\n\n    // Ensure the parent box sizing data is computed.\n    if (!this._box) {\n      this._box = ElementExt.boxSizing(this.parent!.node);\n    }\n\n    // Compute the actual layout bounds adjusted for border and padding.\n    let top = this._box.paddingTop;\n    let left = this._box.paddingLeft;\n    let width = offsetWidth - this._box.horizontalSum;\n    let height = offsetHeight - this._box.verticalSum;\n\n    // Set up the variables for justification and alignment offset.\n    let extra = 0;\n    let offset = 0;\n    let horz = this._orientation === 'horizontal';\n\n    if (nVisible > 0) {\n      // Compute the adjusted layout space.\n      let space: number;\n      if (horz) {\n        // left += this.widgetOffset;\n        space = Math.max(0, width - this._fixed);\n      } else {\n        // top += this.widgetOffset;\n        space = Math.max(0, height - this._fixed);\n      }\n\n      // Scale the size hints if they are normalized.\n      if (this._hasNormedSizes) {\n        for (let sizer of this._sizers) {\n          sizer.sizeHint *= space;\n        }\n        this._hasNormedSizes = false;\n      }\n\n      // Distribute the layout space to the box sizers.\n      let delta = BoxEngine.calc(this._sizers, space);\n\n      // Account for alignment if there is extra layout space.\n      if (delta > 0) {\n        switch (this._alignment) {\n          case 'start':\n            break;\n          case 'center':\n            extra = 0;\n            offset = delta / 2;\n            break;\n          case 'end':\n            extra = 0;\n            offset = delta;\n            break;\n          case 'justify':\n            extra = delta / nVisible;\n            offset = 0;\n            break;\n          default:\n            throw 'unreachable';\n        }\n      }\n    }\n\n    // Layout the items using the computed box sizes.\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      // Fetch the item.\n      const item = this._items[i];\n\n      // Fetch the computed size for the widget.\n      const size = item.isHidden ? 0 : this._sizers[i].size + extra;\n\n      this.updateItemPosition(\n        i,\n        horz,\n        horz ? left + offset : left,\n        horz ? top : top + offset,\n        height,\n        width,\n        size\n      );\n\n      const fullOffset =\n        this.widgetOffset +\n        (this._handles[i].classList.contains('lm-mod-hidden')\n          ? 0\n          : this._spacing);\n\n      if (horz) {\n        left += size + fullOffset;\n      } else {\n        top += size + fullOffset;\n      }\n    }\n  }\n\n  protected widgetOffset = 0;\n  private _fixed = 0;\n  private _spacing = 4;\n  private _dirty = false;\n  private _hasNormedSizes = false;\n  private _sizers: BoxSizer[] = [];\n  private _items: LayoutItem[] = [];\n  private _handles: HTMLDivElement[] = [];\n  private _box: ElementExt.IBoxSizing | null = null;\n  private _alignment: SplitLayout.Alignment = 'start';\n  private _orientation: SplitLayout.Orientation = 'horizontal';\n}\n\n/**\n * The namespace for the `SplitLayout` class statics.\n */\nexport namespace SplitLayout {\n  /**\n   * A type alias for a split layout orientation.\n   */\n  export type Orientation = 'horizontal' | 'vertical';\n\n  /**\n   * A type alias for a split layout alignment.\n   */\n  export type Alignment = 'start' | 'center' | 'end' | 'justify';\n\n  /**\n   * An options object for initializing a split layout.\n   */\n  export interface IOptions {\n    /**\n     * The renderer to use for the split layout.\n     */\n    renderer: IRenderer;\n\n    /**\n     * The orientation of the layout.\n     *\n     * The default is `'horizontal'`.\n     */\n    orientation?: Orientation;\n\n    /**\n     * The content alignment of the layout.\n     *\n     * The default is `'start'`.\n     */\n    alignment?: Alignment;\n\n    /**\n     * The spacing between items in the layout.\n     *\n     * The default is `4`.\n     */\n    spacing?: number;\n  }\n\n  /**\n   * A renderer for use with a split layout.\n   */\n  export interface IRenderer {\n    /**\n     * Create a new handle for use with a split layout.\n     *\n     * @returns A new handle element.\n     */\n    createHandle(): HTMLDivElement;\n  }\n\n  /**\n   * Get the split layout stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The split layout stretch factor for the widget.\n   */\n  export function getStretch(widget: Widget): number {\n    return Private.stretchProperty.get(widget);\n  }\n\n  /**\n   * Set the split layout stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the stretch factor.\n   */\n  export function setStretch(widget: Widget, value: number): void {\n    Private.stretchProperty.set(widget, value);\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The property descriptor for a widget stretch factor.\n   */\n  export const stretchProperty = new AttachedProperty<Widget, number>({\n    name: 'stretch',\n    create: () => 0,\n    coerce: (owner, value) => Math.max(0, Math.floor(value)),\n    changed: onChildSizingChanged,\n  });\n\n  /**\n   * Create a new box sizer with the given size hint.\n   */\n  export function createSizer(size: number): BoxSizer {\n    let sizer = new BoxSizer();\n    sizer.sizeHint = Math.floor(size);\n    return sizer;\n  }\n\n  /**\n   * Create a new split handle node using the given renderer.\n   */\n  export function createHandle(\n    renderer: SplitLayout.IRenderer\n  ): HTMLDivElement {\n    let handle = renderer.createHandle();\n    handle.style.position = 'absolute';\n    return handle;\n  }\n\n  /**\n   * Compute the average size of an array of box sizers.\n   */\n  export function averageSize(sizers: BoxSizer[]): number {\n    return sizers.reduce((v, s) => v + s.size, 0) / sizers.length || 0;\n  }\n\n  /**\n   * Normalize an array of values.\n   */\n  export function normalize(values: number[]): number[] {\n    let n = values.length;\n    if (n === 0) {\n      return [];\n    }\n    let sum = values.reduce((a, b) => a + Math.abs(b), 0);\n    return sum === 0 ? values.map((v) => 1 / n) : values.map((v) => v / sum);\n  }\n\n  /**\n   * The change handler for the attached sizing properties.\n   */\n  function onChildSizingChanged(child: Widget): void {\n    if (child.parent && child.parent.layout instanceof SplitLayout) {\n      child.parent.fit();\n    }\n  }\n}\n","import { ArrayExt } from '@lumino/algorithm';\nimport { SplitLayout } from './splitlayout';\nimport { Title } from './title';\nimport Utils from './utils';\nimport { Widget } from './widget';\n\n/**\n * A layout which arranges its widgets into collapsible resizable sections.\n */\nexport class AccordionLayout extends SplitLayout {\n  /**\n   * Construct a new accordion layout.\n   *\n   * @param options - The options for initializing the layout.\n   *\n   * #### Notes\n   * The default orientation will be vertical.\n   *\n   * Titles must be rotated for horizontal accordion panel using CSS: see accordionpanel.css\n   */\n  constructor(options: AccordionLayout.IOptions) {\n    super({ ...options, orientation: options.orientation || 'vertical' });\n    this.titleSpace = options.titleSpace || 22;\n  }\n\n  /**\n   * The section title height or width depending on the orientation.\n   */\n  get titleSpace(): number {\n    return this.widgetOffset;\n  }\n  set titleSpace(value: number) {\n    value = Utils.clampDimension(value);\n    if (this.widgetOffset === value) {\n      return;\n    }\n    this.widgetOffset = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.fit();\n  }\n\n  /**\n   * A read-only array of the section titles in the panel.\n   */\n  get titles(): ReadonlyArray<HTMLElement> {\n    return this._titles;\n  }\n\n  /**\n   * Dispose of the resources held by the layout.\n   */\n  dispose(): void {\n    if (this.isDisposed) {\n      return;\n    }\n\n    // Clear the layout state.\n    this._titles.length = 0;\n\n    // Dispose of the rest of the layout.\n    super.dispose();\n  }\n\n  /**\n   * The renderer used by the accordion layout.\n   */\n  readonly renderer: AccordionLayout.IRenderer;\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param index - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to attach to the parent.\n   */\n  protected attachWidget(index: number, widget: Widget): void {\n    const title = Private.createTitle(this.renderer, widget.title);\n    title.style.position = 'absolute';\n    title.setAttribute('aria-label', `${widget.title.label} Section`);\n    title.setAttribute('aria-expanded', 'true');\n    title.setAttribute('aria-controls', widget.id);\n    title.classList.add('lm-mod-expanded');\n\n    ArrayExt.insert(this._titles, index, title);\n\n    // Add the title node to the parent before the widget.\n    this.parent!.node.appendChild(title);\n\n    widget.node.setAttribute('role', 'region');\n    widget.node.setAttribute('aria-labelledby', title.id);\n\n    super.attachWidget(index, widget);\n  }\n\n  /**\n   * Move a widget in the parent's DOM node.\n   *\n   * @param fromIndex - The previous index of the widget in the layout.\n   *\n   * @param toIndex - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to move in the parent.\n   */\n  protected moveWidget(\n    fromIndex: number,\n    toIndex: number,\n    widget: Widget\n  ): void {\n    ArrayExt.move(this._titles, fromIndex, toIndex);\n    super.moveWidget(fromIndex, toIndex, widget);\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param index - The previous index of the widget in the layout.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected detachWidget(index: number, widget: Widget): void {\n    const title = ArrayExt.removeAt(this._titles, index);\n\n    this.parent!.node.removeChild(title!);\n\n    super.detachWidget(index, widget);\n  }\n\n  /**\n   * Update the item position.\n   *\n   * @param i Item index\n   * @param isHorizontal Whether the layout is horizontal or not\n   * @param left Left position in pixels\n   * @param top Top position in pixels\n   * @param height Item height\n   * @param width Item width\n   * @param size Item size\n   */\n  protected updateItemPosition(\n    i: number,\n    isHorizontal: boolean,\n    left: number,\n    top: number,\n    height: number,\n    width: number,\n    size: number\n  ): void {\n    const titleStyle = this._titles[i].style;\n\n    // Titles must be rotated for horizontal accordion panel using CSS: see accordionpanel.css\n    titleStyle.top = `${top}px`;\n    titleStyle.left = `${left}px`;\n    titleStyle.height = `${this.widgetOffset}px`;\n    if (isHorizontal) {\n      titleStyle.width = `${height}px`;\n    } else {\n      titleStyle.width = `${width}px`;\n    }\n\n    super.updateItemPosition(i, isHorizontal, left, top, height, width, size);\n  }\n\n  private _titles: HTMLElement[] = [];\n}\n\nexport namespace AccordionLayout {\n  /**\n   * A type alias for a accordion layout orientation.\n   */\n  export type Orientation = SplitLayout.Orientation;\n\n  /**\n   * A type alias for a accordion layout alignment.\n   */\n  export type Alignment = SplitLayout.Alignment;\n\n  /**\n   * An options object for initializing a accordion layout.\n   */\n  export interface IOptions extends SplitLayout.IOptions {\n    /**\n     * The renderer to use for the accordion layout.\n     */\n    renderer: IRenderer;\n\n    /**\n     * The section title height or width depending on the orientation.\n     *\n     * The default is `22`.\n     */\n    titleSpace?: number;\n  }\n\n  /**\n   * A renderer for use with an accordion layout.\n   */\n  export interface IRenderer extends SplitLayout.IRenderer {\n    /**\n     * Common class name for all accordion titles.\n     */\n    readonly titleClassName: string;\n\n    /**\n     * Render the element for a section title.\n     *\n     * @param data - The data to use for rendering the section title.\n     *\n     * @returns A element representing the section title.\n     */\n    createSectionTitle(title: Title<Widget>): HTMLElement;\n  }\n}\n\nnamespace Private {\n  /**\n   * Create the title HTML element.\n   *\n   * @param renderer Accordion renderer\n   * @param data Widget title\n   * @returns Title HTML element\n   */\n  export function createTitle(\n    renderer: AccordionLayout.IRenderer,\n    data: Title<Widget>\n  ): HTMLElement {\n    return renderer.createSectionTitle(data);\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  PanelLayout\n} from './panellayout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A simple and convenient panel widget class.\n *\n * #### Notes\n * This class is suitable as a base class for implementing a variety of\n * convenience panel widgets, but can also be used directly with CSS to\n * arrange a collection of widgets.\n *\n * This class provides a convenience wrapper around a [[PanelLayout]].\n */\nexport\nclass Panel extends Widget {\n  /**\n   * Construct a new panel.\n   *\n   * @param options - The options for initializing the panel.\n   */\n  constructor(options: Panel.IOptions = {}) {\n    super();\n    this.addClass('lm-Panel');\n    /* <DEPRECATED> */\n    this.addClass('p-Panel');\n    /* </DEPRECATED> */\n    this.layout = Private.createLayout(options);\n  }\n\n  /**\n   * A read-only array of the widgets in the panel.\n   */\n  get widgets(): ReadonlyArray<Widget> {\n    return (this.layout as PanelLayout).widgets;\n  }\n\n  /**\n   * Add a widget to the end of the panel.\n   *\n   * @param widget - The widget to add to the panel.\n   *\n   * #### Notes\n   * If the widget is already contained in the panel, it will be moved.\n   */\n  addWidget(widget: Widget): void {\n    (this.layout as PanelLayout).addWidget(widget);\n  }\n\n  /**\n   * Insert a widget at the specified index.\n   *\n   * @param index - The index at which to insert the widget.\n   *\n   * @param widget - The widget to insert into to the panel.\n   *\n   * #### Notes\n   * If the widget is already contained in the panel, it will be moved.\n   */\n  insertWidget(index: number, widget: Widget): void {\n    (this.layout as PanelLayout).insertWidget(index, widget);\n  }\n}\n\n\n/**\n * The namespace for the `Panel` class statics.\n */\nexport\nnamespace Panel {\n  /**\n   * An options object for creating a panel.\n   */\n  export\n  interface IOptions {\n    /**\n     * The panel layout to use for the panel.\n     *\n     * The default is a new `PanelLayout`.\n     */\n    layout?: PanelLayout;\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Create a panel layout for the given panel options.\n   */\n  export\n  function createLayout(options: Panel.IOptions): PanelLayout {\n    return options.layout || new PanelLayout();\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { ArrayExt } from '@lumino/algorithm';\n\nimport { IDisposable } from '@lumino/disposable';\n\nimport { Drag } from '@lumino/dragdrop';\n\nimport { Message } from '@lumino/messaging';\n\nimport { Panel } from './panel';\n\nimport { SplitLayout } from './splitlayout';\n\nimport { Widget } from './widget';\n\n/**\n * A panel which arranges its widgets into resizable sections.\n *\n * #### Notes\n * This class provides a convenience wrapper around a [[SplitLayout]].\n */\nexport class SplitPanel extends Panel {\n  /**\n   * Construct a new split panel.\n   *\n   * @param options - The options for initializing the split panel.\n   */\n  constructor(options: SplitPanel.IOptions = {}) {\n    super({ layout: Private.createLayout(options) });\n    this.addClass('lm-SplitPanel');\n    /* <DEPRECATED> */\n    this.addClass('p-SplitPanel');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * Dispose of the resources held by the panel.\n   */\n  dispose(): void {\n    this._releaseMouse();\n    super.dispose();\n  }\n\n  /**\n   * Get the layout orientation for the split panel.\n   */\n  get orientation(): SplitPanel.Orientation {\n    return (this.layout as SplitLayout).orientation;\n  }\n\n  /**\n   * Set the layout orientation for the split panel.\n   */\n  set orientation(value: SplitPanel.Orientation) {\n    (this.layout as SplitLayout).orientation = value;\n  }\n\n  /**\n   * Get the content alignment for the split panel.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand to fill the\n   * entire split panel.\n   */\n  get alignment(): SplitPanel.Alignment {\n    return (this.layout as SplitLayout).alignment;\n  }\n\n  /**\n   * Set the content alignment for the split panel.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand to fill the\n   * entire split panel.\n   */\n  set alignment(value: SplitPanel.Alignment) {\n    (this.layout as SplitLayout).alignment = value;\n  }\n\n  /**\n   * Get the inter-element spacing for the split panel.\n   */\n  get spacing(): number {\n    return (this.layout as SplitLayout).spacing;\n  }\n\n  /**\n   * Set the inter-element spacing for the split panel.\n   */\n  set spacing(value: number) {\n    (this.layout as SplitLayout).spacing = value;\n  }\n\n  /**\n   * The renderer used by the split panel.\n   */\n  get renderer(): SplitPanel.IRenderer {\n    return (this.layout as SplitLayout).renderer;\n  }\n\n  /**\n   * A read-only array of the split handles in the panel.\n   */\n  get handles(): ReadonlyArray<HTMLDivElement> {\n    return (this.layout as SplitLayout).handles;\n  }\n\n  /**\n   * Get the relative sizes of the widgets in the panel.\n   *\n   * @returns A new array of the relative sizes of the widgets.\n   *\n   * #### Notes\n   * The returned sizes reflect the sizes of the widgets normalized\n   * relative to their siblings.\n   *\n   * This method **does not** measure the DOM nodes.\n   */\n  relativeSizes(): number[] {\n    return (this.layout as SplitLayout).relativeSizes();\n  }\n\n  /**\n   * Set the relative sizes for the widgets in the panel.\n   *\n   * @param sizes - The relative sizes for the widgets in the panel.\n   *\n   * #### Notes\n   * Extra values are ignored, too few will yield an undefined layout.\n   *\n   * The actual geometry of the DOM nodes is updated asynchronously.\n   */\n  setRelativeSizes(sizes: number[]): void {\n    (this.layout as SplitLayout).setRelativeSizes(sizes);\n  }\n\n  /**\n   * Handle the DOM events for the split panel.\n   *\n   * @param event - The DOM event sent to the panel.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the panel's DOM node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n      case 'mousedown':\n        this._evtMouseDown(event as MouseEvent);\n        break;\n      case 'mousemove':\n        this._evtMouseMove(event as MouseEvent);\n        break;\n      case 'mouseup':\n        this._evtMouseUp(event as MouseEvent);\n        break;\n      case 'keydown':\n        this._evtKeyDown(event as KeyboardEvent);\n        break;\n      case 'contextmenu':\n        event.preventDefault();\n        event.stopPropagation();\n        break;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('mousedown', this);\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('mousedown', this);\n    this._releaseMouse();\n  }\n\n  /**\n   * A message handler invoked on a `'child-added'` message.\n   */\n  protected onChildAdded(msg: Widget.ChildMessage): void {\n    msg.child.addClass('lm-SplitPanel-child');\n    /* <DEPRECATED> */\n    msg.child.addClass('p-SplitPanel-child');\n    /* </DEPRECATED> */\n    this._releaseMouse();\n  }\n\n  /**\n   * A message handler invoked on a `'child-removed'` message.\n   */\n  protected onChildRemoved(msg: Widget.ChildMessage): void {\n    msg.child.removeClass('lm-SplitPanel-child');\n    /* <DEPRECATED> */\n    msg.child.removeClass('p-SplitPanel-child');\n    /* </DEPRECATED> */\n    this._releaseMouse();\n  }\n\n  /**\n   * Handle the `'keydown'` event for the split panel.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // Stop input events during drag.\n    if (this._pressData) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    // Release the mouse if `Escape` is pressed.\n    if (event.keyCode === 27) {\n      this._releaseMouse();\n    }\n  }\n\n  /**\n   * Handle the `'mousedown'` event for the split panel.\n   */\n  private _evtMouseDown(event: MouseEvent): void {\n    // Do nothing if the left mouse button is not pressed.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Find the handle which contains the mouse target, if any.\n    let layout = this.layout as SplitLayout;\n    let index = ArrayExt.findFirstIndex(layout.handles, (handle) => {\n      return handle.contains(event.target as HTMLElement);\n    });\n\n    // Bail early if the mouse press was not on a handle.\n    if (index === -1) {\n      return;\n    }\n\n    // Stop the event when a split handle is pressed.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Add the extra document listeners.\n    document.addEventListener('mouseup', this, true);\n    document.addEventListener('mousemove', this, true);\n    document.addEventListener('keydown', this, true);\n    document.addEventListener('contextmenu', this, true);\n\n    // Compute the offset delta for the handle press.\n    let delta: number;\n    let handle = layout.handles[index];\n    let rect = handle.getBoundingClientRect();\n    if (layout.orientation === 'horizontal') {\n      delta = event.clientX - rect.left;\n    } else {\n      delta = event.clientY - rect.top;\n    }\n\n    // Override the cursor and store the press data.\n    let style = window.getComputedStyle(handle);\n    let override = Drag.overrideCursor(style.cursor!);\n    this._pressData = { index, delta, override };\n  }\n\n  /**\n   * Handle the `'mousemove'` event for the split panel.\n   */\n  private _evtMouseMove(event: MouseEvent): void {\n    // Stop the event when dragging a split handle.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Compute the desired offset position for the handle.\n    let pos: number;\n    let layout = this.layout as SplitLayout;\n    let rect = this.node.getBoundingClientRect();\n    if (layout.orientation === 'horizontal') {\n      pos = event.clientX - rect.left - this._pressData!.delta;\n    } else {\n      pos = event.clientY - rect.top - this._pressData!.delta;\n    }\n\n    // Move the handle as close to the desired position as possible.\n    layout.moveHandle(this._pressData!.index, pos);\n  }\n\n  /**\n   * Handle the `'mouseup'` event for the split panel.\n   */\n  private _evtMouseUp(event: MouseEvent): void {\n    // Do nothing if the left mouse button is not released.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Stop the event when releasing a handle.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Finalize the mouse release.\n    this._releaseMouse();\n  }\n\n  /**\n   * Release the mouse grab for the split panel.\n   */\n  private _releaseMouse(): void {\n    // Bail early if no drag is in progress.\n    if (!this._pressData) {\n      return;\n    }\n\n    // Clear the override cursor.\n    this._pressData.override.dispose();\n    this._pressData = null;\n\n    // Remove the extra document listeners.\n    document.removeEventListener('mouseup', this, true);\n    document.removeEventListener('mousemove', this, true);\n    document.removeEventListener('keydown', this, true);\n    document.removeEventListener('contextmenu', this, true);\n  }\n\n  private _pressData: Private.IPressData | null = null;\n}\n\n/**\n * The namespace for the `SplitPanel` class statics.\n */\nexport namespace SplitPanel {\n  /**\n   * A type alias for a split panel orientation.\n   */\n  export type Orientation = SplitLayout.Orientation;\n\n  /**\n   * A type alias for a split panel alignment.\n   */\n  export type Alignment = SplitLayout.Alignment;\n\n  /**\n   * A type alias for a split panel renderer.\n   */\n  export type IRenderer = SplitLayout.IRenderer;\n\n  /**\n   * An options object for initializing a split panel.\n   */\n  export interface IOptions {\n    /**\n     * The renderer to use for the split panel.\n     *\n     * The default is a shared renderer instance.\n     */\n    renderer?: IRenderer;\n\n    /**\n     * The layout orientation of the panel.\n     *\n     * The default is `'horizontal'`.\n     */\n    orientation?: Orientation;\n\n    /**\n     * The content alignment of the panel.\n     *\n     * The default is `'start'`.\n     */\n    alignment?: Alignment;\n\n    /**\n     * The spacing between items in the panel.\n     *\n     * The default is `4`.\n     */\n    spacing?: number;\n\n    /**\n     * The split layout to use for the split panel.\n     *\n     * If this is provided, the other options are ignored.\n     *\n     * The default is a new `SplitLayout`.\n     */\n    layout?: SplitLayout;\n  }\n\n  /**\n   * The default implementation of `IRenderer`.\n   */\n  export class Renderer implements IRenderer {\n    /**\n     * Create a new handle for use with a split panel.\n     *\n     * @returns A new handle element for a split panel.\n     */\n    createHandle(): HTMLDivElement {\n      let handle = document.createElement('div');\n      handle.className = 'lm-SplitPanel-handle';\n      /* <DEPRECATED> */\n      handle.classList.add('p-SplitPanel-handle');\n      /* </DEPRECATED> */\n      return handle;\n    }\n  }\n\n  /**\n   * The default `Renderer` instance.\n   */\n  export const defaultRenderer = new Renderer();\n\n  /**\n   * Get the split panel stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The split panel stretch factor for the widget.\n   */\n  export function getStretch(widget: Widget): number {\n    return SplitLayout.getStretch(widget);\n  }\n\n  /**\n   * Set the split panel stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the stretch factor.\n   */\n  export function setStretch(widget: Widget, value: number): void {\n    SplitLayout.setStretch(widget, value);\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * An object which holds mouse press data.\n   */\n  export interface IPressData {\n    /**\n     * The index of the pressed handle.\n     */\n    index: number;\n\n    /**\n     * The offset of the press in handle coordinates.\n     */\n    delta: number;\n\n    /**\n     * The disposable which will clear the override cursor.\n     */\n    override: IDisposable;\n  }\n\n  /**\n   * Create a split layout for the given panel options.\n   */\n  export function createLayout(options: SplitPanel.IOptions): SplitLayout {\n    return (\n      options.layout ||\n      new SplitLayout({\n        renderer: options.renderer || SplitPanel.defaultRenderer,\n        orientation: options.orientation,\n        alignment: options.alignment,\n        spacing: options.spacing,\n      })\n    );\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n\nimport { ArrayExt } from '@lumino/algorithm';\nimport { Message } from '@lumino/messaging';\nimport { AccordionLayout } from './accordionlayout';\nimport { SplitLayout } from './splitlayout';\nimport { SplitPanel } from './splitpanel';\nimport { Title } from './title';\nimport { Widget } from './widget';\n\n/**\n * A panel which arranges its widgets into resizable sections separated by a title widget.\n *\n * #### Notes\n * This class provides a convenience wrapper around [[AccordionLayout]].\n */\nexport class AccordionPanel extends SplitPanel {\n  /**\n   * Construct a new accordion panel.\n   *\n   * @param options - The options for initializing the accordion panel.\n   */\n  constructor(options: AccordionPanel.IOptions = {}) {\n    super({ ...options, layout: Private.createLayout(options) });\n    this.addClass('lm-AccordionPanel');\n  }\n\n  /**\n   * The renderer used by the accordion panel.\n   */\n  get renderer(): AccordionPanel.IRenderer {\n    return (this.layout as AccordionLayout).renderer;\n  }\n\n  /**\n   * The section title space.\n   * \n   * This is the height if the panel is vertical and the width if it is\n   * horizontal.\n   */\n  get titleSpace(): number {\n    return (this.layout as AccordionLayout).titleSpace;\n  }\n  set titleSpace(value: number) {\n    (this.layout as AccordionLayout).titleSpace = value;\n  }\n\n  /**\n   * A read-only array of the section titles in the panel.\n   */\n  get titles(): ReadonlyArray<HTMLElement> {\n    return (this.layout as AccordionLayout).titles;\n  }\n\n  /**\n   * Handle the DOM events for the accordion panel.\n   *\n   * @param event - The DOM event sent to the panel.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the panel's DOM node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    super.handleEvent(event);\n    switch (event.type) {\n      case 'click':\n        this._evtClick(event as MouseEvent);\n        break;\n      case 'keydown':\n        this._eventKeyDown(event as KeyboardEvent);\n        break;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('click', this);\n    this.node.addEventListener('keydown', this);\n    super.onBeforeAttach(msg);\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    super.onAfterDetach(msg);\n    this.node.removeEventListener('click', this);\n    this.node.removeEventListener('keydown', this);\n  }\n\n  /**\n   * Handle the `'click'` event for the accordion panel\n   */\n  private _evtClick(event: MouseEvent): void {\n    const target = event.target as HTMLElement | null;\n\n    if (target) {\n      const index = ArrayExt.findFirstIndex(this.titles, (title) => {\n        return title.contains(target);\n      });\n\n      if (index >= 0) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        const widget = (this.layout as AccordionLayout).widgets[index];\n        if (widget.isHidden) {\n          target.classList.add('lm-mod-expanded');\n          target.setAttribute('aria-expanded', 'true');\n          widget.show();\n        } else {\n          target.classList.remove('lm-mod-expanded');\n          target.setAttribute('aria-expanded', 'false');\n          widget.hide();\n        }\n      }\n    }\n  }\n\n  /**\n   * Handle the `'keydown'` event for the accordion panel.\n   */\n  private _eventKeyDown(event: KeyboardEvent): void {\n    if (event.defaultPrevented) {\n      return;\n    }\n\n    const target = event.target as HTMLElement | null;\n    let handled = false;\n    if (target) {\n      const index = ArrayExt.findFirstIndex(this.titles, (title) => {\n        return title.contains(target);\n      });\n\n      if (index >= 0) {\n        const keyCode = event.keyCode.toString();\n\n        // If Space or Enter is pressed on title, emulate click event\n        if (event.key.match(/Space|Enter/) || keyCode.match(/13|32/)) {\n          target.click();\n          handled = true;\n        } else if (\n          this.orientation === 'horizontal'\n            ? event.key.match(/ArrowLeft|ArrowRight/) || keyCode.match(/37|39/)\n            : event.key.match(/ArrowUp|ArrowDown/) || keyCode.match(/38|40/)\n        ) {\n          // If Up or Down (for vertical) / Left or Right (for horizontal) is pressed on title, loop on titles\n          const direction =\n            event.key.match(/ArrowLeft|ArrowUp/) || keyCode.match(/37|38/)\n              ? -1\n              : 1;\n          const length = this.titles.length;\n          const newIndex = (index + length + direction) % length;\n\n          this.titles[newIndex].focus();\n          handled = true;\n        } else if (event.key === 'End' || keyCode === '35') {\n          // If End is pressed on title, focus on the last title\n          this.titles[this.titles.length - 1].focus();\n          handled = true;\n        } else if (event.key === 'Home' || keyCode === '36') {\n          // If Home is pressed on title, focus on the first title\n          this.titles[0].focus();\n          handled = true;\n        }\n      }\n\n      if (handled) {\n        event.preventDefault();\n      }\n    }\n  }\n}\n\n/**\n * The namespace for the `AccordionPanel` class statics.\n */\nexport namespace AccordionPanel {\n  /**\n   * A type alias for a accordion panel orientation.\n   */\n  export type Orientation = SplitLayout.Orientation;\n\n  /**\n   * A type alias for a accordion panel alignment.\n   */\n  export type Alignment = SplitLayout.Alignment;\n\n  /**\n   * A type alias for a accordion panel renderer.\n   */\n  export type IRenderer = AccordionLayout.IRenderer;\n\n  /**\n   * An options object for initializing a accordion panel.\n   */\n  export interface IOptions extends Partial<AccordionLayout.IOptions> {\n    /**\n     * The accordion layout to use for the accordion panel.\n     *\n     * If this is provided, the other options are ignored.\n     *\n     * The default is a new `AccordionLayout`.\n     */\n    layout?: AccordionLayout;\n  }\n\n  /**\n   * The default implementation of `IRenderer`.\n   */\n  export class Renderer extends SplitPanel.Renderer implements IRenderer {\n    /**\n     * A selector which matches any title node in the accordion.\n     */\n    readonly titleClassName = 'lm-AccordionPanel-title';\n\n    /**\n     * Render the collapse indicator for a section title.\n     *\n     * @param data - The data to use for rendering the section title.\n     *\n     * @returns A element representing the collapse indicator.\n     */\n    createCollapseIcon(data: Title<Widget>): HTMLElement {\n      return document.createElement('span');\n    }\n\n    /**\n     * Render the element for a section title.\n     *\n     * @param data - The data to use for rendering the section title.\n     *\n     * @returns A element representing the section title.\n     */\n    createSectionTitle(data: Title<Widget>): HTMLElement {\n      const handle = document.createElement('h3');\n      handle.setAttribute('role', 'button');\n      handle.setAttribute('tabindex', '0');\n      handle.id = this.createTitleKey(data);\n      handle.className = this.titleClassName;\n      handle.title = data.caption;\n      for (const aData in data.dataset) {\n        handle.dataset[aData] = data.dataset[aData];\n      }\n\n      const collapser = handle.appendChild(this.createCollapseIcon(data));\n      collapser.className = 'lm-AccordionPanel-titleCollapser';\n\n      const label = handle.appendChild(document.createElement('span'));\n      label.className = 'lm-AccordionPanel-titleLabel';\n      label.textContent = data.label;\n\n      return handle;\n    }\n\n    /**\n     * Create a unique render key for the title.\n     *\n     * @param data - The data to use for the title.\n     *\n     * @returns The unique render key for the title.\n     *\n     * #### Notes\n     * This method caches the key against the section title the first time\n     * the key is generated.\n     */\n    createTitleKey(data: Title<Widget>): string {\n      let key = this._titleKeys.get(data);\n      if (key === undefined) {\n        key = `title-key-${this._titleID++}`;\n        this._titleKeys.set(data, key);\n      }\n      return key;\n    }\n\n    private _titleID = 0;\n    private _titleKeys = new WeakMap<Title<Widget>, string>();\n  }\n\n  /**\n   * The default `Renderer` instance.\n   */\n  export const defaultRenderer = new Renderer();\n}\n\nnamespace Private {\n  /**\n   * Create an accordion layout for the given panel options.\n   *\n   * @param options Panel options\n   * @returns Panel layout\n   */\n  export function createLayout(\n    options: AccordionPanel.IOptions\n  ): AccordionLayout {\n    return (\n      options.layout ||\n      new AccordionLayout({\n        renderer: options.renderer || AccordionPanel.defaultRenderer,\n        orientation: options.orientation,\n        alignment: options.alignment,\n        spacing: options.spacing,\n        titleSpace: options.titleSpace,\n      })\n    );\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, each\n} from '@lumino/algorithm';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  AttachedProperty\n} from '@lumino/properties';\n\nimport {\n  BoxEngine, BoxSizer\n} from './boxengine';\n\nimport {\n  LayoutItem\n} from './layout';\n\nimport {\n  PanelLayout\n} from './panellayout';\n\nimport Utils from './utils';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A layout which arranges its widgets in a single row or column.\n */\nexport\nclass BoxLayout extends PanelLayout {\n  /**\n   * Construct a new box layout.\n   *\n   * @param options - The options for initializing the layout.\n   */\n  constructor(options: BoxLayout.IOptions = {}) {\n    super();\n    if (options.direction !== undefined) {\n      this._direction = options.direction;\n    }\n    if (options.alignment !== undefined) {\n      this._alignment = options.alignment;\n    }\n    if (options.spacing !== undefined) {\n      this._spacing = Utils.clampDimension(options.spacing);\n    }\n  }\n\n  /**\n   * Dispose of the resources held by the layout.\n   */\n  dispose(): void {\n    // Dispose of the layout items.\n    each(this._items, item => { item.dispose(); });\n\n    // Clear the layout state.\n    this._box = null;\n    this._items.length = 0;\n    this._sizers.length = 0;\n\n    // Dispose of the rest of the layout.\n    super.dispose();\n  }\n\n  /**\n   * Get the layout direction for the box layout.\n   */\n  get direction(): BoxLayout.Direction {\n    return this._direction;\n  }\n\n  /**\n   * Set the layout direction for the box layout.\n   */\n  set direction(value: BoxLayout.Direction) {\n    if (this._direction === value) {\n      return;\n    }\n    this._direction = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.dataset['direction'] = value;\n    this.parent.fit();\n  }\n\n  /**\n   * Get the content alignment for the box layout.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand to fill the\n   * entire box layout.\n   */\n  get alignment(): BoxLayout.Alignment {\n    return this._alignment;\n  }\n\n  /**\n   * Set the content alignment for the box layout.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand to fill the\n   * entire box layout.\n   */\n  set alignment(value: BoxLayout.Alignment) {\n    if (this._alignment === value) {\n      return;\n    }\n    this._alignment = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.dataset['alignment'] = value;\n    this.parent.update();\n  }\n\n  /**\n   * Get the inter-element spacing for the box layout.\n   */\n  get spacing(): number {\n    return this._spacing;\n  }\n\n  /**\n   * Set the inter-element spacing for the box layout.\n   */\n  set spacing(value: number) {\n    value = Utils.clampDimension(value);\n    if (this._spacing === value) {\n      return;\n    }\n    this._spacing = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.fit();\n  }\n\n  /**\n   * Perform layout initialization which requires the parent widget.\n   */\n  protected init(): void {\n    this.parent!.dataset['direction'] = this.direction;\n    this.parent!.dataset['alignment'] = this.alignment;\n    super.init();\n  }\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param index - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to attach to the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected attachWidget(index: number, widget: Widget): void {\n    // Create and add a new layout item for the widget.\n    ArrayExt.insert(this._items, index, new LayoutItem(widget));\n\n    // Create and add a new sizer for the widget.\n    ArrayExt.insert(this._sizers, index, new BoxSizer());\n\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Add the widget's node to the parent.\n    this.parent!.node.appendChild(widget.node);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * Move a widget in the parent's DOM node.\n   *\n   * @param fromIndex - The previous index of the widget in the layout.\n   *\n   * @param toIndex - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to move in the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected moveWidget(fromIndex: number, toIndex: number, widget: Widget): void {\n    // Move the layout item for the widget.\n    ArrayExt.move(this._items, fromIndex, toIndex);\n\n    // Move the sizer for the widget.\n    ArrayExt.move(this._sizers, fromIndex, toIndex);\n\n    // Post an update request for the parent widget.\n    this.parent!.update();\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param index - The previous index of the widget in the layout.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected detachWidget(index: number, widget: Widget): void {\n    // Remove the layout item for the widget.\n    let item = ArrayExt.removeAt(this._items, index);\n\n    // Remove the sizer for the widget.\n    ArrayExt.removeAt(this._sizers, index);\n\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget's node from the parent.\n    this.parent!.node.removeChild(widget.node);\n\n    // Send an `'after-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n\n    // Dispose of the layout item.\n    item!.dispose();\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   */\n  protected onBeforeShow(msg: Message): void {\n    super.onBeforeShow(msg);\n    this.parent!.update();\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    super.onBeforeAttach(msg);\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-shown'` message.\n   */\n  protected onChildShown(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-hidden'` message.\n   */\n  protected onChildHidden(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    if (this.parent!.isVisible) {\n      this._update(msg.width, msg.height);\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    if (this.parent!.isVisible) {\n      this._update(-1, -1);\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   */\n  protected onFitRequest(msg: Message): void {\n    if (this.parent!.isAttached) {\n      this._fit();\n    }\n  }\n\n  /**\n   * Fit the layout to the total size required by the widgets.\n   */\n  private _fit(): void {\n    // Compute the visible item count.\n    let nVisible = 0;\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      nVisible += +!this._items[i].isHidden;\n    }\n\n    // Update the fixed space for the visible items.\n    this._fixed = this._spacing * Math.max(0, nVisible - 1);\n\n    // Setup the computed minimum size.\n    let horz = Private.isHorizontal(this._direction);\n    let minW = horz ? this._fixed : 0;\n    let minH = horz ? 0 : this._fixed;\n\n    // Update the sizers and computed minimum size.\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      // Fetch the item and corresponding box sizer.\n      let item = this._items[i];\n      let sizer = this._sizers[i];\n\n      // If the item is hidden, it should consume zero size.\n      if (item.isHidden) {\n        sizer.minSize = 0;\n        sizer.maxSize = 0;\n        continue;\n      }\n\n      // Update the size limits for the item.\n      item.fit();\n\n      // Update the size basis and stretch factor.\n      sizer.sizeHint = BoxLayout.getSizeBasis(item.widget);\n      sizer.stretch = BoxLayout.getStretch(item.widget);\n\n      // Update the sizer limits and computed min size.\n      if (horz) {\n        sizer.minSize = item.minWidth;\n        sizer.maxSize = item.maxWidth;\n        minW += item.minWidth;\n        minH = Math.max(minH, item.minHeight);\n      } else {\n        sizer.minSize = item.minHeight;\n        sizer.maxSize = item.maxHeight;\n        minH += item.minHeight;\n        minW = Math.max(minW, item.minWidth);\n      }\n    }\n\n    // Update the box sizing and add it to the computed min size.\n    let box = this._box = ElementExt.boxSizing(this.parent!.node);\n    minW += box.horizontalSum;\n    minH += box.verticalSum;\n\n    // Update the parent's min size constraints.\n    let style = this.parent!.node.style;\n    style.minWidth = `${minW}px`;\n    style.minHeight = `${minH}px`;\n\n    // Set the dirty flag to ensure only a single update occurs.\n    this._dirty = true;\n\n    // Notify the ancestor that it should fit immediately. This may\n    // cause a resize of the parent, fulfilling the required update.\n    if (this.parent!.parent) {\n      MessageLoop.sendMessage(this.parent!.parent!, Widget.Msg.FitRequest);\n    }\n\n    // If the dirty flag is still set, the parent was not resized.\n    // Trigger the required update on the parent widget immediately.\n    if (this._dirty) {\n      MessageLoop.sendMessage(this.parent!, Widget.Msg.UpdateRequest);\n    }\n  }\n\n  /**\n   * Update the layout position and size of the widgets.\n   *\n   * The parent offset dimensions should be `-1` if unknown.\n   */\n  private _update(offsetWidth: number, offsetHeight: number): void {\n    // Clear the dirty flag to indicate the update occurred.\n    this._dirty = false;\n\n    // Compute the visible item count.\n    let nVisible = 0;\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      nVisible += +!this._items[i].isHidden;\n    }\n\n    // Bail early if there are no visible items to layout.\n    if (nVisible === 0) {\n      return;\n    }\n\n    // Measure the parent if the offset dimensions are unknown.\n    if (offsetWidth < 0) {\n      offsetWidth = this.parent!.node.offsetWidth;\n    }\n    if (offsetHeight < 0) {\n      offsetHeight = this.parent!.node.offsetHeight;\n    }\n\n    // Ensure the parent box sizing data is computed.\n    if (!this._box) {\n      this._box = ElementExt.boxSizing(this.parent!.node);\n    }\n\n    // Compute the layout area adjusted for border and padding.\n    let top = this._box.paddingTop;\n    let left = this._box.paddingLeft;\n    let width = offsetWidth - this._box.horizontalSum;\n    let height = offsetHeight - this._box.verticalSum;\n\n    // Distribute the layout space and adjust the start position.\n    let delta: number;\n    switch (this._direction) {\n    case 'left-to-right':\n      delta = BoxEngine.calc(this._sizers, Math.max(0, width - this._fixed));\n      break;\n    case 'top-to-bottom':\n      delta = BoxEngine.calc(this._sizers, Math.max(0, height - this._fixed));\n      break;\n    case 'right-to-left':\n      delta = BoxEngine.calc(this._sizers, Math.max(0, width - this._fixed));\n      left += width;\n      break;\n    case 'bottom-to-top':\n      delta = BoxEngine.calc(this._sizers, Math.max(0, height - this._fixed));\n      top += height;\n      break;\n    default:\n      throw 'unreachable';\n    }\n\n    // Setup the variables for justification and alignment offset.\n    let extra = 0;\n    let offset = 0;\n\n    // Account for alignment if there is extra layout space.\n    if (delta > 0) {\n      switch (this._alignment) {\n      case 'start':\n        break;\n      case 'center':\n        extra = 0;\n        offset = delta / 2;\n        break;\n      case 'end':\n        extra = 0;\n        offset = delta;\n        break;\n      case 'justify':\n        extra = delta / nVisible;\n        offset = 0;\n        break;\n      default:\n        throw 'unreachable';\n      }\n    }\n\n    // Layout the items using the computed box sizes.\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      // Fetch the item.\n      let item = this._items[i];\n\n      // Ignore hidden items.\n      if (item.isHidden) {\n        continue;\n      }\n\n      // Fetch the computed size for the widget.\n      let size = this._sizers[i].size;\n\n      // Update the widget geometry and advance the relevant edge.\n      switch (this._direction) {\n      case 'left-to-right':\n        item.update(left + offset, top, size + extra, height);\n        left += size + extra + this._spacing;\n        break;\n      case 'top-to-bottom':\n        item.update(left, top + offset, width, size + extra);\n        top += size + extra + this._spacing;\n        break;\n      case 'right-to-left':\n        item.update(left - offset - size - extra, top, size + extra, height);\n        left -= size + extra + this._spacing;\n        break;\n      case 'bottom-to-top':\n        item.update(left, top - offset - size - extra, width, size + extra);\n        top -= size + extra + this._spacing;\n        break;\n      default:\n        throw 'unreachable';\n      }\n    }\n  }\n\n  private _fixed = 0;\n  private _spacing = 4;\n  private _dirty = false;\n  private _sizers: BoxSizer[] = [];\n  private _items: LayoutItem[] = [];\n  private _box: ElementExt.IBoxSizing | null = null;\n  private _alignment: BoxLayout.Alignment = 'start';\n  private _direction: BoxLayout.Direction = 'top-to-bottom';\n}\n\n\n/**\n * The namespace for the `BoxLayout` class statics.\n */\nexport\nnamespace BoxLayout {\n  /**\n   * A type alias for a box layout direction.\n   */\n  export\n  type Direction = (\n    'left-to-right' | 'right-to-left' | 'top-to-bottom' | 'bottom-to-top'\n  );\n\n  /**\n   * A type alias for a box layout alignment.\n   */\n  export\n  type Alignment = 'start' | 'center' | 'end' | 'justify';\n\n  /**\n   * An options object for initializing a box layout.\n   */\n  export\n  interface IOptions {\n    /**\n     * The direction of the layout.\n     *\n     * The default is `'top-to-bottom'`.\n     */\n    direction?: Direction;\n\n    /**\n     * The content alignment of the layout.\n     *\n     * The default is `'start'`.\n     */\n    alignment?: Alignment;\n\n    /**\n     * The spacing between items in the layout.\n     *\n     * The default is `4`.\n     */\n    spacing?: number;\n  }\n\n  /**\n   * Get the box layout stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The box layout stretch factor for the widget.\n   */\n  export\n  function getStretch(widget: Widget): number {\n    return Private.stretchProperty.get(widget);\n  }\n\n  /**\n   * Set the box layout stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the stretch factor.\n   */\n  export\n  function setStretch(widget: Widget, value: number): void {\n    Private.stretchProperty.set(widget, value);\n  }\n\n  /**\n   * Get the box layout size basis for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The box layout size basis for the widget.\n   */\n  export\n  function getSizeBasis(widget: Widget): number {\n    return Private.sizeBasisProperty.get(widget);\n  }\n\n  /**\n   * Set the box layout size basis for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the size basis.\n   */\n  export\n  function setSizeBasis(widget: Widget, value: number): void {\n    Private.sizeBasisProperty.set(widget, value);\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The property descriptor for a widget stretch factor.\n   */\n  export\n  const stretchProperty = new AttachedProperty<Widget, number>({\n    name: 'stretch',\n    create: () => 0,\n    coerce: (owner, value) => Math.max(0, Math.floor(value)),\n    changed: onChildSizingChanged\n  });\n\n  /**\n   * The property descriptor for a widget size basis.\n   */\n  export\n  const sizeBasisProperty = new AttachedProperty<Widget, number>({\n    name: 'sizeBasis',\n    create: () => 0,\n    coerce: (owner, value) => Math.max(0, Math.floor(value)),\n    changed: onChildSizingChanged\n  });\n\n  /**\n   * Test whether a direction has horizontal orientation.\n   */\n  export\n  function isHorizontal(dir: BoxLayout.Direction): boolean {\n    return dir === 'left-to-right' || dir === 'right-to-left';\n  }\n\n  /**\n   * Clamp a spacing value to an integer >= 0.\n   */\n  export\n  function clampSpacing(value: number): number {\n    return Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * The change handler for the attached sizing properties.\n   */\n  function onChildSizingChanged(child: Widget): void {\n    if (child.parent && child.parent.layout instanceof BoxLayout) {\n      child.parent.fit();\n    }\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  BoxLayout\n} from './boxlayout';\n\nimport {\n  Panel\n} from './panel';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A panel which arranges its widgets in a single row or column.\n *\n * #### Notes\n * This class provides a convenience wrapper around a [[BoxLayout]].\n */\nexport\nclass BoxPanel extends Panel {\n  /**\n   * Construct a new box panel.\n   *\n   * @param options - The options for initializing the box panel.\n   */\n  constructor(options: BoxPanel.IOptions = {}) {\n    super({ layout: Private.createLayout(options) });\n    this.addClass('lm-BoxPanel');\n    /* <DEPRECATED> */\n    this.addClass('p-BoxPanel');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * Get the layout direction for the box panel.\n   */\n  get direction(): BoxPanel.Direction {\n    return (this.layout as BoxLayout).direction;\n  }\n\n  /**\n   * Set the layout direction for the box panel.\n   */\n  set direction(value: BoxPanel.Direction) {\n    (this.layout as BoxLayout).direction = value;\n  }\n\n  /**\n   * Get the content alignment for the box panel.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand to fill the\n   * entire box layout.\n   */\n  get alignment(): BoxPanel.Alignment {\n    return (this.layout as BoxLayout).alignment;\n  }\n\n  /**\n   * Set the content alignment for the box panel.\n   *\n   * #### Notes\n   * This is the alignment of the widgets in the layout direction.\n   *\n   * The alignment has no effect if the widgets can expand to fill the\n   * entire box layout.\n   */\n  set alignment(value: BoxPanel.Alignment) {\n    (this.layout as BoxLayout).alignment = value;\n  }\n\n  /**\n   * Get the inter-element spacing for the box panel.\n   */\n  get spacing(): number {\n    return (this.layout as BoxLayout).spacing;\n  }\n\n  /**\n   * Set the inter-element spacing for the box panel.\n   */\n  set spacing(value: number) {\n    (this.layout as BoxLayout).spacing = value;\n  }\n\n  /**\n   * A message handler invoked on a `'child-added'` message.\n   */\n  protected onChildAdded(msg: Widget.ChildMessage): void {\n    msg.child.addClass('lm-BoxPanel-child');\n    /* <DEPRECATED> */\n    msg.child.addClass('p-BoxPanel-child');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * A message handler invoked on a `'child-removed'` message.\n   */\n  protected onChildRemoved(msg: Widget.ChildMessage): void {\n    msg.child.removeClass('lm-BoxPanel-child');\n    /* <DEPRECATED> */\n    msg.child.removeClass('p-BoxPanel-child');\n    /* </DEPRECATED> */\n  }\n}\n\n\n/**\n * The namespace for the `BoxPanel` class statics.\n */\nexport\nnamespace BoxPanel {\n  /**\n   * A type alias for a box panel direction.\n   */\n  export\n  type Direction = BoxLayout.Direction;\n\n  /**\n   * A type alias for a box panel alignment.\n   */\n  export\n  type Alignment = BoxLayout.Alignment;\n\n  /**\n   * An options object for initializing a box panel.\n   */\n  export\n  interface IOptions {\n    /**\n     * The layout direction of the panel.\n     *\n     * The default is `'top-to-bottom'`.\n     */\n    direction?: Direction;\n\n    /**\n     * The content alignment of the panel.\n     *\n     * The default is `'start'`.\n     */\n    alignment?: Alignment;\n\n    /**\n     * The spacing between items in the panel.\n     *\n     * The default is `4`.\n     */\n    spacing?: number;\n\n    /**\n     * The box layout to use for the box panel.\n     *\n     * If this is provided, the other options are ignored.\n     *\n     * The default is a new `BoxLayout`.\n     */\n    layout?: BoxLayout;\n  }\n\n  /**\n   * Get the box panel stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The box panel stretch factor for the widget.\n   */\n  export\n  function getStretch(widget: Widget): number {\n    return BoxLayout.getStretch(widget);\n  }\n\n  /**\n   * Set the box panel stretch factor for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the stretch factor.\n   */\n  export\n  function setStretch(widget: Widget, value: number): void {\n    BoxLayout.setStretch(widget, value);\n  }\n\n  /**\n   * Get the box panel size basis for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The box panel size basis for the widget.\n   */\n  export\n  function getSizeBasis(widget: Widget): number {\n    return BoxLayout.getSizeBasis(widget);\n  }\n\n  /**\n   * Set the box panel size basis for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the size basis.\n   */\n  export\n  function setSizeBasis(widget: Widget, value: number): void {\n    BoxLayout.setSizeBasis(widget, value);\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Create a box layout for the given panel options.\n   */\n  export\n  function createLayout(options: BoxPanel.IOptions): BoxLayout {\n    return options.layout || new BoxLayout(options);\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, StringExt\n} from '@lumino/algorithm';\n\nimport {\n  JSONExt, ReadonlyJSONObject\n} from '@lumino/coreutils';\n\nimport {\n  CommandRegistry\n} from '@lumino/commands';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Message\n} from '@lumino/messaging';\n\nimport {\n  ElementDataset, VirtualDOM, VirtualElement, h\n} from '@lumino/virtualdom';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A widget which displays command items as a searchable palette.\n */\nexport\nclass CommandPalette extends Widget {\n  /**\n   * Construct a new command palette.\n   *\n   * @param options - The options for initializing the palette.\n   */\n  constructor(options: CommandPalette.IOptions) {\n    super({ node: Private.createNode() });\n    this.addClass('lm-CommandPalette');\n    /* <DEPRECATED> */\n    this.addClass('p-CommandPalette');\n    /* </DEPRECATED> */\n    this.setFlag(Widget.Flag.DisallowLayout);\n    this.commands = options.commands;\n    this.renderer = options.renderer || CommandPalette.defaultRenderer;\n    this.commands.commandChanged.connect(this._onGenericChange, this);\n    this.commands.keyBindingChanged.connect(this._onGenericChange, this);\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose(): void {\n    this._items.length = 0;\n    this._results = null;\n    super.dispose();\n  }\n\n  /**\n   * The command registry used by the command palette.\n   */\n  readonly commands: CommandRegistry;\n\n  /**\n   * The renderer used by the command palette.\n   */\n  readonly renderer: CommandPalette.IRenderer;\n\n  /**\n   * The command palette search node.\n   *\n   * #### Notes\n   * This is the node which contains the search-related elements.\n   */\n  get searchNode(): HTMLDivElement {\n    return this.node.getElementsByClassName('lm-CommandPalette-search')[0] as HTMLDivElement;\n  }\n\n  /**\n   * The command palette input node.\n   *\n   * #### Notes\n   * This is the actual input node for the search area.\n   */\n  get inputNode(): HTMLInputElement {\n    return this.node.getElementsByClassName('lm-CommandPalette-input')[0] as HTMLInputElement;\n  }\n\n  /**\n   * The command palette content node.\n   *\n   * #### Notes\n   * This is the node which holds the command item nodes.\n   *\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get contentNode(): HTMLUListElement {\n    return this.node.getElementsByClassName('lm-CommandPalette-content')[0] as HTMLUListElement;\n  }\n\n  /**\n   * A read-only array of the command items in the palette.\n   */\n  get items(): ReadonlyArray<CommandPalette.IItem> {\n    return this._items;\n  }\n\n  /**\n   * Add a command item to the command palette.\n   *\n   * @param options - The options for creating the command item.\n   *\n   * @returns The command item added to the palette.\n   */\n  addItem(options: CommandPalette.IItemOptions): CommandPalette.IItem {\n    // Create a new command item for the options.\n    let item = Private.createItem(this.commands, options);\n\n    // Add the item to the array.\n    this._items.push(item);\n\n    // Refresh the search results.\n    this.refresh();\n\n    // Return the item added to the palette.\n    return item;\n  }\n\n  /**\n   * Adds command items to the command palette.\n   *\n   * @param items - An array of options for creating each command item.\n   *\n   * @returns The command items added to the palette.\n   */\n  addItems(items: CommandPalette.IItemOptions[]): CommandPalette.IItem[] {\n    const newItems = items.map(item => Private.createItem(this.commands, item));\n    newItems.forEach(item => this._items.push(item));\n    this.refresh();\n    return newItems;\n  }\n\n  /**\n   * Remove an item from the command palette.\n   *\n   * @param item - The item to remove from the palette.\n   *\n   * #### Notes\n   * This is a no-op if the item is not in the palette.\n   */\n  removeItem(item: CommandPalette.IItem): void {\n    this.removeItemAt(this._items.indexOf(item));\n  }\n\n  /**\n   * Remove the item at a given index from the command palette.\n   *\n   * @param index - The index of the item to remove.\n   *\n   * #### Notes\n   * This is a no-op if the index is out of range.\n   */\n  removeItemAt(index: number): void {\n    // Remove the item from the array.\n    let item = ArrayExt.removeAt(this._items, index);\n\n    // Bail if the index is out of range.\n    if (!item) {\n      return;\n    }\n\n    // Refresh the search results.\n    this.refresh();\n  }\n\n  /**\n   * Remove all items from the command palette.\n   */\n  clearItems(): void {\n    // Bail if there is nothing to remove.\n    if (this._items.length === 0) {\n      return;\n    }\n\n    // Clear the array of items.\n    this._items.length = 0;\n\n    // Refresh the search results.\n    this.refresh();\n  }\n\n  /**\n   * Clear the search results and schedule an update.\n   *\n   * #### Notes\n   * This should be called whenever the search results of the palette\n   * should be updated.\n   *\n   * This is typically called automatically by the palette as needed,\n   * but can be called manually if the input text is programatically\n   * changed.\n   *\n   * The rendered results are updated asynchronously.\n   */\n  refresh(): void {\n    this._results = null;\n    if(this.inputNode.value !== '') {\n      let clear = this.node.getElementsByClassName('lm-close-icon')[0] as HTMLInputElement;\n      clear.style.display = 'inherit'\n    }\n    else {\n      let clear = this.node.getElementsByClassName('lm-close-icon')[0] as HTMLInputElement;\n      clear.style.display = 'none'\n    }\n    this.update();\n  }\n\n  /**\n   * Handle the DOM events for the command palette.\n   *\n   * @param event - The DOM event sent to the command palette.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the command palette's DOM node.\n   * It should not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'click':\n      this._evtClick(event as MouseEvent);\n      break;\n    case 'keydown':\n      this._evtKeyDown(event as KeyboardEvent);\n      break;\n    case 'input':\n      this.refresh();\n      break;\n    case 'focus':\n    case 'blur':\n      this._toggleFocused();\n      break;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('click', this);\n    this.node.addEventListener('keydown', this);\n    this.node.addEventListener('input', this);\n    this.node.addEventListener('focus', this, true);\n    this.node.addEventListener('blur', this, true);\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('click', this);\n    this.node.removeEventListener('keydown', this);\n    this.node.removeEventListener('input', this);\n    this.node.removeEventListener('focus', this, true);\n    this.node.removeEventListener('blur', this, true);\n  }\n\n  /**\n   * A message handler invoked on an `'activate-request'` message.\n   */\n  protected onActivateRequest(msg: Message): void {\n    if (this.isAttached) {\n      let input = this.inputNode;\n      input.focus();\n      input.select();\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    // Fetch the current query text and content node.\n    let query = this.inputNode.value;\n    let contentNode = this.contentNode;\n\n    // Ensure the search results are generated.\n    let results = this._results;\n    if (!results) {\n      // Generate and store the new search results.\n      results = this._results = Private.search(this._items, query);\n\n      // Reset the active index.\n      this._activeIndex = (\n        query ? ArrayExt.findFirstIndex(results, Private.canActivate) : -1\n      );\n    }\n\n    // If there is no query and no results, clear the content.\n    if (!query && results.length === 0) {\n      VirtualDOM.render(null, contentNode);\n      return;\n    }\n\n    // If the is a query but no results, render the empty message.\n    if (query && results.length === 0) {\n      let content = this.renderer.renderEmptyMessage({ query });\n      VirtualDOM.render(content, contentNode);\n      return;\n    }\n\n    // Create the render content for the search results.\n    let renderer = this.renderer;\n    let activeIndex = this._activeIndex;\n    let content = new Array<VirtualElement>(results.length);\n    for (let i = 0, n = results.length; i < n; ++i) {\n      let result = results[i];\n      if (result.type === 'header') {\n        let indices = result.indices;\n        let category = result.category;\n        content[i] = renderer.renderHeader({ category, indices });\n      } else {\n        let item = result.item;\n        let indices = result.indices;\n        let active = i === activeIndex;\n        content[i] = renderer.renderItem({ item, indices, active });\n      }\n    }\n\n    // Render the search result content.\n    VirtualDOM.render(content, contentNode);\n\n    // Adjust the scroll position as needed.\n    if (activeIndex < 0 || activeIndex >= results.length) {\n      contentNode.scrollTop = 0;\n    } else {\n      let element = contentNode.children[activeIndex];\n      ElementExt.scrollIntoViewIfNeeded(contentNode, element);\n    }\n  }\n\n  /**\n   * Handle the `'click'` event for the command palette.\n   */\n  private _evtClick(event: MouseEvent): void {\n    // Bail if the click is not the left button.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Clear input if the target is clear button\n    if((event.target as HTMLElement).classList.contains(\"lm-close-icon\")) {\n      this.inputNode.value = '';\n      this.refresh();\n      return;\n    }\n\n    // Find the index of the item which was clicked.\n    let index = ArrayExt.findFirstIndex(this.contentNode.children, node => {\n      return node.contains(event.target as HTMLElement);\n    });\n\n    // Bail if the click was not on an item.\n    if (index === -1) {\n      return;\n    }\n\n    // Kill the event when a content item is clicked.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Execute the item if possible.\n    this._execute(index);\n  }\n\n  /**\n   * Handle the `'keydown'` event for the command palette.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    if (event.altKey || event.ctrlKey || event.metaKey || event.shiftKey) {\n      return;\n    }\n    switch (event.keyCode) {\n    case 13:  // Enter\n      event.preventDefault();\n      event.stopPropagation();\n      this._execute(this._activeIndex);\n      break;\n    case 38:  // Up Arrow\n      event.preventDefault();\n      event.stopPropagation();\n      this._activatePreviousItem();\n      break;\n    case 40:  // Down Arrow\n      event.preventDefault();\n      event.stopPropagation();\n      this._activateNextItem();\n      break;\n    }\n  }\n\n  /**\n   * Activate the next enabled command item.\n   */\n  private _activateNextItem(): void {\n    // Bail if there are no search results.\n    if (!this._results || this._results.length === 0) {\n      return;\n    }\n\n    // Find the next enabled item index.\n    let ai = this._activeIndex;\n    let n = this._results.length;\n    let start = ai < n - 1 ? ai + 1 : 0;\n    let stop = start === 0 ? n - 1 : start - 1;\n    this._activeIndex = ArrayExt.findFirstIndex(\n      this._results, Private.canActivate, start, stop\n    );\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * Activate the previous enabled command item.\n   */\n  private _activatePreviousItem(): void {\n    // Bail if there are no search results.\n    if (!this._results || this._results.length === 0) {\n      return;\n    }\n\n    // Find the previous enabled item index.\n    let ai = this._activeIndex;\n    let n = this._results.length;\n    let start = ai <= 0 ? n - 1 : ai - 1;\n    let stop = start === n - 1 ? 0 : start + 1;\n    this._activeIndex = ArrayExt.findLastIndex(\n      this._results, Private.canActivate, start, stop\n    );\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * Execute the command item at the given index, if possible.\n   */\n  private _execute(index: number): void {\n    // Bail if there are no search results.\n    if (!this._results) {\n      return;\n    }\n\n    // Bail if the index is out of range.\n    let part = this._results[index];\n    if (!part) {\n      return;\n    }\n\n    // Update the search text if the item is a header.\n    if (part.type === 'header') {\n      let input = this.inputNode;\n      input.value = `${part.category.toLowerCase()} `;\n      input.focus();\n      this.refresh();\n      return;\n    }\n\n    // Bail if item is not enabled.\n    if (!part.item.isEnabled) {\n      return;\n    }\n\n    // Execute the item.\n    this.commands.execute(part.item.command, part.item.args);\n\n    // Clear the query text.\n    this.inputNode.value = '';\n\n    // Refresh the search results.\n    this.refresh();\n  }\n\n  /**\n   * Toggle the focused modifier based on the input node focus state.\n   */\n  private _toggleFocused(): void {\n    let focused = document.activeElement === this.inputNode;\n    this.toggleClass('lm-mod-focused', focused);\n    /* <DEPRECATED> */\n    this.toggleClass('p-mod-focused', focused);\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * A signal handler for generic command changes.\n   */\n  private _onGenericChange(): void {\n    this.refresh();\n  }\n\n  private _activeIndex = -1;\n  private _items: CommandPalette.IItem[] = [];\n  private _results: Private.SearchResult[] | null = null;\n}\n\n\n/**\n * The namespace for the `CommandPalette` class statics.\n */\nexport\nnamespace CommandPalette {\n  /**\n   * An options object for creating a command palette.\n   */\n  export\n  interface IOptions {\n    /**\n     * The command registry for use with the command palette.\n     */\n    commands: CommandRegistry;\n\n    /**\n     * A custom renderer for use with the command palette.\n     *\n     * The default is a shared renderer instance.\n     */\n    renderer?: IRenderer;\n  }\n\n  /**\n   * An options object for creating a command item.\n   */\n  export\n  interface IItemOptions {\n    /**\n     * The category for the item.\n     */\n    category: string;\n\n    /**\n     * The command to execute when the item is triggered.\n     */\n    command: string;\n\n    /**\n     * The arguments for the command.\n     *\n     * The default value is an empty object.\n     */\n    args?: ReadonlyJSONObject;\n\n    /**\n     * The rank for the command item.\n     *\n     * The rank is used as a tie-breaker when ordering command items\n     * for display. Items are sorted in the following order:\n     *   1. Text match (lower is better)\n     *   2. Category (locale order)\n     *   3. Rank (lower is better)\n     *   4. Label (locale order)\n     *\n     * The default rank is `Infinity`.\n     */\n    rank?: number;\n  }\n\n  /**\n   * An object which represents an item in a command palette.\n   *\n   * #### Notes\n   * Item objects are created automatically by a command palette.\n   */\n  export\n  interface IItem {\n    /**\n     * The command to execute when the item is triggered.\n     */\n    readonly command: string;\n\n    /**\n     * The arguments for the command.\n     */\n    readonly args: ReadonlyJSONObject;\n\n    /**\n     * The category for the command item.\n     */\n    readonly category: string;\n\n    /**\n     * The rank for the command item.\n     */\n    readonly rank: number;\n\n    /**\n     * The display label for the command item.\n     */\n    readonly label: string;\n\n    /**\n     * The display caption for the command item.\n     */\n    readonly caption: string;\n\n    /**\n     * The icon renderer for the command item.\n     */\n    readonly icon: VirtualElement.IRenderer | undefined\n    /* <DEPRECATED> */ | string /* </DEPRECATED> */;\n\n    /**\n     * The icon class for the command item.\n     */\n    readonly iconClass: string;\n\n    /**\n     * The icon label for the command item.\n     */\n    readonly iconLabel: string;\n\n    /**\n     * The extra class name for the command item.\n     */\n    readonly className: string;\n\n    /**\n     * The dataset for the command item.\n     */\n    readonly dataset: CommandRegistry.Dataset;\n\n    /**\n     * Whether the command item is enabled.\n     */\n    readonly isEnabled: boolean;\n\n    /**\n     * Whether the command item is toggled.\n     */\n    readonly isToggled: boolean;\n\n    /**\n     * Whether the command item is toggleable.\n     */\n    readonly isToggleable: boolean;\n\n    /**\n     * Whether the command item is visible.\n     */\n    readonly isVisible: boolean;\n\n    /**\n     * The key binding for the command item.\n     */\n    readonly keyBinding: CommandRegistry.IKeyBinding | null;\n  }\n\n  /**\n   * The render data for a command palette header.\n   */\n  export\n  interface IHeaderRenderData {\n    /**\n     * The category of the header.\n     */\n    readonly category: string;\n\n    /**\n     * The indices of the matched characters in the category.\n     */\n    readonly indices: ReadonlyArray<number> | null;\n  }\n\n  /**\n   * The render data for a command palette item.\n   */\n  export\n  interface IItemRenderData {\n    /**\n     * The command palette item to render.\n     */\n    readonly item: IItem;\n\n    /**\n     * The indices of the matched characters in the label.\n     */\n    readonly indices: ReadonlyArray<number> | null;\n\n    /**\n     * Whether the item is the active item.\n     */\n    readonly active: boolean;\n  }\n\n  /**\n   * The render data for a command palette empty message.\n   */\n  export\n  interface IEmptyMessageRenderData {\n    /**\n     * The query which failed to match any commands.\n     */\n    query: string;\n  }\n\n  /**\n   * A renderer for use with a command palette.\n   */\n  export\n  interface IRenderer {\n    /**\n     * Render the virtual element for a command palette header.\n     *\n     * @param data - The data to use for rendering the header.\n     *\n     * @returns A virtual element representing the header.\n     */\n    renderHeader(data: IHeaderRenderData): VirtualElement;\n\n    /**\n     * Render the virtual element for a command palette item.\n     *\n     * @param data - The data to use for rendering the item.\n     *\n     * @returns A virtual element representing the item.\n     *\n     * #### Notes\n     * The command palette will not render invisible items.\n     */\n    renderItem(data: IItemRenderData): VirtualElement;\n\n    /**\n     * Render the empty results message for a command palette.\n     *\n     * @param data - The data to use for rendering the message.\n     *\n     * @returns A virtual element representing the message.\n     */\n    renderEmptyMessage(data: IEmptyMessageRenderData): VirtualElement;\n  }\n\n  /**\n   * The default implementation of `IRenderer`.\n   */\n  export\n  class Renderer implements IRenderer {\n    /**\n     * Render the virtual element for a command palette header.\n     *\n     * @param data - The data to use for rendering the header.\n     *\n     * @returns A virtual element representing the header.\n     */\n    renderHeader(data: IHeaderRenderData): VirtualElement {\n      let content = this.formatHeader(data);\n      return h.li({ className:\n        'lm-CommandPalette-header'\n          /* <DEPRECATED> */\n          + ' p-CommandPalette-header'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Render the virtual element for a command palette item.\n     *\n     * @param data - The data to use for rendering the item.\n     *\n     * @returns A virtual element representing the item.\n     */\n    renderItem(data: IItemRenderData): VirtualElement {\n      let className = this.createItemClass(data);\n      let dataset = this.createItemDataset(data);\n      if (data.item.isToggleable) {\n        return (\n          h.li({\n            className,\n            dataset,\n            role: 'checkbox',\n            'aria-checked': `${data.item.isToggled}`\n          },\n          this.renderItemIcon(data),\n          this.renderItemContent(data),\n          this.renderItemShortcut(data))\n        )\n      }\n      return (\n        h.li({\n            className,\n            dataset\n          },\n          this.renderItemIcon(data),\n          this.renderItemContent(data),\n          this.renderItemShortcut(data),\n        )\n      );\n    }\n\n    /**\n     * Render the empty results message for a command palette.\n     *\n     * @param data - The data to use for rendering the message.\n     *\n     * @returns A virtual element representing the message.\n     */\n    renderEmptyMessage(data: IEmptyMessageRenderData): VirtualElement {\n      let content = this.formatEmptyMessage(data);\n      return h.li({\n        className: 'lm-CommandPalette-emptyMessage'\n          /* <DEPRECATED> */\n          + ' p-CommandPalette-emptyMessage'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Render the icon for a command palette item.\n     *\n     * @param data - The data to use for rendering the icon.\n     *\n     * @returns A virtual element representing the icon.\n     */\n    renderItemIcon(data: IItemRenderData): VirtualElement {\n      let className = this.createIconClass(data);\n\n      /* <DEPRECATED> */\n      if (typeof data.item.icon === 'string') {\n        return h.div({className}, data.item.iconLabel);\n      }\n      /* </DEPRECATED> */\n\n      // if data.item.icon is undefined, it will be ignored\n      return h.div({className}, data.item.icon!, data.item.iconLabel);\n    }\n\n    /**\n     * Render the content for a command palette item.\n     *\n     * @param data - The data to use for rendering the content.\n     *\n     * @returns A virtual element representing the content.\n     */\n    renderItemContent(data: IItemRenderData): VirtualElement {\n      return (\n        h.div({\n          className: 'lm-CommandPalette-itemContent'\n            /* <DEPRECATED> */\n            + ' p-CommandPalette-itemContent'\n            /* </DEPRECATED> */\n        },\n          this.renderItemLabel(data),\n          this.renderItemCaption(data)\n        )\n      );\n    }\n\n    /**\n     * Render the label for a command palette item.\n     *\n     * @param data - The data to use for rendering the label.\n     *\n     * @returns A virtual element representing the label.\n     */\n    renderItemLabel(data: IItemRenderData): VirtualElement {\n      let content = this.formatItemLabel(data);\n      return h.div({\n        className: 'lm-CommandPalette-itemLabel'\n          /* <DEPRECATED> */\n          + ' p-CommandPalette-itemLabel'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Render the caption for a command palette item.\n     *\n     * @param data - The data to use for rendering the caption.\n     *\n     * @returns A virtual element representing the caption.\n     */\n    renderItemCaption(data: IItemRenderData): VirtualElement {\n      let content = this.formatItemCaption(data);\n      return h.div({\n        className: 'lm-CommandPalette-itemCaption'\n          /* <DEPRECATED> */\n          + ' p-CommandPalette-itemCaption'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Render the shortcut for a command palette item.\n     *\n     * @param data - The data to use for rendering the shortcut.\n     *\n     * @returns A virtual element representing the shortcut.\n     */\n    renderItemShortcut(data: IItemRenderData): VirtualElement {\n      let content = this.formatItemShortcut(data);\n      return h.div({\n        className: 'lm-CommandPalette-itemShortcut'\n          /* <DEPRECATED> */\n          + ' p-CommandPalette-itemShortcut'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Create the class name for the command palette item.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the command palette item.\n     */\n    createItemClass(data: IItemRenderData): string {\n      // Set up the initial class name.\n      let name = 'lm-CommandPalette-item';\n      /* <DEPRECATED> */\n      name += ' p-CommandPalette-item';\n      /* </DEPRECATED> */\n\n      // Add the boolean state classes.\n      if (!data.item.isEnabled) {\n        name += ' lm-mod-disabled';\n        /* <DEPRECATED> */\n        name += ' p-mod-disabled';\n        /* </DEPRECATED> */\n      }\n      if (data.item.isToggled) {\n        name += ' lm-mod-toggled';\n        /* <DEPRECATED> */\n        name += ' p-mod-toggled';\n        /* </DEPRECATED> */\n      }\n      if (data.active) {\n        name += ' lm-mod-active';\n        /* <DEPRECATED> */\n        name += ' p-mod-active';\n        /* </DEPRECATED> */\n      }\n\n      // Add the extra class.\n      let extra = data.item.className;\n      if (extra) {\n        name += ` ${extra}`;\n      }\n\n      // Return the complete class name.\n      return name;\n    }\n\n    /**\n     * Create the dataset for the command palette item.\n     *\n     * @param data - The data to use for creating the dataset.\n     *\n     * @returns The dataset for the command palette item.\n     */\n    createItemDataset(data: IItemRenderData): ElementDataset {\n      return { ...data.item.dataset, command: data.item.command };\n    }\n\n    /**\n     * Create the class name for the command item icon.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the item icon.\n     */\n    createIconClass(data: IItemRenderData): string {\n      let name = 'lm-CommandPalette-itemIcon';\n      /* <DEPRECATED> */\n      name += ' p-CommandPalette-itemIcon';\n      /* </DEPRECATED> */\n      let extra = data.item.iconClass;\n      return extra ? `${name} ${extra}` : name;\n    }\n\n    /**\n     * Create the render content for the header node.\n     *\n     * @param data - The data to use for the header content.\n     *\n     * @returns The content to add to the header node.\n     */\n    formatHeader(data: IHeaderRenderData): h.Child {\n      if (!data.indices || data.indices.length === 0) {\n        return data.category;\n      }\n      return StringExt.highlight(data.category, data.indices, h.mark);\n    }\n\n    /**\n     * Create the render content for the empty message node.\n     *\n     * @param data - The data to use for the empty message content.\n     *\n     * @returns The content to add to the empty message node.\n     */\n    formatEmptyMessage(data: IEmptyMessageRenderData): h.Child {\n      return `No commands found that match '${data.query}'`;\n    }\n\n    /**\n     * Create the render content for the item shortcut node.\n     *\n     * @param data - The data to use for the shortcut content.\n     *\n     * @returns The content to add to the shortcut node.\n     */\n    formatItemShortcut(data: IItemRenderData): h.Child {\n      let kb = data.item.keyBinding;\n      return kb ? kb.keys.map(CommandRegistry.formatKeystroke).join(', ') : null;\n    }\n\n    /**\n     * Create the render content for the item label node.\n     *\n     * @param data - The data to use for the label content.\n     *\n     * @returns The content to add to the label node.\n     */\n    formatItemLabel(data: IItemRenderData): h.Child {\n      if (!data.indices || data.indices.length === 0) {\n        return data.item.label;\n      }\n      return StringExt.highlight(data.item.label, data.indices, h.mark);\n    }\n\n    /**\n     * Create the render content for the item caption node.\n     *\n     * @param data - The data to use for the caption content.\n     *\n     * @returns The content to add to the caption node.\n     */\n    formatItemCaption(data: IItemRenderData): h.Child {\n      return data.item.caption;\n    }\n  }\n\n  /**\n   * The default `Renderer` instance.\n   */\n  export\n  const defaultRenderer = new Renderer();\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Create the DOM node for a command palette.\n   */\n  export\n  function createNode(): HTMLDivElement {\n    let node = document.createElement('div');\n    let search = document.createElement('div');\n    let wrapper = document.createElement('div');\n    let input = document.createElement('input');\n    let content = document.createElement('ul');\n    let clear = document.createElement('button');\n    search.className = 'lm-CommandPalette-search';\n    wrapper.className = 'lm-CommandPalette-wrapper';\n    input.className = 'lm-CommandPalette-input';\n    clear.className = 'lm-close-icon';\n\n    content.className = 'lm-CommandPalette-content';\n    /* <DEPRECATED> */\n    search.classList.add('p-CommandPalette-search');\n    wrapper.classList.add('p-CommandPalette-wrapper');\n    input.classList.add('p-CommandPalette-input');\n    content.classList.add('p-CommandPalette-content');\n    /* </DEPRECATED> */\n    input.spellcheck = false;\n    wrapper.appendChild(input);\n    wrapper.appendChild(clear);\n    search.appendChild(wrapper);\n    node.appendChild(search);\n    node.appendChild(content);\n    return node;\n  }\n\n  /**\n   * Create a new command item from a command registry and options.\n   */\n  export\n  function createItem(commands: CommandRegistry, options: CommandPalette.IItemOptions): CommandPalette.IItem {\n    return new CommandItem(commands, options);\n  }\n\n  /**\n   * A search result object for a header label.\n   */\n  export\n  interface IHeaderResult {\n    /**\n     * The discriminated type of the object.\n     */\n    readonly type: 'header';\n\n    /**\n     * The category for the header.\n     */\n    readonly category: string;\n\n    /**\n     * The indices of the matched category characters.\n     */\n    readonly indices: ReadonlyArray<number> | null;\n  }\n\n  /**\n   * A search result object for a command item.\n   */\n  export\n  interface IItemResult {\n    /**\n     * The discriminated type of the object.\n     */\n    readonly type: 'item';\n\n    /**\n     * The command item which was matched.\n     */\n    readonly item: CommandPalette.IItem;\n\n    /**\n     * The indices of the matched label characters.\n     */\n    readonly indices: ReadonlyArray<number> | null;\n  }\n\n  /**\n   * A type alias for a search result item.\n   */\n  export\n  type SearchResult = IHeaderResult | IItemResult;\n\n  /**\n   * Search an array of command items for fuzzy matches.\n   */\n  export\n  function search(items: CommandPalette.IItem[], query: string): SearchResult[] {\n    // Fuzzy match the items for the query.\n    let scores = matchItems(items, query);\n\n    // Sort the items based on their score.\n    scores.sort(scoreCmp);\n\n    // Create the results for the search.\n    return createResults(scores);\n  }\n\n  /**\n   * Test whether a result item can be activated.\n   */\n  export\n  function canActivate(result: SearchResult): boolean {\n    return result.type === 'item' && result.item.isEnabled;\n  }\n\n  /**\n   * Normalize a category for a command item.\n   */\n  function normalizeCategory(category: string): string {\n    return category.trim().replace(/\\s+/g, ' ');\n  }\n\n  /**\n   * Normalize the query text for a fuzzy search.\n   */\n  function normalizeQuery(text: string): string {\n    return text.replace(/\\s+/g, '').toLowerCase();\n  }\n\n  /**\n   * An enum of the supported match types.\n   */\n  const enum MatchType { Label, Category, Split, Default }\n\n  /**\n   * A text match score with associated command item.\n   */\n  interface IScore {\n    /**\n     * The numerical type for the text match.\n     */\n    matchType: MatchType;\n\n    /**\n     * The numerical score for the text match.\n     */\n    score: number;\n\n    /**\n     * The indices of the matched category characters.\n     */\n    categoryIndices: number[] | null;\n\n    /**\n     * The indices of the matched label characters.\n     */\n    labelIndices: number[] | null;\n\n    /**\n     * The command item associated with the match.\n     */\n    item: CommandPalette.IItem;\n  }\n\n  /**\n   * Perform a fuzzy match on an array of command items.\n   */\n  function matchItems(items: CommandPalette.IItem[], query: string): IScore[] {\n    // Normalize the query text to lower case with no whitespace.\n    query = normalizeQuery(query);\n\n    // Create the array to hold the scores.\n    let scores: IScore[] = [];\n\n    // Iterate over the items and match against the query.\n    for (let i = 0, n = items.length; i < n; ++i) {\n      // Ignore items which are not visible.\n      let item = items[i];\n      if (!item.isVisible) {\n        continue;\n      }\n\n      // If the query is empty, all items are matched by default.\n      if (!query) {\n        scores.push({\n          matchType: MatchType.Default,\n          categoryIndices: null,\n          labelIndices: null,\n          score: 0, item\n        });\n        continue;\n      }\n\n      // Run the fuzzy search for the item and query.\n      let score = fuzzySearch(item, query);\n\n      // Ignore the item if it is not a match.\n      if (!score) {\n        continue;\n      }\n\n      // Penalize disabled items.\n      // TODO - push disabled items all the way down in sort cmp?\n      if (!item.isEnabled) {\n        score.score += 1000;\n      }\n\n      // Add the score to the results.\n      scores.push(score);\n    }\n\n    // Return the final array of scores.\n    return scores;\n  }\n\n  /**\n   * Perform a fuzzy search on a single command item.\n   */\n  function fuzzySearch(item: CommandPalette.IItem, query: string): IScore | null {\n    // Create the source text to be searched.\n    let category = item.category.toLowerCase();\n    let label = item.label.toLowerCase();\n    let source = `${category} ${label}`;\n\n    // Set up the match score and indices array.\n    let score = Infinity;\n    let indices: number[] | null = null;\n\n    // The regex for search word boundaries\n    let rgx = /\\b\\w/g;\n\n    // Search the source by word boundary.\n    while (true) {\n      // Find the next word boundary in the source.\n      let rgxMatch = rgx.exec(source);\n\n      // Break if there is no more source context.\n      if (!rgxMatch) {\n        break;\n      }\n\n      // Run the string match on the relevant substring.\n      let match = StringExt.matchSumOfDeltas(source, query, rgxMatch.index);\n\n      // Break if there is no match.\n      if (!match) {\n        break;\n      }\n\n      // Update the match if the score is better.\n      if (match && match.score <= score) {\n        score = match.score;\n        indices = match.indices;\n      }\n    }\n\n    // Bail if there was no match.\n    if (!indices || score === Infinity) {\n      return null;\n    }\n\n    // Compute the pivot index between category and label text.\n    let pivot = category.length + 1;\n\n    // Find the slice index to separate matched indices.\n    let j = ArrayExt.lowerBound(indices, pivot, (a, b) => a - b);\n\n    // Extract the matched category and label indices.\n    let categoryIndices = indices.slice(0, j);\n    let labelIndices = indices.slice(j);\n\n    // Adjust the label indices for the pivot offset.\n    for (let i = 0, n = labelIndices.length; i < n; ++i) {\n      labelIndices[i] -= pivot;\n    }\n\n    // Handle a pure label match.\n    if (categoryIndices.length === 0) {\n      return {\n        matchType: MatchType.Label,\n        categoryIndices: null,\n        labelIndices,\n        score, item\n      };\n    }\n\n    // Handle a pure category match.\n    if (labelIndices.length === 0) {\n      return {\n        matchType: MatchType.Category,\n        categoryIndices,\n        labelIndices: null,\n        score, item\n      };\n    }\n\n    // Handle a split match.\n    return {\n      matchType: MatchType.Split,\n      categoryIndices,\n      labelIndices,\n      score, item\n    };\n  }\n\n  /**\n   * A sort comparison function for a match score.\n   */\n  function scoreCmp(a: IScore, b: IScore): number {\n    // First compare based on the match type\n    let m1 = a.matchType - b.matchType;\n    if (m1 !== 0) {\n      return m1;\n    }\n\n    // Otherwise, compare based on the match score.\n    let d1 = a.score - b.score;\n    if (d1 !== 0) {\n      return d1;\n    }\n\n    // Find the match index based on the match type.\n    let i1 = 0;\n    let i2 = 0;\n    switch (a.matchType) {\n    case MatchType.Label:\n      i1 = a.labelIndices![0];\n      i2 = b.labelIndices![0];\n      break;\n    case MatchType.Category:\n    case MatchType.Split:\n      i1 = a.categoryIndices![0];\n      i2 = b.categoryIndices![0];\n      break;\n    }\n\n    // Compare based on the match index.\n    if (i1 !== i2) {\n      return i1 - i2;\n    }\n\n    // Otherwise, compare by category.\n    let d2 = a.item.category.localeCompare(b.item.category);\n    if (d2 !== 0) {\n      return d2;\n    }\n\n    // Otherwise, compare by rank.\n    let r1 = a.item.rank;\n    let r2 = b.item.rank;\n    if (r1 !== r2) {\n      return r1 < r2 ? -1 : 1;  // Infinity safe\n    }\n\n    // Finally, compare by label.\n    return a.item.label.localeCompare(b.item.label);\n  }\n\n  /**\n   * Create the results from an array of sorted scores.\n   */\n  function createResults(scores: IScore[]): SearchResult[] {\n    // Set up an array to track which scores have been visited.\n    let visited = new Array(scores.length);\n    ArrayExt.fill(visited, false);\n\n    // Set up the search results array.\n    let results: SearchResult[] = [];\n\n    // Iterate over each score in the array.\n    for (let i = 0, n = scores.length; i < n; ++i) {\n      // Ignore a score which has already been processed.\n      if (visited[i]) {\n        continue;\n      }\n\n      // Extract the current item and indices.\n      let { item, categoryIndices } = scores[i];\n\n      // Extract the category for the current item.\n      let category = item.category;\n\n      // Add the header result for the category.\n      results.push({ type: 'header', category, indices: categoryIndices });\n\n      // Find the rest of the scores with the same category.\n      for (let j = i; j < n; ++j) {\n        // Ignore a score which has already been processed.\n        if (visited[j]) {\n          continue;\n        }\n\n        // Extract the data for the current score.\n        let { item, labelIndices } = scores[j];\n\n        // Ignore an item with a different category.\n        if (item.category !== category) {\n          continue;\n        }\n\n        // Create the item result for the score.\n        results.push({ type: 'item', item, indices: labelIndices });\n\n        // Mark the score as processed.\n        visited[j] = true;\n      }\n    }\n\n    // Return the final results.\n    return results;\n  }\n\n  /**\n   * A concrete implementation of `CommandPalette.IItem`.\n   */\n  class CommandItem implements CommandPalette.IItem {\n    /**\n     * Construct a new command item.\n     */\n    constructor(commands: CommandRegistry, options: CommandPalette.IItemOptions) {\n      this._commands = commands;\n      this.category = normalizeCategory(options.category);\n      this.command = options.command;\n      this.args = options.args || JSONExt.emptyObject;\n      this.rank = options.rank !== undefined ? options.rank : Infinity;\n    }\n\n    /**\n     * The category for the command item.\n     */\n    readonly category: string;\n\n    /**\n     * The command to execute when the item is triggered.\n     */\n    readonly command: string;\n\n    /**\n     * The arguments for the command.\n     */\n    readonly args: ReadonlyJSONObject;\n\n    /**\n     * The rank for the command item.\n     */\n    readonly rank: number;\n\n    /**\n     * The display label for the command item.\n     */\n    get label(): string {\n      return this._commands.label(this.command, this.args);\n    }\n\n    /**\n     * The icon renderer for the command item.\n     */\n    get icon(): VirtualElement.IRenderer | undefined\n    /* <DEPRECATED> */ | string /* </DEPRECATED> */\n    {\n      return this._commands.icon(this.command, this.args);\n    }\n\n    /**\n     * The icon class for the command item.\n     */\n    get iconClass(): string {\n      return this._commands.iconClass(this.command, this.args);\n    }\n\n    /**\n     * The icon label for the command item.\n     */\n    get iconLabel(): string {\n      return this._commands.iconLabel(this.command, this.args);\n    }\n\n    /**\n     * The display caption for the command item.\n     */\n    get caption(): string {\n      return this._commands.caption(this.command, this.args);\n    }\n\n    /**\n     * The extra class name for the command item.\n     */\n    get className(): string {\n      return this._commands.className(this.command, this.args);\n    }\n\n    /**\n     * The dataset for the command item.\n     */\n    get dataset(): CommandRegistry.Dataset {\n      return this._commands.dataset(this.command, this.args);\n    }\n\n    /**\n     * Whether the command item is enabled.\n     */\n    get isEnabled(): boolean {\n      return this._commands.isEnabled(this.command, this.args);\n    }\n\n    /**\n     * Whether the command item is toggled.\n     */\n    get isToggled(): boolean {\n      return this._commands.isToggled(this.command, this.args);\n    }\n\n    /**\n     * Whether the command item is toggleable.\n     */\n    get isToggleable(): boolean {\n      return this._commands.isToggleable(this.command, this.args);\n    }\n\n    /**\n     * Whether the command item is visible.\n     */\n    get isVisible(): boolean {\n      return this._commands.isVisible(this.command, this.args);\n    }\n\n    /**\n     * The key binding for the command item.\n     */\n    get keyBinding(): CommandRegistry.IKeyBinding | null {\n      let { command, args } = this;\n      return ArrayExt.findLastValue(this._commands.keyBindings, kb => {\n        return kb.command === command && JSONExt.deepEqual(kb.args, args);\n      }) || null;\n    }\n\n    private _commands: CommandRegistry;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt\n} from '@lumino/algorithm';\n\nimport {\n  CommandRegistry\n} from '@lumino/commands';\n\nimport {\n  JSONExt, ReadonlyJSONObject\n} from '@lumino/coreutils';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  getKeyboardLayout\n} from '@lumino/keyboard';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  ARIAAttrNames, ElementARIAAttrs, ElementDataset, VirtualDOM, VirtualElement, h\n} from '@lumino/virtualdom';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A widget which displays items as a canonical menu.\n */\nexport\nclass Menu extends Widget {\n  /**\n   * Construct a new menu.\n   *\n   * @param options - The options for initializing the menu.\n   */\n  constructor(options: Menu.IOptions) {\n    super({ node: Private.createNode() });\n    this.addClass('lm-Menu');\n    /* <DEPRECATED> */\n    this.addClass('p-Menu');\n    /* </DEPRECATED> */\n    this.setFlag(Widget.Flag.DisallowLayout);\n    this.commands = options.commands;\n    this.renderer = options.renderer || Menu.defaultRenderer;\n  }\n\n  /**\n   * Dispose of the resources held by the menu.\n   */\n  dispose(): void {\n    this.close();\n    this._items.length = 0;\n    super.dispose();\n  }\n\n  /**\n   * A signal emitted just before the menu is closed.\n   *\n   * #### Notes\n   * This signal is emitted when the menu receives a `'close-request'`\n   * message, just before it removes itself from the DOM.\n   *\n   * This signal is not emitted if the menu is already detached from\n   * the DOM when it receives the `'close-request'` message.\n   */\n  get aboutToClose(): ISignal<this, void> {\n    return this._aboutToClose;\n  }\n\n  /**\n   * A signal emitted when a new menu is requested by the user.\n   *\n   * #### Notes\n   * This signal is emitted whenever the user presses the right or left\n   * arrow keys, and a submenu cannot be opened or closed in response.\n   *\n   * This signal is useful when implementing menu bars in order to open\n   * the next or previous menu in response to a user key press.\n   *\n   * This signal is only emitted for the root menu in a hierarchy.\n   */\n  get menuRequested(): ISignal<this, 'next' | 'previous'> {\n    return this._menuRequested;\n  }\n\n  /**\n   * The command registry used by the menu.\n   */\n  readonly commands: CommandRegistry;\n\n  /**\n   * The renderer used by the menu.\n   */\n  readonly renderer: Menu.IRenderer;\n\n  /**\n   * The parent menu of the menu.\n   *\n   * #### Notes\n   * This is `null` unless the menu is an open submenu.\n   */\n  get parentMenu(): Menu | null {\n    return this._parentMenu;\n  }\n\n  /**\n   * The child menu of the menu.\n   *\n   * #### Notes\n   * This is `null` unless the menu has an open submenu.\n   */\n  get childMenu(): Menu | null {\n    return this._childMenu;\n  }\n\n  /**\n   * The root menu of the menu hierarchy.\n   */\n  get rootMenu(): Menu {\n    let menu: Menu = this;\n    while (menu._parentMenu) {\n      menu = menu._parentMenu;\n    }\n    return menu;\n  }\n\n  /**\n   * The leaf menu of the menu hierarchy.\n   */\n  get leafMenu(): Menu {\n    let menu: Menu = this;\n    while (menu._childMenu) {\n      menu = menu._childMenu;\n    }\n    return menu;\n  }\n\n  /**\n   * The menu content node.\n   *\n   * #### Notes\n   * This is the node which holds the menu item nodes.\n   *\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get contentNode(): HTMLUListElement {\n    return this.node.getElementsByClassName('lm-Menu-content')[0] as HTMLUListElement;\n  }\n\n  /**\n   * Get the currently active menu item.\n   */\n  get activeItem(): Menu.IItem | null {\n    return this._items[this._activeIndex] || null;\n  }\n\n  /**\n   * Set the currently active menu item.\n   *\n   * #### Notes\n   * If the item cannot be activated, the item will be set to `null`.\n   */\n  set activeItem(value: Menu.IItem | null) {\n    this.activeIndex = value ? this._items.indexOf(value) : -1;\n  }\n\n  /**\n   * Get the index of the currently active menu item.\n   *\n   * #### Notes\n   * This will be `-1` if no menu item is active.\n   */\n  get activeIndex(): number {\n    return this._activeIndex;\n  }\n\n  /**\n   * Set the index of the currently active menu item.\n   *\n   * #### Notes\n   * If the item cannot be activated, the index will be set to `-1`.\n   */\n  set activeIndex(value: number) {\n    // Adjust the value for an out of range index.\n    if (value < 0 || value >= this._items.length) {\n      value = -1;\n    }\n\n    // Ensure the item can be activated.\n    if (value !== -1 && !Private.canActivate(this._items[value])) {\n      value = -1;\n    }\n\n    // Bail if the index will not change.\n    if (this._activeIndex === value) {\n      return;\n    }\n\n    // Update the active index.\n    this._activeIndex = value;\n\n    // Make active element in focus\n    if (this._activeIndex >= 0 && this.contentNode.childNodes[this._activeIndex]) {\n      (this.contentNode.childNodes[this._activeIndex] as HTMLElement).focus();\n    }\n\n    // schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * A read-only array of the menu items in the menu.\n   */\n  get items(): ReadonlyArray<Menu.IItem> {\n    return this._items;\n  }\n\n  /**\n   * Activate the next selectable item in the menu.\n   *\n   * #### Notes\n   * If no item is selectable, the index will be set to `-1`.\n   */\n  activateNextItem(): void {\n    let n = this._items.length;\n    let ai = this._activeIndex;\n    let start = ai < n - 1 ? ai + 1 : 0;\n    let stop = start === 0 ? n - 1 : start - 1;\n    this.activeIndex = ArrayExt.findFirstIndex(\n      this._items, Private.canActivate, start, stop\n    );\n  }\n\n  /**\n   * Activate the previous selectable item in the menu.\n   *\n   * #### Notes\n   * If no item is selectable, the index will be set to `-1`.\n   */\n  activatePreviousItem(): void {\n    let n = this._items.length;\n    let ai = this._activeIndex;\n    let start = ai <= 0 ? n - 1 : ai - 1;\n    let stop = start === n - 1 ? 0 : start + 1;\n    this.activeIndex = ArrayExt.findLastIndex(\n      this._items, Private.canActivate, start, stop\n    );\n  }\n\n  /**\n   * Trigger the active menu item.\n   *\n   * #### Notes\n   * If the active item is a submenu, it will be opened and the first\n   * item will be activated.\n   *\n   * If the active item is a command, the command will be executed.\n   *\n   * If the menu is not attached, this is a no-op.\n   *\n   * If there is no active item, this is a no-op.\n   */\n  triggerActiveItem(): void {\n    // Bail if the menu is not attached.\n    if (!this.isAttached) {\n      return;\n    }\n\n    // Bail if there is no active item.\n    let item = this.activeItem;\n    if (!item) {\n      return;\n    }\n\n    // Cancel the pending timers.\n    this._cancelOpenTimer();\n    this._cancelCloseTimer();\n\n    // If the item is a submenu, open it.\n    if (item.type === 'submenu') {\n      this._openChildMenu(true);\n      return;\n    }\n\n    // Close the root menu before executing the command.\n    this.rootMenu.close();\n\n    // Execute the command for the item.\n    let { command, args } = item;\n    if (this.commands.isEnabled(command, args)) {\n      this.commands.execute(command, args);\n    } else {\n      console.log(`Command '${command}' is disabled.`);\n    }\n  }\n\n  /**\n   * Add a menu item to the end of the menu.\n   *\n   * @param options - The options for creating the menu item.\n   *\n   * @returns The menu item added to the menu.\n   */\n  addItem(options: Menu.IItemOptions): Menu.IItem {\n    return this.insertItem(this._items.length, options);\n  }\n\n  /**\n   * Insert a menu item into the menu at the specified index.\n   *\n   * @param index - The index at which to insert the item.\n   *\n   * @param options - The options for creating the menu item.\n   *\n   * @returns The menu item added to the menu.\n   *\n   * #### Notes\n   * The index will be clamped to the bounds of the items.\n   */\n  insertItem(index: number, options: Menu.IItemOptions): Menu.IItem {\n    // Close the menu if it's attached.\n    if (this.isAttached) {\n      this.close();\n    }\n\n    // Reset the active index.\n    this.activeIndex = -1;\n\n    // Clamp the insert index to the array bounds.\n    let i = Math.max(0, Math.min(index, this._items.length));\n\n    // Create the item for the options.\n    let item = Private.createItem(this, options);\n\n    // Insert the item into the array.\n    ArrayExt.insert(this._items, i, item);\n\n    // Schedule an update of the items.\n    this.update();\n\n    // Return the item added to the menu.\n    return item;\n  }\n\n  /**\n   * Remove an item from the menu.\n   *\n   * @param item - The item to remove from the menu.\n   *\n   * #### Notes\n   * This is a no-op if the item is not in the menu.\n   */\n  removeItem(item: Menu.IItem): void {\n    this.removeItemAt(this._items.indexOf(item));\n  }\n\n  /**\n   * Remove the item at a given index from the menu.\n   *\n   * @param index - The index of the item to remove.\n   *\n   * #### Notes\n   * This is a no-op if the index is out of range.\n   */\n  removeItemAt(index: number): void {\n    // Close the menu if it's attached.\n    if (this.isAttached) {\n      this.close();\n    }\n\n    // Reset the active index.\n    this.activeIndex = -1;\n\n    // Remove the item from the array.\n    let item = ArrayExt.removeAt(this._items, index);\n\n    // Bail if the index is out of range.\n    if (!item) {\n      return\n    }\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * Remove all menu items from the menu.\n   */\n  clearItems(): void {\n    // Close the menu if it's attached.\n    if (this.isAttached) {\n      this.close();\n    }\n\n    // Reset the active index.\n    this.activeIndex = -1;\n\n    // Bail if there is nothing to remove.\n    if (this._items.length === 0) {\n      return;\n    }\n\n    // Clear the items.\n    this._items.length = 0;\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * Open the menu at the specified location.\n   *\n   * @param x - The client X coordinate of the menu location.\n   *\n   * @param y - The client Y coordinate of the menu location.\n   *\n   * @param options - The additional options for opening the menu.\n   *\n   * #### Notes\n   * The menu will be opened at the given location unless it will not\n   * fully fit on the screen. If it will not fit, it will be adjusted\n   * to fit naturally on the screen.\n   *\n   * This is a no-op if the menu is already attached to the DOM.\n   */\n  open(x: number, y: number, options: Menu.IOpenOptions = {}): void {\n    // Bail early if the menu is already attached.\n    if (this.isAttached) {\n      return;\n    }\n\n    // Extract the position options.\n    let forceX = options.forceX || false;\n    let forceY = options.forceY || false;\n\n    // Open the menu as a root menu.\n    Private.openRootMenu(this, x, y, forceX, forceY);\n\n    // Activate the menu to accept keyboard input.\n    this.activate();\n  }\n\n  /**\n   * Handle the DOM events for the menu.\n   *\n   * @param event - The DOM event sent to the menu.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the menu's DOM nodes. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'keydown':\n      this._evtKeyDown(event as KeyboardEvent);\n      break;\n    case 'mouseup':\n      this._evtMouseUp(event as MouseEvent);\n      break;\n    case 'mousemove':\n      this._evtMouseMove(event as MouseEvent);\n      break;\n    case 'mouseenter':\n      this._evtMouseEnter(event as MouseEvent);\n      break;\n    case 'mouseleave':\n      this._evtMouseLeave(event as MouseEvent);\n      break;\n    case 'mousedown':\n      this._evtMouseDown(event as MouseEvent);\n      break;\n    case 'contextmenu':\n      event.preventDefault();\n      event.stopPropagation();\n      break;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('keydown', this);\n    this.node.addEventListener('mouseup', this);\n    this.node.addEventListener('mousemove', this);\n    this.node.addEventListener('mouseenter', this);\n    this.node.addEventListener('mouseleave', this);\n    this.node.addEventListener('contextmenu', this);\n    document.addEventListener('mousedown', this, true);\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('keydown', this);\n    this.node.removeEventListener('mouseup', this);\n    this.node.removeEventListener('mousemove', this);\n    this.node.removeEventListener('mouseenter', this);\n    this.node.removeEventListener('mouseleave', this);\n    this.node.removeEventListener('contextmenu', this);\n    document.removeEventListener('mousedown', this, true);\n  }\n\n  /**\n   * A message handler invoked on an `'activate-request'` message.\n   */\n  protected onActivateRequest(msg: Message): void {\n    if (this.isAttached) {\n      this.node.focus();\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    let items = this._items;\n    let renderer = this.renderer;\n    let activeIndex = this._activeIndex;\n    let collapsedFlags = Private.computeCollapsed(items);\n    let content = new Array<VirtualElement>(items.length);\n    for (let i = 0, n = items.length; i < n; ++i) {\n      let item = items[i];\n      let active = i === activeIndex;\n      let collapsed = collapsedFlags[i];\n      content[i] = renderer.renderItem({\n        item,\n        active,\n        collapsed,\n        onfocus: () => {\n          this.activeIndex = i;\n        }\n      });\n    }\n    VirtualDOM.render(content, this.contentNode);\n  }\n\n  /**\n   * A message handler invoked on a `'close-request'` message.\n   */\n  protected onCloseRequest(msg: Message): void {\n    // Cancel the pending timers.\n    this._cancelOpenTimer();\n    this._cancelCloseTimer();\n\n    // Reset the active index.\n    this.activeIndex = -1;\n\n    // Close any open child menu.\n    let childMenu = this._childMenu;\n    if (childMenu) {\n      this._childIndex = -1;\n      this._childMenu = null;\n      childMenu._parentMenu = null;\n      childMenu.close();\n    }\n\n    // Remove this menu from its parent and activate the parent.\n    let parentMenu = this._parentMenu;\n    if (parentMenu) {\n      this._parentMenu = null;\n      parentMenu._childIndex = -1;\n      parentMenu._childMenu = null;\n      parentMenu.activate();\n    }\n\n    // Emit the `aboutToClose` signal if the menu is attached.\n    if (this.isAttached) {\n      this._aboutToClose.emit(undefined);\n    }\n\n    // Finish closing the menu.\n    super.onCloseRequest(msg);\n  }\n\n  /**\n   * Handle the `'keydown'` event for the menu.\n   *\n   * #### Notes\n   * This listener is attached to the menu node.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // A menu handles all keydown events.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Fetch the key code for the event.\n    let kc = event.keyCode;\n\n    // Enter\n    if (kc === 13) {\n      this.triggerActiveItem();\n      return;\n    }\n\n    // Escape\n    if (kc === 27) {\n      this.close();\n      return;\n    }\n\n    // Left Arrow\n    if (kc === 37) {\n      if (this._parentMenu) {\n        this.close();\n      } else {\n        this._menuRequested.emit('previous');\n      }\n      return;\n    }\n\n    // Up Arrow\n    if (kc === 38) {\n      this.activatePreviousItem();\n      return;\n    }\n\n    // Right Arrow\n    if (kc === 39) {\n      let item = this.activeItem;\n      if (item && item.type === 'submenu') {\n        this.triggerActiveItem();\n      } else {\n        this.rootMenu._menuRequested.emit('next');\n      }\n      return;\n    }\n\n    // Down Arrow\n    if (kc === 40) {\n      this.activateNextItem();\n      return;\n    }\n\n    // Get the pressed key character.\n    let key = getKeyboardLayout().keyForKeydownEvent(event);\n\n    // Bail if the key is not valid.\n    if (!key) {\n      return;\n    }\n\n    // Search for the next best matching mnemonic item.\n    let start = this._activeIndex + 1;\n    let result = Private.findMnemonic(this._items, key, start);\n\n    // Handle the requested mnemonic based on the search results.\n    // If exactly one mnemonic is matched, that item is triggered.\n    // Otherwise, the next mnemonic is activated if available,\n    // followed by the auto mnemonic if available.\n    if (result.index !== -1 && !result.multiple) {\n      this.activeIndex = result.index;\n      this.triggerActiveItem();\n    } else if (result.index !== -1) {\n      this.activeIndex = result.index;\n    } else if (result.auto !== -1) {\n      this.activeIndex = result.auto;\n    }\n  }\n\n  /**\n   * Handle the `'mouseup'` event for the menu.\n   *\n   * #### Notes\n   * This listener is attached to the menu node.\n   */\n  private _evtMouseUp(event: MouseEvent): void {\n    if (event.button !== 0) {\n      return;\n    }\n    event.preventDefault();\n    event.stopPropagation();\n    this.triggerActiveItem();\n  }\n\n  /**\n   * Handle the `'mousemove'` event for the menu.\n   *\n   * #### Notes\n   * This listener is attached to the menu node.\n   */\n  private _evtMouseMove(event: MouseEvent): void {\n    // Hit test the item nodes for the item under the mouse.\n    let index = ArrayExt.findFirstIndex(this.contentNode.children, node => {\n      return ElementExt.hitTest(node, event.clientX, event.clientY);\n    });\n\n    // Bail early if the mouse is already over the active index.\n    if (index === this._activeIndex) {\n      return;\n    }\n\n    // Update and coerce the active index.\n    this.activeIndex = index;\n    index = this.activeIndex;\n\n    // If the index is the current child index, cancel the timers.\n    if (index === this._childIndex) {\n      this._cancelOpenTimer();\n      this._cancelCloseTimer();\n      return;\n    }\n\n    // If a child menu is currently open, start the close timer.\n    if (this._childIndex !== -1) {\n      this._startCloseTimer();\n    }\n\n    // Cancel the open timer to give a full delay for opening.\n    this._cancelOpenTimer();\n\n    // Bail if the active item is not a valid submenu item.\n    let item = this.activeItem;\n    if (!item || item.type !== 'submenu' || !item.submenu) {\n      return;\n    }\n\n    // Start the open timer to open the active item submenu.\n    this._startOpenTimer();\n  }\n\n  /**\n   * Handle the `'mouseenter'` event for the menu.\n   *\n   * #### Notes\n   * This listener is attached to the menu node.\n   */\n  private _evtMouseEnter(event: MouseEvent): void {\n    // Synchronize the active ancestor items.\n    for (let menu = this._parentMenu; menu; menu = menu._parentMenu) {\n      menu._cancelOpenTimer();\n      menu._cancelCloseTimer();\n      menu.activeIndex = menu._childIndex;\n    }\n  }\n\n  /**\n   * Handle the `'mouseleave'` event for the menu.\n   *\n   * #### Notes\n   * This listener is attached to the menu node.\n   */\n  private _evtMouseLeave(event: MouseEvent): void {\n    // Cancel any pending submenu opening.\n    this._cancelOpenTimer();\n\n    // If there is no open child menu, just reset the active index.\n    if (!this._childMenu) {\n      this.activeIndex = -1;\n      return;\n    }\n\n    // If the mouse is over the child menu, cancel the close timer.\n    let { clientX, clientY } = event;\n    if (ElementExt.hitTest(this._childMenu.node, clientX, clientY)) {\n      this._cancelCloseTimer();\n      return;\n    }\n\n    // Otherwise, reset the active index and start the close timer.\n    this.activeIndex = -1;\n    this._startCloseTimer();\n  }\n\n  /**\n   * Handle the `'mousedown'` event for the menu.\n   *\n   * #### Notes\n   * This listener is attached to the document node.\n   */\n  private _evtMouseDown(event: MouseEvent): void {\n    // Bail if the menu is not a root menu.\n    if (this._parentMenu) {\n      return;\n    }\n\n    // The mouse button which is pressed is irrelevant. If the press\n    // is not on a menu, the entire hierarchy is closed and the event\n    // is allowed to propagate. This allows other code to act on the\n    // event, such as focusing the clicked element.\n    if (Private.hitTestMenus(this, event.clientX, event.clientY)) {\n      event.preventDefault();\n      event.stopPropagation();\n    } else {\n      this.close();\n    }\n  }\n\n  /**\n   * Open the child menu at the active index immediately.\n   *\n   * If a different child menu is already open, it will be closed,\n   * even if the active item is not a valid submenu.\n   */\n  private _openChildMenu(activateFirst = false): void {\n    // If the item is not a valid submenu, close the child menu.\n    let item = this.activeItem;\n    if (!item || item.type !== 'submenu' || !item.submenu) {\n      this._closeChildMenu();\n      return;\n    }\n\n    // Do nothing if the child menu will not change.\n    let submenu = item.submenu;\n    if (submenu === this._childMenu) {\n      return;\n    }\n\n    // Ensure the current child menu is closed.\n    this._closeChildMenu();\n\n    // Update the private child state.\n    this._childMenu = submenu;\n    this._childIndex = this._activeIndex;\n\n    // Set the parent menu reference for the child.\n    submenu._parentMenu = this;\n\n    // Ensure the menu is updated and lookup the item node.\n    MessageLoop.sendMessage(this, Widget.Msg.UpdateRequest);\n    let itemNode = this.contentNode.children[this._activeIndex];\n\n    // Open the submenu at the active node.\n    Private.openSubmenu(submenu, itemNode as HTMLElement);\n\n    // Activate the first item if desired.\n    if (activateFirst) {\n      submenu.activeIndex = -1;\n      submenu.activateNextItem();\n    }\n\n    // Activate the child menu.\n    submenu.activate();\n  }\n\n  /**\n   * Close the child menu immediately.\n   *\n   * This is a no-op if a child menu is not open.\n   */\n  private _closeChildMenu(): void {\n    if (this._childMenu) {\n      this._childMenu.close();\n    }\n  }\n\n  /**\n   * Start the open timer, unless it is already pending.\n   */\n  private _startOpenTimer(): void {\n    if (this._openTimerID === 0) {\n      this._openTimerID = window.setTimeout(() => {\n        this._openTimerID = 0;\n        this._openChildMenu();\n      }, Private.TIMER_DELAY);\n    }\n  }\n\n  /**\n   * Start the close timer, unless it is already pending.\n   */\n  private _startCloseTimer(): void {\n    if (this._closeTimerID === 0) {\n      this._closeTimerID = window.setTimeout(() => {\n        this._closeTimerID = 0;\n        this._closeChildMenu();\n      }, Private.TIMER_DELAY);\n    }\n  }\n\n  /**\n   * Cancel the open timer, if the timer is pending.\n   */\n  private _cancelOpenTimer(): void {\n    if (this._openTimerID !== 0) {\n      clearTimeout(this._openTimerID);\n      this._openTimerID = 0;\n    }\n  }\n\n  /**\n   * Cancel the close timer, if the timer is pending.\n   */\n  private _cancelCloseTimer(): void {\n    if (this._closeTimerID !== 0) {\n      clearTimeout(this._closeTimerID);\n      this._closeTimerID = 0;\n    }\n  }\n\n  private _childIndex = -1;\n  private _activeIndex = -1;\n  private _openTimerID = 0;\n  private _closeTimerID = 0;\n  private _items: Menu.IItem[] = [];\n  private _childMenu: Menu | null = null;\n  private _parentMenu: Menu | null = null;\n  private _aboutToClose = new Signal<this, void>(this);\n  private _menuRequested = new Signal<this, 'next' | 'previous'>(this);\n}\n\n\n/**\n * The namespace for the `Menu` class statics.\n */\nexport\nnamespace Menu {\n  /**\n   * An options object for creating a menu.\n   */\n  export\n  interface IOptions {\n    /**\n     * The command registry for use with the menu.\n     */\n    commands: CommandRegistry;\n\n    /**\n     * A custom renderer for use with the menu.\n     *\n     * The default is a shared renderer instance.\n     */\n    renderer?: IRenderer;\n  }\n\n  /**\n   * An options object for the `open` method on a menu.\n   */\n  export\n  interface IOpenOptions {\n    /**\n     * Whether to force the X position of the menu.\n     *\n     * Setting to `true` will disable the logic which repositions the\n     * X coordinate of the menu if it will not fit entirely on screen.\n     *\n     * The default is `false`.\n     */\n    forceX?: boolean;\n\n    /**\n     * Whether to force the Y position of the menu.\n     *\n     * Setting to `true` will disable the logic which repositions the\n     * Y coordinate of the menu if it will not fit entirely on screen.\n     *\n     * The default is `false`.\n     */\n    forceY?: boolean;\n  }\n\n  /**\n   * A type alias for a menu item type.\n   */\n  export\n  type ItemType = 'command' | 'submenu' | 'separator';\n\n  /**\n   * An options object for creating a menu item.\n   */\n  export\n  interface IItemOptions {\n    /**\n     * The type of the menu item.\n     *\n     * The default value is `'command'`.\n     */\n    type?: ItemType;\n\n    /**\n     * The command to execute when the item is triggered.\n     *\n     * The default value is an empty string.\n     */\n    command?: string;\n\n    /**\n     * The arguments for the command.\n     *\n     * The default value is an empty object.\n     */\n    args?: ReadonlyJSONObject;\n\n    /**\n     * The submenu for a `'submenu'` type item.\n     *\n     * The default value is `null`.\n     */\n    submenu?: Menu | null;\n  }\n\n  /**\n   * An object which represents a menu item.\n   *\n   * #### Notes\n   * Item objects are created automatically by a menu.\n   */\n  export\n  interface IItem {\n    /**\n     * The type of the menu item.\n     */\n    readonly type: ItemType;\n\n    /**\n     * The command to execute when the item is triggered.\n     */\n    readonly command: string;\n\n    /**\n     * The arguments for the command.\n     */\n    readonly args: ReadonlyJSONObject;\n\n    /**\n     * The submenu for a `'submenu'` type item.\n     */\n    readonly submenu: Menu | null;\n\n    /**\n     * The display label for the menu item.\n     */\n    readonly label: string;\n\n    /**\n     * The mnemonic index for the menu item.\n     */\n    readonly mnemonic: number;\n\n    /**\n     * The icon renderer for the menu item.\n     */\n    readonly icon: VirtualElement.IRenderer | undefined\n    /* <DEPRECATED> */ | string /* </DEPRECATED> */;\n\n    /**\n     * The icon class for the menu item.\n     */\n    readonly iconClass: string;\n\n    /**\n     * The icon label for the menu item.\n     */\n    readonly iconLabel: string;\n\n    /**\n     * The display caption for the menu item.\n     */\n    readonly caption: string;\n\n    /**\n     * The extra class name for the menu item.\n     */\n    readonly className: string;\n\n    /**\n     * The dataset for the menu item.\n     */\n    readonly dataset: CommandRegistry.Dataset;\n\n    /**\n     * Whether the menu item is enabled.\n     */\n    readonly isEnabled: boolean;\n\n    /**\n     * Whether the menu item is toggled.\n     */\n    readonly isToggled: boolean;\n\n    /**\n     * Whether the menu item is visible.\n     */\n    readonly isVisible: boolean;\n\n    /**\n     * The key binding for the menu item.\n     */\n    readonly keyBinding: CommandRegistry.IKeyBinding | null;\n  }\n\n  /**\n   * An object which holds the data to render a menu item.\n   */\n  export\n  interface IRenderData {\n    /**\n     * The item to be rendered.\n     */\n    readonly item: IItem;\n\n    /**\n     * Whether the item is the active item.\n     */\n    readonly active: boolean;\n\n    /**\n     * Whether the item should be collapsed.\n     */\n    readonly collapsed: boolean;\n\n    /**\n     * Handler for when element is in focus.\n     */\n    readonly onfocus?: () => void;\n  }\n\n  /**\n   * A renderer for use with a menu.\n   */\n  export\n  interface IRenderer {\n    /**\n     * Render the virtual element for a menu item.\n     *\n     * @param data - The data to use for rendering the item.\n     *\n     * @returns A virtual element representing the item.\n     */\n    renderItem(data: IRenderData): VirtualElement;\n  }\n\n  /**\n   * The default implementation of `IRenderer`.\n   *\n   * #### Notes\n   * Subclasses are free to reimplement rendering methods as needed.\n   */\n  export\n  class Renderer implements IRenderer {\n    /**\n     * Construct a new renderer.\n     */\n    constructor() { }\n\n    /**\n     * Render the virtual element for a menu item.\n     *\n     * @param data - The data to use for rendering the item.\n     *\n     * @returns A virtual element representing the item.\n     */\n    renderItem(data: IRenderData): VirtualElement {\n      let className = this.createItemClass(data);\n      let dataset = this.createItemDataset(data);\n      let aria = this.createItemARIA(data);\n      return (\n        h.li(\n          {\n            className,\n            dataset,\n            tabindex: '0',\n            onfocus: data.onfocus,\n            ...aria\n          },\n          this.renderIcon(data),\n          this.renderLabel(data),\n          this.renderShortcut(data),\n          this.renderSubmenu(data)\n        )\n      );\n    }\n\n    /**\n     * Render the icon element for a menu item.\n     *\n     * @param data - The data to use for rendering the icon.\n     *\n     * @returns A virtual element representing the item icon.\n     */\n    renderIcon(data: IRenderData): VirtualElement {\n      let className = this.createIconClass(data);\n\n      /* <DEPRECATED> */\n      if (typeof data.item.icon === 'string') {\n        return h.div({className}, data.item.iconLabel);\n      }\n      /* </DEPRECATED> */\n\n      // if data.item.icon is undefined, it will be ignored\n      return h.div({className}, data.item.icon!, data.item.iconLabel);\n    }\n\n    /**\n     * Render the label element for a menu item.\n     *\n     * @param data - The data to use for rendering the label.\n     *\n     * @returns A virtual element representing the item label.\n     */\n    renderLabel(data: IRenderData): VirtualElement {\n      let content = this.formatLabel(data);\n      return h.div({\n        className: 'lm-Menu-itemLabel'\n          /* <DEPRECATED> */\n          + ' p-Menu-itemLabel'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Render the shortcut element for a menu item.\n     *\n     * @param data - The data to use for rendering the shortcut.\n     *\n     * @returns A virtual element representing the item shortcut.\n     */\n    renderShortcut(data: IRenderData): VirtualElement {\n      let content = this.formatShortcut(data);\n      return h.div({\n        className: 'lm-Menu-itemShortcut'\n          /* <DEPRECATED> */\n          + ' p-Menu-itemShortcut'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Render the submenu icon element for a menu item.\n     *\n     * @param data - The data to use for rendering the submenu icon.\n     *\n     * @returns A virtual element representing the submenu icon.\n     */\n    renderSubmenu(data: IRenderData): VirtualElement {\n      return h.div({\n        className: 'lm-Menu-itemSubmenuIcon'\n          /* <DEPRECATED> */\n          + ' p-Menu-itemSubmenuIcon'\n          /* </DEPRECATED> */\n      });\n    }\n\n    /**\n     * Create the class name for the menu item.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the menu item.\n     */\n    createItemClass(data: IRenderData): string {\n      // Setup the initial class name.\n      let name = 'lm-Menu-item';\n      /* <DEPRECATED> */\n      name += ' p-Menu-item';\n      /* </DEPRECATED> */\n\n      // Add the boolean state classes.\n      if (!data.item.isEnabled) {\n        name += ' lm-mod-disabled';\n        /* <DEPRECATED> */\n        name += ' p-mod-disabled';\n        /* </DEPRECATED> */\n      }\n      if (data.item.isToggled) {\n        name += ' lm-mod-toggled';\n        /* <DEPRECATED> */\n        name += ' p-mod-toggled';\n        /* </DEPRECATED> */\n      }\n      if (!data.item.isVisible) {\n        name += ' lm-mod-hidden';\n        /* <DEPRECATED> */\n        name += ' p-mod-hidden';\n        /* </DEPRECATED> */\n      }\n      if (data.active) {\n        name += ' lm-mod-active';\n        /* <DEPRECATED> */\n        name += ' p-mod-active';\n        /* </DEPRECATED> */\n      }\n      if (data.collapsed) {\n        name += ' lm-mod-collapsed';\n        /* <DEPRECATED> */\n        name += ' p-mod-collapsed';\n        /* </DEPRECATED> */\n      }\n\n      // Add the extra class.\n      let extra = data.item.className;\n      if (extra) {\n        name += ` ${extra}`;\n      }\n\n      // Return the complete class name.\n      return name;\n    }\n\n    /**\n     * Create the dataset for the menu item.\n     *\n     * @param data - The data to use for creating the dataset.\n     *\n     * @returns The dataset for the menu item.\n     */\n    createItemDataset(data: IRenderData): ElementDataset {\n      let result: ElementDataset;\n      let { type, command, dataset } = data.item;\n      if (type === 'command') {\n        result = { ...dataset, type, command };\n      } else {\n        result = { ...dataset, type };\n      }\n      return result;\n    }\n\n    /**\n     * Create the class name for the menu item icon.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the item icon.\n     */\n    createIconClass(data: IRenderData): string {\n      let name = 'lm-Menu-itemIcon';\n      /* <DEPRECATED> */\n      name += ' p-Menu-itemIcon';\n      /* </DEPRECATED> */\n      let extra = data.item.iconClass;\n      return extra ? `${name} ${extra}` : name;\n    }\n    \n    /**\n     * Create the aria attributes for menu item.\n     * \n     * @param data - The data to use for the aria attributes.\n     * \n     * @returns The aria attributes object for the item.\n     */\n    createItemARIA(data: IRenderData): ElementARIAAttrs {\n      let aria: {[T in ARIAAttrNames]?: string} = {};\n      switch (data.item.type) {\n      case 'separator':\n        aria.role = 'presentation';\n        break;\n      case 'submenu':\n        aria['aria-haspopup'] = 'true';\n        if (!data.item.isEnabled) {\n          aria['aria-disabled'] = 'true';\n        }\n        break;\n      default:\n        if (!data.item.isEnabled) {\n          aria['aria-disabled'] = 'true';\n        }\n        aria.role = 'menuitem';\n      }\n      return aria;\n    }\n\n    /**\n     * Create the render content for the label node.\n     *\n     * @param data - The data to use for the label content.\n     *\n     * @returns The content to add to the label node.\n     */\n    formatLabel(data: IRenderData): h.Child {\n      // Fetch the label text and mnemonic index.\n      let { label, mnemonic } = data.item;\n\n      // If the index is out of range, do not modify the label.\n      if (mnemonic < 0 || mnemonic >= label.length) {\n        return label;\n      }\n\n      // Split the label into parts.\n      let prefix = label.slice(0, mnemonic);\n      let suffix = label.slice(mnemonic + 1);\n      let char = label[mnemonic];\n\n      // Wrap the mnemonic character in a span.\n      let span = h.span({\n        className: 'lm-Menu-itemMnemonic'\n          /* <DEPRECATED> */\n          + ' p-Menu-itemMnemonic'\n          /* </DEPRECATED> */\n      }, char);\n\n      // Return the content parts.\n      return [prefix, span, suffix];\n    }\n\n    /**\n     * Create the render content for the shortcut node.\n     *\n     * @param data - The data to use for the shortcut content.\n     *\n     * @returns The content to add to the shortcut node.\n     */\n    formatShortcut(data: IRenderData): h.Child {\n      let kb = data.item.keyBinding;\n      return kb ? kb.keys.map(CommandRegistry.formatKeystroke).join(', ') : null;\n    }\n  }\n\n  /**\n   * The default `Renderer` instance.\n   */\n  export\n  const defaultRenderer = new Renderer();\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The ms delay for opening and closing a submenu.\n   */\n  export\n  const TIMER_DELAY = 300;\n\n  /**\n   * The horizontal pixel overlap for an open submenu.\n   */\n  export\n  const SUBMENU_OVERLAP = 3;\n\n  /**\n   * Create the DOM node for a menu.\n   */\n  export\n  function createNode(): HTMLDivElement {\n    let node = document.createElement('div');\n    let content = document.createElement('ul');\n    content.className = 'lm-Menu-content';\n    /* <DEPRECATED> */\n    content.classList.add('p-Menu-content');\n    /* </DEPRECATED> */\n    node.appendChild(content);\n    content.setAttribute('role', 'menu');\n    node.tabIndex = 0;\n    return node;\n  }\n\n  /**\n   * Test whether a menu item can be activated.\n   */\n  export\n  function canActivate(item: Menu.IItem): boolean {\n    return item.type !== 'separator' && item.isEnabled && item.isVisible;\n  }\n\n  /**\n   * Create a new menu item for an owner menu.\n   */\n  export\n  function createItem(owner: Menu, options: Menu.IItemOptions): Menu.IItem {\n    return new MenuItem(owner.commands, options);\n  }\n\n  /**\n   * Hit test a menu hierarchy starting at the given root.\n   */\n  export\n  function hitTestMenus(menu: Menu, x: number, y: number): boolean {\n    for (let temp: Menu | null = menu; temp; temp = temp.childMenu) {\n      if (ElementExt.hitTest(temp.node, x, y)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Compute which extra separator items should be collapsed.\n   */\n  export\n  function computeCollapsed(items: ReadonlyArray<Menu.IItem>): boolean[] {\n    // Allocate the return array and fill it with `false`.\n    let result = new Array<boolean>(items.length);\n    ArrayExt.fill(result, false);\n\n    // Collapse the leading separators.\n    let k1 = 0;\n    let n = items.length;\n    for (; k1 < n; ++k1) {\n      let item = items[k1];\n      if (!item.isVisible) {\n        continue;\n      }\n      if (item.type !== 'separator') {\n        break;\n      }\n      result[k1] = true;\n    }\n\n    // Hide the trailing separators.\n    let k2 = n - 1;\n    for (; k2 >= 0; --k2) {\n      let item = items[k2];\n      if (!item.isVisible) {\n        continue;\n      }\n      if (item.type !== 'separator') {\n        break;\n      }\n      result[k2] = true;\n    }\n\n    // Hide the remaining consecutive separators.\n    let hide = false;\n    while (++k1 < k2) {\n      let item = items[k1];\n      if (!item.isVisible) {\n        continue;\n      }\n      if (item.type !== 'separator') {\n        hide = false;\n      } else if (hide) {\n        result[k1] = true;\n      } else {\n        hide = true;\n      }\n    }\n\n    // Return the resulting flags.\n    return result;\n  }\n\n  /**\n   * Open a menu as a root menu at the target location.\n   */\n  export\n  function openRootMenu(menu: Menu, x: number, y: number, forceX: boolean, forceY: boolean): void {\n    // Ensure the menu is updated before attaching and measuring.\n    MessageLoop.sendMessage(menu, Widget.Msg.UpdateRequest);\n\n    // Get the current position and size of the main viewport.\n    let px = window.pageXOffset;\n    let py = window.pageYOffset;\n    let cw = document.documentElement.clientWidth;\n    let ch = document.documentElement.clientHeight;\n\n    // Compute the maximum allowed height for the menu.\n    let maxHeight = ch - (forceY ? y : 0);\n\n    // Fetch common variables.\n    let node = menu.node;\n    let style = node.style;\n\n    // Clear the menu geometry and prepare it for measuring.\n    style.top = '';\n    style.left = '';\n    style.width = '';\n    style.height = '';\n    style.visibility = 'hidden';\n    style.maxHeight = `${maxHeight}px`;\n\n    // Attach the menu to the document.\n    Widget.attach(menu, document.body);\n\n    // Measure the size of the menu.\n    let { width, height } = node.getBoundingClientRect();\n\n    // Adjust the X position of the menu to fit on-screen.\n    if (!forceX && (x + width > px + cw)) {\n      x = px + cw - width;\n    }\n\n    // Adjust the Y position of the menu to fit on-screen.\n    if (!forceY && (y + height > py + ch)) {\n      if (y > py + ch) {\n        y = py + ch - height;\n      } else {\n        y = y - height;\n      }\n    }\n\n    // Update the position of the menu to the computed position.\n    style.top = `${Math.max(0, y)}px`;\n    style.left = `${Math.max(0, x)}px`;\n\n    // Finally, make the menu visible on the screen.\n    style.visibility = '';\n  }\n\n  /**\n   * Open a menu as a submenu using an item node for positioning.\n   */\n  export\n  function openSubmenu(submenu: Menu, itemNode: HTMLElement): void {\n    // Ensure the menu is updated before opening.\n    MessageLoop.sendMessage(submenu, Widget.Msg.UpdateRequest);\n\n    // Get the current position and size of the main viewport.\n    let px = window.pageXOffset;\n    let py = window.pageYOffset;\n    let cw = document.documentElement.clientWidth;\n    let ch = document.documentElement.clientHeight;\n\n    // Compute the maximum allowed height for the menu.\n    let maxHeight = ch;\n\n    // Fetch common variables.\n    let node = submenu.node;\n    let style = node.style;\n\n    // Clear the menu geometry and prepare it for measuring.\n    style.top = '';\n    style.left = '';\n    style.width = '';\n    style.height = '';\n    style.visibility = 'hidden';\n    style.maxHeight = `${maxHeight}px`;\n\n    // Attach the menu to the document.\n    Widget.attach(submenu, document.body);\n\n    // Measure the size of the menu.\n    let { width, height } = node.getBoundingClientRect();\n\n    // Compute the box sizing for the menu.\n    let box = ElementExt.boxSizing(submenu.node);\n\n    // Get the bounding rect for the target item node.\n    let itemRect = itemNode.getBoundingClientRect();\n\n    // Compute the target X position.\n    let x = itemRect.right - SUBMENU_OVERLAP;\n\n    // Adjust the X position to fit on the screen.\n    if (x + width > px + cw) {\n      x = itemRect.left + SUBMENU_OVERLAP - width;\n    }\n\n    // Compute the target Y position.\n    let y = itemRect.top - box.borderTop - box.paddingTop;\n\n    // Adjust the Y position to fit on the screen.\n    if (y + height > py + ch) {\n      y = itemRect.bottom + box.borderBottom + box.paddingBottom - height;\n    }\n\n    // Update the position of the menu to the computed position.\n    style.top = `${Math.max(0, y)}px`;\n    style.left = `${Math.max(0, x)}px`;\n\n    // Finally, make the menu visible on the screen.\n    style.visibility = '';\n  }\n\n  /**\n   * The results of a mnemonic search.\n   */\n  export\n  interface IMnemonicResult {\n    /**\n     * The index of the first matching mnemonic item, or `-1`.\n     */\n    index: number;\n\n    /**\n     * Whether multiple mnemonic items matched.\n     */\n    multiple: boolean;\n\n    /**\n     * The index of the first auto matched non-mnemonic item.\n     */\n    auto: number;\n  }\n\n  /**\n   * Find the best matching mnemonic item.\n   *\n   * The search starts at the given index and wraps around.\n   */\n  export\n  function findMnemonic(items: ReadonlyArray<Menu.IItem>, key: string, start: number): IMnemonicResult {\n    // Setup the result variables.\n    let index = -1;\n    let auto = -1;\n    let multiple = false;\n\n    // Normalize the key to upper case.\n    let upperKey = key.toUpperCase();\n\n    // Search the items from the given start index.\n    for (let i = 0, n = items.length; i < n; ++i) {\n      // Compute the wrapped index.\n      let k = (i + start) % n;\n\n      // Lookup the item\n      let item = items[k];\n\n      // Ignore items which cannot be activated.\n      if (!canActivate(item)) {\n        continue;\n      }\n\n      // Ignore items with an empty label.\n      let label = item.label;\n      if (label.length === 0) {\n        continue;\n      }\n\n      // Lookup the mnemonic index for the label.\n      let mn = item.mnemonic;\n\n      // Handle a valid mnemonic index.\n      if (mn >= 0 && mn < label.length) {\n        if (label[mn].toUpperCase() === upperKey) {\n          if (index === -1) {\n            index = k;\n          } else {\n            multiple = true;\n          }\n        }\n        continue;\n      }\n\n      // Finally, handle the auto index if possible.\n      if (auto === -1 && label[0].toUpperCase() === upperKey) {\n        auto = k;\n      }\n    }\n\n    // Return the search results.\n    return { index, multiple, auto };\n  }\n\n  /**\n   * A concrete implementation of `Menu.IItem`.\n   */\n  class MenuItem implements Menu.IItem {\n    /**\n     * Construct a new menu item.\n     */\n    constructor(commands: CommandRegistry, options: Menu.IItemOptions) {\n      this._commands = commands;\n      this.type = options.type || 'command';\n      this.command = options.command || '';\n      this.args = options.args || JSONExt.emptyObject;\n      this.submenu = options.submenu || null;\n    }\n\n    /**\n     * The type of the menu item.\n     */\n    readonly type: Menu.ItemType;\n\n    /**\n     * The command to execute when the item is triggered.\n     */\n    readonly command: string;\n\n    /**\n     * The arguments for the command.\n     */\n    readonly args: ReadonlyJSONObject;\n\n    /**\n     * The submenu for a `'submenu'` type item.\n     */\n    readonly submenu: Menu | null;\n\n    /**\n     * The display label for the menu item.\n     */\n    get label(): string {\n      if (this.type === 'command') {\n        return this._commands.label(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.label;\n      }\n      return '';\n    }\n\n    /**\n     * The mnemonic index for the menu item.\n     */\n    get mnemonic(): number {\n      if (this.type === 'command') {\n        return this._commands.mnemonic(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.mnemonic;\n      }\n      return -1;\n    }\n\n    /**\n     * The icon renderer for the menu item.\n     */\n    get icon(): VirtualElement.IRenderer | undefined\n    /* <DEPRECATED> */ | string /* </DEPRECATED> */\n    {\n      if (this.type === 'command') {\n        return this._commands.icon(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.icon;\n      }\n\n      /* <DEPRECATED> */\n      // alias to icon class if not otherwise defined\n      return this.iconClass;\n      /* </DEPRECATED> */\n\n      /* <FUTURE>\n      return undefined;\n      </FUTURE> */\n    }\n\n    /**\n     * The icon class for the menu item.\n     */\n    get iconClass(): string {\n      if (this.type === 'command') {\n        return this._commands.iconClass(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.iconClass;\n      }\n      return '';\n    }\n\n    /**\n     * The icon label for the menu item.\n     */\n    get iconLabel(): string {\n      if (this.type === 'command') {\n        return this._commands.iconLabel(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.iconLabel;\n      }\n      return '';\n    }\n\n\n    /**\n     * The display caption for the menu item.\n     */\n    get caption(): string {\n      if (this.type === 'command') {\n        return this._commands.caption(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.caption;\n      }\n      return '';\n    }\n\n    /**\n     * The extra class name for the menu item.\n     */\n    get className(): string {\n      if (this.type === 'command') {\n        return this._commands.className(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.className;\n      }\n      return '';\n    }\n\n    /**\n     * The dataset for the menu item.\n     */\n    get dataset(): CommandRegistry.Dataset {\n      if (this.type === 'command') {\n        return this._commands.dataset(this.command, this.args);\n      }\n      if (this.type === 'submenu' && this.submenu) {\n        return this.submenu.title.dataset;\n      }\n      return {};\n    }\n\n    /**\n     * Whether the menu item is enabled.\n     */\n    get isEnabled(): boolean {\n      if (this.type === 'command') {\n        return this._commands.isEnabled(this.command, this.args);\n      }\n      if (this.type === 'submenu') {\n        return this.submenu !== null;\n      }\n      return true;\n    }\n\n    /**\n     * Whether the menu item is toggled.\n     */\n    get isToggled(): boolean {\n      if (this.type === 'command') {\n        return this._commands.isToggled(this.command, this.args);\n      }\n      return false;\n    }\n\n    /**\n     * Whether the menu item is visible.\n     */\n    get isVisible(): boolean {\n      if (this.type === 'command') {\n        return this._commands.isVisible(this.command, this.args);\n      }\n      if (this.type === 'submenu') {\n        return this.submenu !== null;\n      }\n      return true;\n    }\n\n    /**\n     * The key binding for the menu item.\n     */\n    get keyBinding(): CommandRegistry.IKeyBinding | null {\n      if (this.type === 'command') {\n        let { command, args } = this;\n        return ArrayExt.findLastValue(this._commands.keyBindings, kb => {\n          return kb.command === command && JSONExt.deepEqual(kb.args, args);\n        }) || null;\n      }\n      return null;\n    }\n\n    private _commands: CommandRegistry;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport { ArrayExt, each } from '@lumino/algorithm';\n\nimport { CommandRegistry } from '@lumino/commands';\n\nimport { DisposableDelegate, IDisposable } from '@lumino/disposable';\n\nimport { Selector } from '@lumino/domutils';\n\nimport { Menu } from './menu';\n\n/**\n * An object which implements a universal context menu.\n *\n * #### Notes\n * The items shown in the context menu are determined by CSS selector\n * matching against the DOM hierarchy at the site of the mouse click.\n * This is similar in concept to how keyboard shortcuts are matched\n * in the command registry.\n */\nexport class ContextMenu {\n  /**\n   * Construct a new context menu.\n   *\n   * @param options - The options for initializing the menu.\n   */\n  constructor(options: ContextMenu.IOptions) {\n    const { groupByTarget, sortBySelector, ...others } = options;\n    this.menu = new Menu(others);\n    this._groupByTarget = groupByTarget !== false;\n    this._sortBySelector = sortBySelector !== false;\n  }\n\n  /**\n   * The menu widget which displays the matched context items.\n   */\n  readonly menu: Menu;\n\n  /**\n   * Add an item to the context menu.\n   *\n   * @param options - The options for creating the item.\n   *\n   * @returns A disposable which will remove the item from the menu.\n   */\n  addItem(options: ContextMenu.IItemOptions): IDisposable {\n    // Create an item from the given options.\n    let item = Private.createItem(options, this._idTick++);\n\n    // Add the item to the internal array.\n    this._items.push(item);\n\n    // Return a disposable which will remove the item.\n    return new DisposableDelegate(() => {\n      ArrayExt.removeFirstOf(this._items, item);\n    });\n  }\n\n  /**\n   * Open the context menu in response to a `'contextmenu'` event.\n   *\n   * @param event - The `'contextmenu'` event of interest.\n   *\n   * @returns `true` if the menu was opened, or `false` if no items\n   *   matched the event and the menu was not opened.\n   *\n   * #### Notes\n   * This method will populate the context menu with items which match\n   * the propagation path of the event, then open the menu at the mouse\n   * position indicated by the event.\n   */\n  open(event: MouseEvent): boolean {\n    // Clear the current contents of the context menu.\n    this.menu.clearItems();\n\n    // Bail early if there are no items to match.\n    if (this._items.length === 0) {\n      return false;\n    }\n\n    // Find the matching items for the event.\n    let items = Private.matchItems(\n      this._items,\n      event,\n      this._groupByTarget,\n      this._sortBySelector\n    );\n\n    // Bail if there are no matching items.\n    if (!items || items.length === 0) {\n      return false;\n    }\n\n    // Add the filtered items to the menu.\n    each(items, (item) => {\n      this.menu.addItem(item);\n    });\n\n    // Open the context menu at the current mouse position.\n    this.menu.open(event.clientX, event.clientY);\n\n    // Indicate success.\n    return true;\n  }\n\n  private _groupByTarget: boolean = true;\n  private _idTick = 0;\n  private _items: Private.IItem[] = [];\n  private _sortBySelector: boolean = true;\n}\n\n/**\n * The namespace for the `ContextMenu` class statics.\n */\nexport namespace ContextMenu {\n  /**\n   * An options object for initializing a context menu.\n   */\n  export interface IOptions {\n    /**\n     * The command registry to use with the context menu.\n     */\n    commands: CommandRegistry;\n\n    /**\n     * A custom renderer for use with the context menu.\n     */\n    renderer?: Menu.IRenderer;\n\n    /**\n     * Whether to sort by selector and rank or only rank.\n     *\n     * Default true.\n     */\n    sortBySelector?: boolean;\n\n    /**\n     * Whether to group items following the DOM hierarchy.\n     *\n     * Default true.\n     *\n     * #### Note\n     * If true, when the mouse event occurs on element `span` within `div.top`,\n     * the items matching `div.top` will be shown before the ones matching `body`.\n     */\n    groupByTarget?: boolean;\n  }\n\n  /**\n   * An options object for creating a context menu item.\n   */\n  export interface IItemOptions extends Menu.IItemOptions {\n    /**\n     * The CSS selector for the context menu item.\n     *\n     * The context menu item will only be displayed in the context menu\n     * when the selector matches a node on the propagation path of the\n     * contextmenu event. This allows the menu item to be restricted to\n     * user-defined contexts.\n     *\n     * The selector must not contain commas.\n     */\n    selector: string;\n\n    /**\n     * The rank for the item.\n     *\n     * The rank is used as a tie-breaker when ordering context menu\n     * items for display. Items are sorted in the following order:\n     *   1. Depth in the DOM tree (deeper is better)\n     *   2. Selector specificity (higher is better)\n     *   3. Rank (lower is better)\n     *   4. Insertion order\n     *\n     * The default rank is `Infinity`.\n     */\n    rank?: number;\n  }\n}\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A normalized item for a context menu.\n   */\n  export interface IItem extends Menu.IItemOptions {\n    /**\n     * The selector for the item.\n     */\n    selector: string;\n\n    /**\n     * The rank for the item.\n     */\n    rank: number;\n\n    /**\n     * The tie-breaking id for the item.\n     */\n    id: number;\n  }\n\n  /**\n   * Create a normalized context menu item from an options object.\n   */\n  export function createItem(\n    options: ContextMenu.IItemOptions,\n    id: number\n  ): IItem {\n    let selector = validateSelector(options.selector);\n    let rank = options.rank !== undefined ? options.rank : Infinity;\n    return { ...options, selector, rank, id };\n  }\n\n  /**\n   * Find the items which match a context menu event.\n   *\n   * The results are sorted by DOM level, specificity, and rank.\n   */\n  export function matchItems(\n    items: IItem[],\n    event: MouseEvent,\n    groupByTarget: boolean,\n    sortBySelector: boolean\n  ): IItem[] | null {\n    // Look up the target of the event.\n    let target = event.target as Element | null;\n\n    // Bail if there is no target.\n    if (!target) {\n      return null;\n    }\n\n    // Look up the current target of the event.\n    let currentTarget = event.currentTarget as Element | null;\n\n    // Bail if there is no current target.\n    if (!currentTarget) {\n      return null;\n    }\n\n    // There are some third party libraries that cause the `target` to\n    // be detached from the DOM before lumino can process the event.\n    // If that happens, search for a new target node by point. If that\n    // node is still dangling, bail.\n    if (!currentTarget.contains(target)) {\n      target = document.elementFromPoint(event.clientX, event.clientY);\n      if (!target || !currentTarget.contains(target)) {\n        return null;\n      }\n    }\n\n    // Set up the result array.\n    let result: IItem[] = [];\n\n    // Copy the items array to allow in-place modification.\n    let availableItems: Array<IItem | null> = items.slice();\n\n    // Walk up the DOM hierarchy searching for matches.\n    while (target !== null) {\n      // Set up the match array for this DOM level.\n      let matches: IItem[] = [];\n\n      // Search the remaining items for matches.\n      for (let i = 0, n = availableItems.length; i < n; ++i) {\n        // Fetch the item.\n        let item = availableItems[i];\n\n        // Skip items which are already consumed.\n        if (!item) {\n          continue;\n        }\n\n        // Skip items which do not match the element.\n        if (!Selector.matches(target, item.selector)) {\n          continue;\n        }\n\n        // Add the matched item to the result for this DOM level.\n        matches.push(item);\n\n        // Mark the item as consumed.\n        availableItems[i] = null;\n      }\n\n      // Sort the matches for this level and add them to the results.\n      if (matches.length !== 0) {\n        if (groupByTarget) {\n          matches.sort(sortBySelector ? itemCmp : itemCmpRank);\n        }\n        result.push(...matches);\n      }\n\n      // Stop searching at the limits of the DOM range.\n      if (target === currentTarget) {\n        break;\n      }\n\n      // Step to the parent DOM level.\n      target = target.parentElement;\n    }\n\n    if (!groupByTarget) {\n      result.sort(sortBySelector ? itemCmp : itemCmpRank);\n    }\n\n    // Return the matched and sorted results.\n    return result;\n  }\n\n  /**\n   * Validate the selector for a menu item.\n   *\n   * This returns the validated selector, or throws if the selector is\n   * invalid or contains commas.\n   */\n  function validateSelector(selector: string): string {\n    if (selector.indexOf(',') !== -1) {\n      throw new Error(`Selector cannot contain commas: ${selector}`);\n    }\n    if (!Selector.isValid(selector)) {\n      throw new Error(`Invalid selector: ${selector}`);\n    }\n    return selector;\n  }\n\n  /**\n   * A sort comparison function for a context menu item by ranks.\n   */\n  function itemCmpRank(a: IItem, b: IItem): number {\n    // Sort based on rank.\n    let r1 = a.rank;\n    let r2 = b.rank;\n    if (r1 !== r2) {\n      return r1 < r2 ? -1 : 1; // Infinity-safe\n    }\n\n    // When all else fails, sort by item id.\n    return a.id - b.id;\n  }\n\n  /**\n   * A sort comparison function for a context menu item by selectors and ranks.\n   */\n  function itemCmp(a: IItem, b: IItem): number {\n    // Sort first based on selector specificity.\n    let s1 = Selector.calculateSpecificity(a.selector);\n    let s2 = Selector.calculateSpecificity(b.selector);\n    if (s1 !== s2) {\n      return s2 - s1;\n    }\n\n    // If specificities are equal\n    return itemCmpRank(a, b);\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, each\n} from '@lumino/algorithm';\n\nimport {\n  IDisposable\n} from '@lumino/disposable';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Drag\n} from '@lumino/dragdrop';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  ElementARIAAttrs, ElementDataset, ElementInlineStyle, VirtualDOM, VirtualElement, h\n} from '@lumino/virtualdom';\n\nimport {\n  Title\n} from './title';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A widget which displays titles as a single row or column of tabs.\n *\n * #### Notes\n * If CSS transforms are used to rotate nodes for vertically oriented\n * text, then tab dragging will not work correctly. The `tabsMovable`\n * property should be set to `false` when rotating nodes from CSS.\n */\nexport\nclass TabBar<T> extends Widget {\n  /**\n   * Construct a new tab bar.\n   *\n   * @param options - The options for initializing the tab bar.\n   */\n  constructor(options: TabBar.IOptions<T> = {}) {\n    super({ node: Private.createNode() });\n    this.addClass('lm-TabBar');\n    /* <DEPRECATED> */\n    this.addClass('p-TabBar');\n    /* </DEPRECATED> */\n    this.contentNode.setAttribute('role', 'tablist');\n    this.setFlag(Widget.Flag.DisallowLayout);\n    this.tabsMovable = options.tabsMovable || false;\n    this.titlesEditable = options.titlesEditable || false;\n    this.allowDeselect = options.allowDeselect || false;\n    this.addButtonEnabled = options.addButtonEnabled || false;\n    this.insertBehavior = options.insertBehavior || 'select-tab-if-needed';\n    this.name = options.name || '';\n    this.orientation = options.orientation || 'horizontal';\n    this.removeBehavior = options.removeBehavior || 'select-tab-after';\n    this.renderer = options.renderer || TabBar.defaultRenderer;\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose(): void {\n    this._releaseMouse();\n    this._titles.length = 0;\n    this._previousTitle = null;\n    super.dispose();\n  }\n\n  /**\n   * A signal emitted when the current tab is changed.\n   *\n   * #### Notes\n   * This signal is emitted when the currently selected tab is changed\n   * either through user or programmatic interaction.\n   *\n   * Notably, this signal is not emitted when the index of the current\n   * tab changes due to tabs being inserted, removed, or moved. It is\n   * only emitted when the actual current tab node is changed.\n   */\n  get currentChanged(): ISignal<this, TabBar.ICurrentChangedArgs<T>> {\n    return this._currentChanged;\n  }\n\n  /**\n   * A signal emitted when a tab is moved by the user.\n   *\n   * #### Notes\n   * This signal is emitted when a tab is moved by user interaction.\n   *\n   * This signal is not emitted when a tab is moved programmatically.\n   */\n  get tabMoved(): ISignal<this, TabBar.ITabMovedArgs<T>> {\n    return this._tabMoved;\n  }\n\n  /**\n   * A signal emitted when a tab is clicked by the user.\n   *\n   * #### Notes\n   * If the clicked tab is not the current tab, the clicked tab will be\n   * made current and the `currentChanged` signal will be emitted first.\n   *\n   * This signal is emitted even if the clicked tab is the current tab.\n   */\n  get tabActivateRequested(): ISignal<this, TabBar.ITabActivateRequestedArgs<T>> {\n    return this._tabActivateRequested;\n  }\n\n  /**\n   * A signal emitted when the tab bar add button is clicked.\n   */\n  get addRequested(): ISignal<this, void> {\n    return this._addRequested;\n  }\n\n  /**\n   * A signal emitted when a tab close icon is clicked.\n   *\n   * #### Notes\n   * This signal is not emitted unless the tab title is `closable`.\n   */\n  get tabCloseRequested(): ISignal<this, TabBar.ITabCloseRequestedArgs<T>> {\n    return this._tabCloseRequested;\n  }\n\n  /**\n   * A signal emitted when a tab is dragged beyond the detach threshold.\n   *\n   * #### Notes\n   * This signal is emitted when the user drags a tab with the mouse,\n   * and mouse is dragged beyond the detach threshold.\n   *\n   * The consumer of the signal should call `releaseMouse` and remove\n   * the tab in order to complete the detach.\n   *\n   * This signal is only emitted once per drag cycle.\n   */\n  get tabDetachRequested(): ISignal<this, TabBar.ITabDetachRequestedArgs<T>> {\n    return this._tabDetachRequested;\n  }\n\n  /**\n   * The renderer used by the tab bar.\n   */\n  readonly renderer: TabBar.IRenderer<T>;\n\n  /**\n   * Whether the tabs are movable by the user.\n   *\n   * #### Notes\n   * Tabs can always be moved programmatically.\n   */\n  tabsMovable: boolean;\n\n  /**\n   * Whether the titles can be user-edited.\n   *\n   */\n  get titlesEditable(): boolean {\n    return this._titlesEditable;\n  }\n\n  /**\n   * Set whether titles can be user edited.\n   *\n   */\n  set titlesEditable(value: boolean) {\n    this._titlesEditable = value;\n  }\n\n  /**\n   * Whether a tab can be deselected by the user.\n   *\n   * #### Notes\n   * Tabs can be always be deselected programmatically.\n   */\n  allowDeselect: boolean;\n\n  /**\n   * The selection behavior when inserting a tab.\n   */\n  insertBehavior: TabBar.InsertBehavior;\n\n  /**\n   * The selection behavior when removing a tab.\n   */\n  removeBehavior: TabBar.RemoveBehavior;\n\n  /**\n   * Get the currently selected title.\n   *\n   * #### Notes\n   * This will be `null` if no tab is selected.\n   */\n  get currentTitle(): Title<T> | null {\n    return this._titles[this._currentIndex] || null;\n  }\n\n  /**\n   * Set the currently selected title.\n   *\n   * #### Notes\n   * If the title does not exist, the title will be set to `null`.\n   */\n  set currentTitle(value: Title<T> | null) {\n    this.currentIndex = value ? this._titles.indexOf(value) : -1;\n  }\n\n  /**\n   * Get the index of the currently selected tab.\n   *\n   * #### Notes\n   * This will be `-1` if no tab is selected.\n   */\n  get currentIndex(): number {\n    return this._currentIndex;\n  }\n\n  /**\n   * Set the index of the currently selected tab.\n   *\n   * #### Notes\n   * If the value is out of range, the index will be set to `-1`.\n   */\n  set currentIndex(value: number) {\n    // Adjust for an out of range index.\n    if (value < 0 || value >= this._titles.length) {\n      value = -1;\n    }\n\n    // Bail early if the index will not change.\n    if (this._currentIndex === value) {\n      return;\n    }\n\n    // Look up the previous index and title.\n    let pi = this._currentIndex;\n    let pt = this._titles[pi] || null;\n\n    // Look up the current index and title.\n    let ci = value;\n    let ct = this._titles[ci] || null;\n\n    // Update the current index and previous title.\n    this._currentIndex = ci;\n    this._previousTitle = pt;\n\n    // Schedule an update of the tabs.\n    this.update();\n\n    // Emit the current changed signal.\n    this._currentChanged.emit({\n      previousIndex: pi, previousTitle: pt,\n      currentIndex: ci, currentTitle: ct\n    });\n  }\n\n  /**\n   * Get the name of the tab bar.\n   */\n  get name(): string {\n    return this._name;\n  }\n\n  /**\n   * Set the name of the tab bar.\n   */\n  set name(value: string) {\n    this._name = value;\n    if (value) {\n      this.contentNode.setAttribute('aria-label', value);\n    } else {\n      this.contentNode.removeAttribute('aria-label');\n    }\n  }\n\n  /**\n   * Get the orientation of the tab bar.\n   *\n   * #### Notes\n   * This controls whether the tabs are arranged in a row or column.\n   */\n  get orientation(): TabBar.Orientation {\n    return this._orientation;\n  }\n\n  /**\n   * Set the orientation of the tab bar.\n   *\n   * #### Notes\n   * This controls whether the tabs are arranged in a row or column.\n   */\n  set orientation(value: TabBar.Orientation) {\n    // Do nothing if the orientation does not change.\n    if (this._orientation === value) {\n      return;\n    }\n\n    // Release the mouse before making any changes.\n    this._releaseMouse();\n\n    // Toggle the orientation values.\n    this._orientation = value;\n    this.dataset['orientation'] = value;\n    this.contentNode.setAttribute('aria-orientation', value);\n  }\n\n  /**\n   * Whether the add button is enabled.\n   */\n  get addButtonEnabled(): boolean {\n    return this._addButtonEnabled;\n  }\n\n  /**\n   * Set whether the add button is enabled.\n   */\n  set addButtonEnabled(value: boolean) {\n    // Do nothing if the value does not change.\n    if (this._addButtonEnabled === value) {\n      return;\n    }\n\n    this._addButtonEnabled = value;\n    if (value) {\n      this.addButtonNode.classList.remove('lm-mod-hidden');\n    } else {\n      this.addButtonNode.classList.add('lm-mod-hidden');\n    }\n  }\n\n  /**\n   * A read-only array of the titles in the tab bar.\n   */\n  get titles(): ReadonlyArray<Title<T>> {\n    return this._titles;\n  }\n\n  /**\n   * The tab bar content node.\n   *\n   * #### Notes\n   * This is the node which holds the tab nodes.\n   *\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get contentNode(): HTMLUListElement {\n    return this.node.getElementsByClassName('lm-TabBar-content')[0] as HTMLUListElement;\n  }\n\n\n  /**\n   * The tab bar add button node.\n   *\n   * #### Notes\n   * This is the node which holds the add button.\n   *\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get addButtonNode(): HTMLDivElement {\n    return this.node.getElementsByClassName('lm-TabBar-addButton')[0] as HTMLDivElement;\n  }\n\n  /**\n   * Add a tab to the end of the tab bar.\n   *\n   * @param value - The title which holds the data for the tab,\n   *   or an options object to convert to a title.\n   *\n   * @returns The title object added to the tab bar.\n   *\n   * #### Notes\n   * If the title is already added to the tab bar, it will be moved.\n   */\n  addTab(value: Title<T> | Title.IOptions<T>): Title<T> {\n    return this.insertTab(this._titles.length, value);\n  }\n\n  /**\n   * Insert a tab into the tab bar at the specified index.\n   *\n   * @param index - The index at which to insert the tab.\n   *\n   * @param value - The title which holds the data for the tab,\n   *   or an options object to convert to a title.\n   *\n   * @returns The title object added to the tab bar.\n   *\n   * #### Notes\n   * The index will be clamped to the bounds of the tabs.\n   *\n   * If the title is already added to the tab bar, it will be moved.\n   */\n  insertTab(index: number, value: Title<T> | Title.IOptions<T>): Title<T> {\n    // Release the mouse before making any changes.\n    this._releaseMouse();\n\n    // Coerce the value to a title.\n    let title = Private.asTitle(value);\n\n    // Look up the index of the title.\n    let i = this._titles.indexOf(title);\n\n    // Clamp the insert index to the array bounds.\n    let j = Math.max(0, Math.min(index, this._titles.length));\n\n    // If the title is not in the array, insert it.\n    if (i === -1) {\n      // Insert the title into the array.\n      ArrayExt.insert(this._titles, j, title);\n\n      // Connect to the title changed signal.\n      title.changed.connect(this._onTitleChanged, this);\n\n      // Schedule an update of the tabs.\n      this.update();\n\n      // Adjust the current index for the insert.\n      this._adjustCurrentForInsert(j, title);\n\n      // Return the title added to the tab bar.\n      return title;\n    }\n\n    // Otherwise, the title exists in the array and should be moved.\n\n    // Adjust the index if the location is at the end of the array.\n    if (j === this._titles.length) {\n      j--;\n    }\n\n    // Bail if there is no effective move.\n    if (i === j) {\n      return title;\n    }\n\n    // Move the title to the new location.\n    ArrayExt.move(this._titles, i, j);\n\n    // Schedule an update of the tabs.\n    this.update();\n\n    // Adjust the current index for the move.\n    this._adjustCurrentForMove(i, j);\n\n    // Return the title added to the tab bar.\n    return title;\n  }\n\n  /**\n   * Remove a tab from the tab bar.\n   *\n   * @param title - The title for the tab to remove.\n   *\n   * #### Notes\n   * This is a no-op if the title is not in the tab bar.\n   */\n  removeTab(title: Title<T>): void {\n    this.removeTabAt(this._titles.indexOf(title));\n  }\n\n  /**\n   * Remove the tab at a given index from the tab bar.\n   *\n   * @param index - The index of the tab to remove.\n   *\n   * #### Notes\n   * This is a no-op if the index is out of range.\n   */\n  removeTabAt(index: number): void {\n    // Release the mouse before making any changes.\n    this._releaseMouse();\n\n    // Remove the title from the array.\n    let title = ArrayExt.removeAt(this._titles, index);\n\n    // Bail if the index is out of range.\n    if (!title) {\n      return;\n    }\n\n    // Disconnect from the title changed signal.\n    title.changed.disconnect(this._onTitleChanged, this);\n\n    // Clear the previous title if it's being removed.\n    if (title === this._previousTitle) {\n      this._previousTitle = null;\n    }\n\n    // Schedule an update of the tabs.\n    this.update();\n\n    // Adjust the current index for the remove.\n    this._adjustCurrentForRemove(index, title);\n  }\n\n  /**\n   * Remove all tabs from the tab bar.\n   */\n  clearTabs(): void {\n    // Bail if there is nothing to remove.\n    if (this._titles.length === 0) {\n      return;\n    }\n\n    // Release the mouse before making any changes.\n    this._releaseMouse();\n\n    // Disconnect from the title changed signals.\n    for (let title of this._titles) {\n      title.changed.disconnect(this._onTitleChanged, this);\n    }\n\n    // Get the current index and title.\n    let pi = this.currentIndex;\n    let pt = this.currentTitle;\n\n    // Reset the current index and previous title.\n    this._currentIndex = -1;\n    this._previousTitle = null;\n\n    // Clear the title array.\n    this._titles.length = 0;\n\n    // Schedule an update of the tabs.\n    this.update();\n\n    // If no tab was selected, there's nothing else to do.\n    if (pi === -1) {\n      return;\n    }\n\n    // Emit the current changed signal.\n    this._currentChanged.emit({\n      previousIndex: pi, previousTitle: pt,\n      currentIndex: -1, currentTitle: null\n    });\n  }\n\n  /**\n   * Release the mouse and restore the non-dragged tab positions.\n   *\n   * #### Notes\n   * This will cause the tab bar to stop handling mouse events and to\n   * restore the tabs to their non-dragged positions.\n   */\n  releaseMouse(): void {\n    this._releaseMouse();\n  }\n\n  /**\n   * Handle the DOM events for the tab bar.\n   *\n   * @param event - The DOM event sent to the tab bar.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the tab bar's DOM node.\n   *\n   * This should not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'mousedown':\n      this._evtMouseDown(event as MouseEvent);\n      break;\n    case 'mousemove':\n      this._evtMouseMove(event as MouseEvent);\n      break;\n    case 'mouseup':\n      this._evtMouseUp(event as MouseEvent);\n      break;\n    case 'dblclick':\n      this._evtDblClick(event as MouseEvent);\n      break;\n    case 'keydown':\n      this._evtKeyDown(event as KeyboardEvent);\n      break;\n    case 'contextmenu':\n      event.preventDefault();\n      event.stopPropagation();\n      break;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('mousedown', this);\n    this.node.addEventListener('dblclick', this);\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('mousedown', this);\n    this.node.removeEventListener('dblclick', this);\n    this._releaseMouse();\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    let titles = this._titles;\n    let renderer = this.renderer;\n    let currentTitle = this.currentTitle;\n    let content = new Array<VirtualElement>(titles.length);\n    for (let i = 0, n = titles.length; i < n; ++i) {\n      let title = titles[i];\n      let current = title === currentTitle;\n      let zIndex = current ? n : n - i - 1;\n      content[i] = renderer.renderTab({ title, current, zIndex });\n    }\n    VirtualDOM.render(content, this.contentNode);\n  }\n\n  /**\n   * Handle the `'dblclick'` event for the tab bar.\n   */\n  private _evtDblClick(event: MouseEvent): void {\n\n    // Do nothing if titles are not editable\n    if (!this.titlesEditable) {\n      return;\n    }\n\n    let tabs = this.contentNode.children;\n\n    // Find the index of the released tab.\n    let index = ArrayExt.findFirstIndex(tabs, tab => {\n      return ElementExt.hitTest(tab, event.clientX, event.clientY);\n    });\n\n    // Do nothing if the press is not on a tab.\n    if (index === -1) {\n      return;\n    }\n\n    let title = this.titles[index];\n    let label = tabs[index].querySelector('.lm-TabBar-tabLabel') as HTMLElement;\n    if (label && label.contains(event.target as HTMLElement)) {\n\n      let value = title.label || '';\n\n      // Clear the label element\n      let oldValue = label.innerHTML;\n      label.innerHTML = \"\";\n\n      let input = document.createElement('input');\n      input.classList.add('lm-TabBar-tabInput');\n      input.value = value;\n      label.appendChild(input);\n\n      let onblur = () => {\n        input.removeEventListener('blur', onblur);\n        label.innerHTML = oldValue;\n      }\n\n      input.addEventListener('dblclick', (event: Event) => event.stopPropagation());\n      input.addEventListener('blur', onblur);\n      input.addEventListener('keydown', (event: KeyboardEvent) => {\n        if (event.key === 'Enter') {\n          if (input.value !== '') {\n            title.label = title.caption = input.value;\n          }\n          onblur();\n        } else if (event.key === 'Escape') {\n          onblur();\n        }\n      });\n      input.select();\n      input.focus();\n\n      if (label.children.length > 0) {\n        (label.children[0] as HTMLElement).focus();\n      }\n    }\n  }\n\n  /**\n   * Handle the `'keydown'` event for the tab bar.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // Stop all input events during drag.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Release the mouse if `Escape` is pressed.\n    if (event.keyCode === 27) {\n      this._releaseMouse();\n    }\n  }\n\n  /**\n   * Handle the `'mousedown'` event for the tab bar.\n   */\n  private _evtMouseDown(event: MouseEvent): void {\n    // Do nothing if it's not a left or middle mouse press.\n    if (event.button !== 0 && event.button !== 1) {\n      return;\n    }\n\n    // Do nothing if a drag is in progress.\n    if (this._dragData) {\n      return;\n    }\n\n    // Check if the add button was clicked.\n    let addButtonClicked = this.addButtonEnabled &&\n      this.addButtonNode.contains(event.target as HTMLElement);\n\n    // Lookup the tab nodes.\n    let tabs = this.contentNode.children;\n\n    // Find the index of the pressed tab.\n    let index = ArrayExt.findFirstIndex(tabs, tab => {\n      return ElementExt.hitTest(tab, event.clientX, event.clientY);\n    });\n\n    // Do nothing if the press is not on a tab or the add button.\n    if (index === -1 && !addButtonClicked) {\n      return;\n    }\n\n    // Pressing on a tab stops the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Initialize the non-measured parts of the drag data.\n    this._dragData = {\n      tab: tabs[index] as HTMLElement,\n      index: index,\n      pressX: event.clientX,\n      pressY: event.clientY,\n      tabPos: -1,\n      tabSize: -1,\n      tabPressPos: -1,\n      targetIndex: -1,\n      tabLayout: null,\n      contentRect: null,\n      override: null,\n      dragActive: false,\n      dragAborted: false,\n      detachRequested: false\n    };\n\n    // Add the document mouse up listener.\n    document.addEventListener('mouseup', this, true);\n\n    // Do nothing else if the middle button or add button is clicked.\n    if (event.button === 1 || addButtonClicked) {\n      return;\n    }\n\n    // Do nothing else if the close icon is clicked.\n    let icon = tabs[index].querySelector(this.renderer.closeIconSelector);\n    if (icon && icon.contains(event.target as HTMLElement)) {\n      return;\n    }\n\n    // Add the extra listeners if the tabs are movable.\n    if (this.tabsMovable) {\n      document.addEventListener('mousemove', this, true);\n      document.addEventListener('keydown', this, true);\n      document.addEventListener('contextmenu', this, true);\n    }\n\n    // Update the current index as appropriate.\n    if (this.allowDeselect && this.currentIndex === index) {\n      this.currentIndex = -1;\n    } else {\n      this.currentIndex = index;\n    }\n\n    // Do nothing else if there is no current tab.\n    if (this.currentIndex === -1) {\n      return;\n    }\n\n    // Emit the tab activate request signal.\n    this._tabActivateRequested.emit({\n      index: this.currentIndex, title: this.currentTitle!\n    });\n  }\n\n  /**\n   * Handle the `'mousemove'` event for the tab bar.\n   */\n  private _evtMouseMove(event: MouseEvent): void {\n    // Do nothing if no drag is in progress.\n    let data = this._dragData;\n    if (!data) {\n      return;\n    }\n\n    // Suppress the event during a drag.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Lookup the tab nodes.\n    let tabs = this.contentNode.children;\n\n    // Bail early if the drag threshold has not been met.\n    if (!data.dragActive && !Private.dragExceeded(data, event)) {\n      return;\n    }\n\n    // Activate the drag if necessary.\n    if (!data.dragActive) {\n      // Fill in the rest of the drag data measurements.\n      let tabRect = data.tab.getBoundingClientRect();\n      if (this._orientation === 'horizontal') {\n        data.tabPos = data.tab.offsetLeft;\n        data.tabSize = tabRect.width;\n        data.tabPressPos = data.pressX - tabRect.left;\n      } else {\n        data.tabPos = data.tab.offsetTop;\n        data.tabSize = tabRect.height;\n        data.tabPressPos = data.pressY - tabRect.top;\n      }\n      data.tabLayout = Private.snapTabLayout(tabs, this._orientation);\n      data.contentRect = this.contentNode.getBoundingClientRect();\n      data.override = Drag.overrideCursor('default');\n\n      // Add the dragging style classes.\n      data.tab.classList.add('lm-mod-dragging');\n      this.addClass('lm-mod-dragging');\n      /* <DEPRECATED> */\n      data.tab.classList.add('p-mod-dragging');\n      this.addClass('p-mod-dragging');\n      /* </DEPRECATED> */\n\n      // Mark the drag as active.\n      data.dragActive = true;\n    }\n\n    // Emit the detach requested signal if the threshold is exceeded.\n    if (!data.detachRequested && Private.detachExceeded(data, event)) {\n      // Only emit the signal once per drag cycle.\n      data.detachRequested = true;\n\n      // Setup the arguments for the signal.\n      let index = data.index;\n      let clientX = event.clientX;\n      let clientY = event.clientY;\n      let tab = tabs[index] as HTMLElement;\n      let title = this._titles[index];\n\n      // Emit the tab detach requested signal.\n      this._tabDetachRequested.emit({ index, title, tab, clientX, clientY });\n\n      // Bail if the signal handler aborted the drag.\n      if (data.dragAborted) {\n        return;\n      }\n    }\n\n    // Update the positions of the tabs.\n    Private.layoutTabs(tabs, data, event, this._orientation);\n  }\n\n  /**\n   * Handle the `'mouseup'` event for the document.\n   */\n  private _evtMouseUp(event: MouseEvent): void {\n    // Do nothing if it's not a left or middle mouse release.\n    if (event.button !== 0 && event.button !== 1) {\n      return;\n    }\n\n    // Do nothing if no drag is in progress.\n    const data = this._dragData;\n    if (!data) {\n      return;\n    }\n\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Remove the extra mouse event listeners.\n    document.removeEventListener('mousemove', this, true);\n    document.removeEventListener('mouseup', this, true);\n    document.removeEventListener('keydown', this, true);\n    document.removeEventListener('contextmenu', this, true);\n\n    // Handle a release when the drag is not active.\n    if (!data.dragActive) {\n      // Clear the drag data.\n      this._dragData = null;\n\n      // Handle clicking the add button.\n      let addButtonClicked = this.addButtonEnabled &&\n        this.addButtonNode.contains(event.target as HTMLElement);\n      if (addButtonClicked) {\n        this._addRequested.emit(undefined);\n        return;\n      }\n\n      // Lookup the tab nodes.\n      let tabs = this.contentNode.children;\n\n      // Find the index of the released tab.\n      let index = ArrayExt.findFirstIndex(tabs, tab => {\n        return ElementExt.hitTest(tab, event.clientX, event.clientY);\n      });\n\n      // Do nothing if the release is not on the original pressed tab.\n      if (index !== data.index) {\n        return;\n      }\n\n      // Ignore the release if the title is not closable.\n      let title = this._titles[index];\n      if (!title.closable) {\n        return;\n      }\n\n      // Emit the close requested signal if the middle button is released.\n      if (event.button === 1) {\n        this._tabCloseRequested.emit({ index, title });\n        return;\n      }\n\n      // Emit the close requested signal if the close icon was released.\n      let icon = tabs[index].querySelector(this.renderer.closeIconSelector);\n      if (icon && icon.contains(event.target as HTMLElement)) {\n        this._tabCloseRequested.emit({ index, title });\n        return;\n      }\n\n      // Otherwise, there is nothing left to do.\n      return;\n    }\n\n    // Do nothing if the left button is not released.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Position the tab at its final resting position.\n    Private.finalizeTabPosition(data, this._orientation);\n\n    // Remove the dragging class from the tab so it can be transitioned.\n    data.tab.classList.remove('lm-mod-dragging');\n    /* <DEPRECATED> */\n    data.tab.classList.remove('p-mod-dragging');\n    /* </DEPRECATED> */\n\n    // Parse the transition duration for releasing the tab.\n    let duration = Private.parseTransitionDuration(data.tab);\n\n    // Complete the release on a timer to allow the tab to transition.\n    setTimeout(() => {\n      // Do nothing if the drag has been aborted.\n      if (data.dragAborted) {\n        return;\n      }\n\n      // Clear the drag data reference.\n      this._dragData = null;\n\n      // Reset the positions of the tabs.\n      Private.resetTabPositions(this.contentNode.children, this._orientation);\n\n      // Clear the cursor grab.\n      data.override!.dispose();\n\n      // Remove the remaining dragging style.\n      this.removeClass('lm-mod-dragging');\n      /* <DEPRECATED> */\n      this.removeClass('p-mod-dragging');\n      /* </DEPRECATED> */\n\n      // If the tab was not moved, there is nothing else to do.\n      let i = data.index;\n      let j = data.targetIndex;\n      if (j === -1 || i === j) {\n        return;\n      }\n\n      // Move the title to the new locations.\n      ArrayExt.move(this._titles, i, j);\n\n      // Adjust the current index for the move.\n      this._adjustCurrentForMove(i, j);\n\n      // Emit the tab moved signal.\n      this._tabMoved.emit({\n        fromIndex: i, toIndex: j, title: this._titles[j]\n      });\n\n      // Update the tabs immediately to prevent flicker.\n      MessageLoop.sendMessage(this, Widget.Msg.UpdateRequest);\n    }, duration);\n  }\n\n  /**\n   * Release the mouse and restore the non-dragged tab positions.\n   */\n  private _releaseMouse(): void {\n    // Do nothing if no drag is in progress.\n    let data = this._dragData;\n    if (!data) {\n      return;\n    }\n\n    // Clear the drag data reference.\n    this._dragData = null;\n\n    // Remove the extra mouse listeners.\n    document.removeEventListener('mousemove', this, true);\n    document.removeEventListener('mouseup', this, true);\n    document.removeEventListener('keydown', this, true);\n    document.removeEventListener('contextmenu', this, true);\n\n    // Indicate the drag has been aborted. This allows the mouse\n    // event handlers to return early when the drag is canceled.\n    data.dragAborted = true;\n\n    // If the drag is not active, there's nothing more to do.\n    if (!data.dragActive) {\n      return;\n    }\n\n    // Reset the tabs to their non-dragged positions.\n    Private.resetTabPositions(this.contentNode.children, this._orientation);\n\n    // Clear the cursor override.\n    data.override!.dispose();\n\n    // Clear the dragging style classes.\n    data.tab.classList.remove('lm-mod-dragging');\n    this.removeClass('lm-mod-dragging');\n    /* <DEPRECATED> */\n    data.tab.classList.remove('p-mod-dragging');\n    this.removeClass('p-mod-dragging');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * Adjust the current index for a tab insert operation.\n   *\n   * This method accounts for the tab bar's insertion behavior when\n   * adjusting the current index and emitting the changed signal.\n   */\n  private _adjustCurrentForInsert(i: number, title: Title<T>): void {\n    // Lookup commonly used variables.\n    let ct = this.currentTitle;\n    let ci = this._currentIndex;\n    let bh = this.insertBehavior;\n\n\n    // TODO: do we need to do an update to update the aria-selected attribute?\n\n    // Handle the behavior where the new tab is always selected,\n    // or the behavior where the new tab is selected if needed.\n    if (bh === 'select-tab' || (bh === 'select-tab-if-needed' && ci === -1)) {\n      this._currentIndex = i;\n      this._previousTitle = ct;\n      this._currentChanged.emit({\n        previousIndex: ci, previousTitle: ct,\n        currentIndex: i, currentTitle: title\n      });\n      return;\n    }\n\n    // Otherwise, silently adjust the current index if needed.\n    if (ci >= i) {\n      this._currentIndex++;\n    }\n  }\n\n  /**\n   * Adjust the current index for a tab move operation.\n   *\n   * This method will not cause the actual current tab to change.\n   * It silently adjusts the index to account for the given move.\n   */\n  private _adjustCurrentForMove(i: number, j: number): void {\n    if (this._currentIndex === i) {\n      this._currentIndex = j;\n    } else if (this._currentIndex < i && this._currentIndex >= j) {\n      this._currentIndex++;\n    } else if (this._currentIndex > i && this._currentIndex <= j) {\n      this._currentIndex--;\n    }\n  }\n\n  /**\n   * Adjust the current index for a tab remove operation.\n   *\n   * This method accounts for the tab bar's remove behavior when\n   * adjusting the current index and emitting the changed signal.\n   */\n  private _adjustCurrentForRemove(i: number, title: Title<T>): void {\n    // Lookup commonly used variables.\n    let ci = this._currentIndex;\n    let bh = this.removeBehavior;\n\n    // Silently adjust the index if the current tab is not removed.\n    if (ci !== i) {\n      if (ci > i) {\n        this._currentIndex--;\n      }\n      return;\n    }\n\n    // TODO: do we need to do an update to adjust the aria-selected value?\n\n    // No tab gets selected if the tab bar is empty.\n    if (this._titles.length === 0) {\n      this._currentIndex = -1;\n      this._currentChanged.emit({\n        previousIndex: i, previousTitle: title,\n        currentIndex: -1, currentTitle: null\n      });\n      return;\n    }\n\n    // Handle behavior where the next sibling tab is selected.\n    if (bh === 'select-tab-after') {\n      this._currentIndex = Math.min(i, this._titles.length - 1);\n      this._currentChanged.emit({\n        previousIndex: i, previousTitle: title,\n        currentIndex: this._currentIndex, currentTitle: this.currentTitle\n      });\n      return;\n    }\n\n    // Handle behavior where the previous sibling tab is selected.\n    if (bh === 'select-tab-before') {\n      this._currentIndex = Math.max(0, i - 1);\n      this._currentChanged.emit({\n        previousIndex: i, previousTitle: title,\n        currentIndex: this._currentIndex, currentTitle: this.currentTitle\n      });\n      return;\n    }\n\n    // Handle behavior where the previous history tab is selected.\n    if (bh === 'select-previous-tab') {\n      if (this._previousTitle) {\n        this._currentIndex = this._titles.indexOf(this._previousTitle);\n        this._previousTitle = null;\n      } else {\n        this._currentIndex = Math.min(i, this._titles.length - 1);\n      }\n      this._currentChanged.emit({\n        previousIndex: i, previousTitle: title,\n        currentIndex: this._currentIndex, currentTitle: this.currentTitle\n      });\n      return;\n    }\n\n    // Otherwise, no tab gets selected.\n    this._currentIndex = -1;\n    this._currentChanged.emit({\n      previousIndex: i, previousTitle: title,\n      currentIndex: -1, currentTitle: null\n    });\n  }\n\n  /**\n   * Handle the `changed` signal of a title object.\n   */\n  private _onTitleChanged(sender: Title<T>): void {\n    this.update();\n  }\n\n  private _name: string;\n  private _currentIndex = -1;\n  private _titles: Title<T>[] = [];\n  private _orientation: TabBar.Orientation;\n  private _titlesEditable: boolean = false;\n  private _previousTitle: Title<T> | null = null;\n  private _dragData: Private.IDragData | null = null;\n  private _addButtonEnabled: boolean = false;\n  private _tabMoved = new Signal<this, TabBar.ITabMovedArgs<T>>(this);\n  private _currentChanged = new Signal<this, TabBar.ICurrentChangedArgs<T>>(this);\n  private _addRequested = new Signal<this, void>(this);\n  private _tabCloseRequested = new Signal<this, TabBar.ITabCloseRequestedArgs<T>>(this);\n  private _tabDetachRequested = new Signal<this, TabBar.ITabDetachRequestedArgs<T>>(this);\n  private _tabActivateRequested = new Signal<this, TabBar.ITabActivateRequestedArgs<T>>(this);\n}\n\n\n/**\n * The namespace for the `TabBar` class statics.\n */\nexport\nnamespace TabBar {\n  /**\n   * A type alias for a tab bar orientation.\n   */\n  export\n  type Orientation = (\n    /**\n     * The tabs are arranged in a single row, left-to-right.\n     *\n     * The tab text orientation is horizontal.\n     */\n    'horizontal' |\n\n    /**\n     * The tabs are arranged in a single column, top-to-bottom.\n     *\n     * The tab text orientation is horizontal.\n     */\n    'vertical'\n  );\n\n  /**\n   * A type alias for the selection behavior on tab insert.\n   */\n  export\n  type InsertBehavior = (\n    /**\n     * The selected tab will not be changed.\n     */\n    'none' |\n\n    /**\n     * The inserted tab will be selected.\n     */\n    'select-tab' |\n\n    /**\n     * The inserted tab will be selected if the current tab is null.\n     */\n    'select-tab-if-needed'\n  );\n\n  /**\n   * A type alias for the selection behavior on tab remove.\n   */\n  export\n  type RemoveBehavior = (\n    /**\n     * No tab will be selected.\n     */\n    'none' |\n\n    /**\n     * The tab after the removed tab will be selected if possible.\n     */\n    'select-tab-after' |\n\n    /**\n     * The tab before the removed tab will be selected if possible.\n     */\n    'select-tab-before' |\n\n    /**\n     * The previously selected tab will be selected if possible.\n     */\n    'select-previous-tab'\n  );\n\n  /**\n   * An options object for creating a tab bar.\n   */\n  export\n  interface IOptions<T> {\n    /**\n     * Name of the tab bar.\n     *\n     * This is used for accessibility reasons. The default is the empty string.\n     */\n    name?: string;\n\n    /**\n     * The layout orientation of the tab bar.\n     *\n     * The default is `horizontal`.\n     */\n    orientation?: TabBar.Orientation;\n\n    /**\n     * Whether the tabs are movable by the user.\n     *\n     * The default is `false`.\n     */\n    tabsMovable?: boolean;\n\n    /**\n     * Whether a tab can be deselected by the user.\n     *\n     * The default is `false`.\n     */\n    allowDeselect?: boolean;\n\n    /**\n     * Whether the titles can be directly edited by the user.\n     *\n     * The default is `false`.\n     */\n    titlesEditable?: boolean;\n\n    /**\n     * Whether the add button is enabled.\n     *\n     * The default is `false`.\n     */\n    addButtonEnabled?: boolean;\n\n    /**\n     * The selection behavior when inserting a tab.\n     *\n     * The default is `'select-tab-if-needed'`.\n     */\n    insertBehavior?: TabBar.InsertBehavior;\n\n    /**\n     * The selection behavior when removing a tab.\n     *\n     * The default is `'select-tab-after'`.\n     */\n    removeBehavior?: TabBar.RemoveBehavior;\n\n    /**\n     * A renderer to use with the tab bar.\n     *\n     * The default is a shared renderer instance.\n     */\n    renderer?: IRenderer<T>;\n  }\n\n  /**\n   * The arguments object for the `currentChanged` signal.\n   */\n  export\n  interface ICurrentChangedArgs<T> {\n    /**\n     * The previously selected index.\n     */\n    readonly previousIndex: number;\n\n    /**\n     * The previously selected title.\n     */\n    readonly previousTitle: Title<T> | null;\n\n    /**\n     * The currently selected index.\n     */\n    readonly currentIndex: number;\n\n    /**\n     * The currently selected title.\n     */\n    readonly currentTitle: Title<T> | null;\n  }\n\n  /**\n   * The arguments object for the `tabMoved` signal.\n   */\n  export\n  interface ITabMovedArgs<T> {\n    /**\n     * The previous index of the tab.\n     */\n    readonly fromIndex: number;\n\n    /**\n     * The current index of the tab.\n     */\n    readonly toIndex: number;\n\n    /**\n     * The title for the tab.\n     */\n    readonly title: Title<T>;\n  }\n\n  /**\n   * The arguments object for the `tabActivateRequested` signal.\n   */\n  export\n  interface ITabActivateRequestedArgs<T> {\n    /**\n     * The index of the tab to activate.\n     */\n    readonly index: number;\n\n    /**\n     * The title for the tab.\n     */\n    readonly title: Title<T>;\n  }\n\n  /**\n   * The arguments object for the `tabCloseRequested` signal.\n   */\n  export\n  interface ITabCloseRequestedArgs<T> {\n    /**\n     * The index of the tab to close.\n     */\n    readonly index: number;\n\n    /**\n     * The title for the tab.\n     */\n    readonly title: Title<T>;\n  }\n\n  /**\n   * The arguments object for the `tabDetachRequested` signal.\n   */\n  export\n  interface ITabDetachRequestedArgs<T> {\n    /**\n     * The index of the tab to detach.\n     */\n    readonly index: number;\n\n    /**\n     * The title for the tab.\n     */\n    readonly title: Title<T>;\n\n    /**\n     * The node representing the tab.\n     */\n    readonly tab: HTMLElement;\n\n    /**\n     * The current client X position of the mouse.\n     */\n    readonly clientX: number;\n\n    /**\n     * The current client Y position of the mouse.\n     */\n    readonly clientY: number;\n  }\n\n  /**\n   * An object which holds the data to render a tab.\n   */\n  export\n  interface IRenderData<T> {\n    /**\n     * The title associated with the tab.\n     */\n    readonly title: Title<T>;\n\n    /**\n     * Whether the tab is the current tab.\n     */\n    readonly current: boolean;\n\n    /**\n     * The z-index for the tab.\n     */\n    readonly zIndex: number;\n  }\n\n  /**\n   * A renderer for use with a tab bar.\n   */\n  export\n  interface IRenderer<T> {\n    /**\n     * A selector which matches the close icon node in a tab.\n     */\n    readonly closeIconSelector: string;\n\n    /**\n     * Render the virtual element for a tab.\n     *\n     * @param data - The data to use for rendering the tab.\n     *\n     * @returns A virtual element representing the tab.\n     */\n    renderTab(data: IRenderData<T>): VirtualElement;\n  }\n\n  /**\n   * The default implementation of `IRenderer`.\n   *\n   * #### Notes\n   * Subclasses are free to reimplement rendering methods as needed.\n   */\n  export\n  class Renderer implements IRenderer<any> {\n    /**\n     * Construct a new renderer.\n     */\n    constructor() { }\n\n    /**\n     * A selector which matches the close icon node in a tab.\n     */\n    readonly closeIconSelector = '.lm-TabBar-tabCloseIcon';\n\n    /**\n     * Render the virtual element for a tab.\n     *\n     * @param data - The data to use for rendering the tab.\n     *\n     * @returns A virtual element representing the tab.\n     */\n    renderTab(data: IRenderData<any>): VirtualElement {\n      let title = data.title.caption;\n      let key = this.createTabKey(data);\n      let id = key;\n      let style = this.createTabStyle(data);\n      let className = this.createTabClass(data);\n      let dataset = this.createTabDataset(data);\n      let aria = this.createTabARIA(data);\n      if (data.title.closable) {\n        return (\n          h.li({ id, key, className, title, style, dataset, ...aria },\n            this.renderIcon(data),\n            this.renderLabel(data),\n            this.renderCloseIcon(data)\n          )\n        );\n      } else {\n        return (\n          h.li({ id, key, className, title, style, dataset, ...aria },\n            this.renderIcon(data),\n            this.renderLabel(data),\n          )\n        );\n      }\n    }\n\n    /**\n     * Render the icon element for a tab.\n     *\n     * @param data - The data to use for rendering the tab.\n     *\n     * @returns A virtual element representing the tab icon.\n     */\n    renderIcon(data: IRenderData<any>): VirtualElement {\n      const { title } = data;\n      let className = this.createIconClass(data);\n\n      /* <DEPRECATED> */\n      if (typeof title.icon === 'string') {\n        return h.div({className}, title.iconLabel);\n      }\n      /* </DEPRECATED> */\n\n      // if title.icon is undefined, it will be ignored\n      return h.div({className}, title.icon!, title.iconLabel);\n    }\n\n    /**\n     * Render the label element for a tab.\n     *\n     * @param data - The data to use for rendering the tab.\n     *\n     * @returns A virtual element representing the tab label.\n     */\n    renderLabel(data: IRenderData<any>): VirtualElement {\n      return h.div({\n        className: 'lm-TabBar-tabLabel'\n          /* <DEPRECATED> */\n          + ' p-TabBar-tabLabel'\n          /* </DEPRECATED> */\n      }, data.title.label);\n    }\n\n    /**\n     * Render the close icon element for a tab.\n     *\n     * @param data - The data to use for rendering the tab.\n     *\n     * @returns A virtual element representing the tab close icon.\n     */\n    renderCloseIcon(data: IRenderData<any>): VirtualElement {\n      return h.div({\n        className: 'lm-TabBar-tabCloseIcon'\n          /* <DEPRECATED> */\n          + ' p-TabBar-tabCloseIcon'\n          /* </DEPRECATED> */\n      });\n    }\n\n    /**\n     * Create a unique render key for the tab.\n     *\n     * @param data - The data to use for the tab.\n     *\n     * @returns The unique render key for the tab.\n     *\n     * #### Notes\n     * This method caches the key against the tab title the first time\n     * the key is generated. This enables efficient rendering of moved\n     * tabs and avoids subtle hover style artifacts.\n     */\n    createTabKey(data: IRenderData<any>): string {\n      let key = this._tabKeys.get(data.title);\n      if (key === undefined) {\n        key = `tab-key-${this._tabID++}`;\n        this._tabKeys.set(data.title, key);\n      }\n      return key;\n    }\n\n    /**\n     * Create the inline style object for a tab.\n     *\n     * @param data - The data to use for the tab.\n     *\n     * @returns The inline style data for the tab.\n     */\n    createTabStyle(data: IRenderData<any>): ElementInlineStyle {\n      return { zIndex: `${data.zIndex}` };\n    }\n\n    /**\n     * Create the class name for the tab.\n     *\n     * @param data - The data to use for the tab.\n     *\n     * @returns The full class name for the tab.\n     */\n    createTabClass(data: IRenderData<any>): string {\n      let name = 'lm-TabBar-tab';\n      /* <DEPRECATED> */\n      name += ' p-TabBar-tab';\n      /* </DEPRECATED> */\n      if (data.title.className) {\n        name += ` ${data.title.className}`;\n      }\n      if (data.title.closable) {\n        name += ' lm-mod-closable';\n        /* <DEPRECATED> */\n        name += ' p-mod-closable';\n        /* </DEPRECATED> */\n      }\n      if (data.current) {\n        name += ' lm-mod-current';\n        /* <DEPRECATED> */\n        name += ' p-mod-current';\n        /* </DEPRECATED> */\n      }\n      return name;\n    }\n\n    /**\n     * Create the dataset for a tab.\n     *\n     * @param data - The data to use for the tab.\n     *\n     * @returns The dataset for the tab.\n     */\n    createTabDataset(data: IRenderData<any>): ElementDataset {\n      return data.title.dataset;\n    }\n\n    /**\n     * Create the ARIA attributes for a tab.\n     *\n     * @param data - The data to use for the tab.\n     *\n     * @returns The ARIA attributes for the tab.\n     */\n    createTabARIA(data: IRenderData<any>): ElementARIAAttrs {\n      return {role: 'tab', 'aria-selected': data.current.toString()};\n    }\n\n    /**\n     * Create the class name for the tab icon.\n     *\n     * @param data - The data to use for the tab.\n     *\n     * @returns The full class name for the tab icon.\n     */\n    createIconClass(data: IRenderData<any>): string {\n      let name = 'lm-TabBar-tabIcon';\n      /* <DEPRECATED> */\n      name += ' p-TabBar-tabIcon';\n      /* </DEPRECATED> */\n      let extra = data.title.iconClass;\n      return extra ? `${name} ${extra}` : name;\n    }\n\n    private _tabID = 0;\n    private _tabKeys = new WeakMap<Title<any>, string>();\n  }\n\n  /**\n   * The default `Renderer` instance.\n   */\n  export\n  const defaultRenderer = new Renderer();\n\n  /**\n   * A selector which matches the add button node in the tab bar.\n   */\n  export\n  const addButtonSelector = '.lm-TabBar-addButton';\n\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The start drag distance threshold.\n   */\n  export\n  const DRAG_THRESHOLD = 5;\n\n  /**\n   * The detach distance threshold.\n   */\n  export\n  const DETACH_THRESHOLD = 20;\n\n  /**\n   * A struct which holds the drag data for a tab bar.\n   */\n  export\n  interface IDragData {\n    /**\n     * The tab node being dragged.\n     */\n    tab: HTMLElement;\n\n    /**\n     * The index of the tab being dragged.\n     */\n    index: number;\n\n    /**\n     * The mouse press client X position.\n     */\n    pressX: number;\n\n    /**\n     * The mouse press client Y position.\n     */\n    pressY: number;\n\n    /**\n     * The offset left/top of the tab being dragged.\n     *\n     * This will be `-1` if the drag is not active.\n     */\n    tabPos: number;\n\n    /**\n     * The offset width/height of the tab being dragged.\n     *\n     * This will be `-1` if the drag is not active.\n     */\n    tabSize: number;\n\n    /**\n     * The original mouse X/Y position in tab coordinates.\n     *\n     * This will be `-1` if the drag is not active.\n     */\n    tabPressPos: number;\n\n    /**\n     * The tab target index upon mouse release.\n     *\n     * This will be `-1` if the drag is not active.\n     */\n    targetIndex: number;\n\n    /**\n     * The array of tab layout objects snapped at drag start.\n     *\n     * This will be `null` if the drag is not active.\n     */\n    tabLayout: ITabLayout[] | null;\n\n    /**\n     * The bounding client rect of the tab bar content node.\n     *\n     * This will be `null` if the drag is not active.\n     */\n    contentRect: ClientRect | null;\n\n    /**\n     * The disposable to clean up the cursor override.\n     *\n     * This will be `null` if the drag is not active.\n     */\n    override: IDisposable | null;\n\n    /**\n     * Whether the drag is currently active.\n     */\n    dragActive: boolean;\n\n    /**\n     * Whether the drag has been aborted.\n     */\n    dragAborted: boolean;\n\n    /**\n     * Whether a detach request as been made.\n     */\n    detachRequested: boolean;\n  }\n\n  /**\n   * An object which holds layout data for a tab.\n   */\n  export\n  interface ITabLayout {\n    /**\n     * The left/top margin value for the tab.\n     */\n    margin: number;\n\n    /**\n     * The offset left/top position of the tab.\n     */\n    pos: number;\n\n    /**\n     * The offset width/height of the tab.\n     */\n    size: number;\n  }\n\n  /**\n   * Create the DOM node for a tab bar.\n   */\n  export\n  function createNode(): HTMLDivElement {\n    let node = document.createElement('div');\n    let content = document.createElement('ul');\n    content.setAttribute('role', 'tablist');\n    content.className = 'lm-TabBar-content';\n    /* <DEPRECATED> */\n    content.classList.add('p-TabBar-content');\n    /* </DEPRECATED> */\n    node.appendChild(content);\n\n    let add = document.createElement('div');\n    add.className = 'lm-TabBar-addButton lm-mod-hidden';\n    node.appendChild(add);\n    return node;\n  }\n\n  /**\n   * Coerce a title or options into a real title.\n   */\n  export\n  function asTitle<T>(value: Title<T> | Title.IOptions<T>): Title<T> {\n    return value instanceof Title ? value : new Title<T>(value);\n  }\n\n  /**\n   * Parse the transition duration for a tab node.\n   */\n  export\n  function parseTransitionDuration(tab: HTMLElement): number {\n    let style = window.getComputedStyle(tab);\n    return 1000 * (parseFloat(style.transitionDuration!) || 0);\n  }\n\n  /**\n   * Get a snapshot of the current tab layout values.\n   */\n  export\n  function snapTabLayout(tabs: HTMLCollection, orientation: TabBar.Orientation): ITabLayout[] {\n    let layout = new Array<ITabLayout>(tabs.length);\n    for (let i = 0, n = tabs.length; i < n; ++i) {\n      let node = tabs[i] as HTMLElement;\n      let style = window.getComputedStyle(node);\n      if (orientation === 'horizontal') {\n        layout[i] = {\n          pos: node.offsetLeft,\n          size: node.offsetWidth,\n          margin: parseFloat(style.marginLeft!) || 0\n        };\n      } else {\n        layout[i] = {\n          pos: node.offsetTop,\n          size: node.offsetHeight,\n          margin: parseFloat(style.marginTop!) || 0\n        };\n      }\n    }\n    return layout;\n  }\n\n  /**\n   * Test if the event exceeds the drag threshold.\n   */\n  export\n  function dragExceeded(data: IDragData, event: MouseEvent): boolean {\n    let dx = Math.abs(event.clientX - data.pressX);\n    let dy = Math.abs(event.clientY - data.pressY);\n    return dx >= DRAG_THRESHOLD || dy >= DRAG_THRESHOLD;\n  }\n\n  /**\n   * Test if the event exceeds the drag detach threshold.\n   */\n  export\n  function detachExceeded(data: IDragData, event: MouseEvent): boolean {\n    let rect = data.contentRect!;\n    return (\n      (event.clientX < rect.left - DETACH_THRESHOLD) ||\n      (event.clientX >= rect.right + DETACH_THRESHOLD) ||\n      (event.clientY < rect.top - DETACH_THRESHOLD) ||\n      (event.clientY >= rect.bottom + DETACH_THRESHOLD)\n    );\n  }\n\n  /**\n   * Update the relative tab positions and computed target index.\n   */\n  export\n  function layoutTabs(tabs: HTMLCollection, data: IDragData, event: MouseEvent, orientation: TabBar.Orientation): void {\n    // Compute the orientation-sensitive values.\n    let pressPos: number;\n    let localPos: number;\n    let clientPos: number;\n    let clientSize: number;\n    if (orientation === 'horizontal') {\n      pressPos = data.pressX;\n      localPos = event.clientX - data.contentRect!.left;\n      clientPos = event.clientX;\n      clientSize = data.contentRect!.width;\n    } else {\n      pressPos = data.pressY;\n      localPos = event.clientY - data.contentRect!.top;\n      clientPos = event.clientY;\n      clientSize = data.contentRect!.height;\n    }\n\n    // Compute the target data.\n    let targetIndex = data.index;\n    let targetPos = localPos - data.tabPressPos;\n    let targetEnd = targetPos + data.tabSize;\n\n    // Update the relative tab positions.\n    for (let i = 0, n = tabs.length; i < n; ++i) {\n      let pxPos: string;\n      let layout = data.tabLayout![i];\n      let threshold = layout.pos + (layout.size >> 1);\n      if (i < data.index && targetPos < threshold) {\n        pxPos = `${data.tabSize + data.tabLayout![i + 1].margin}px`;\n        targetIndex = Math.min(targetIndex, i);\n      } else if (i > data.index && targetEnd > threshold) {\n        pxPos = `${-data.tabSize - layout.margin}px`;\n        targetIndex = Math.max(targetIndex, i);\n      } else if (i === data.index) {\n        let ideal = clientPos - pressPos;\n        let limit = clientSize - (data.tabPos + data.tabSize);\n        pxPos = `${Math.max(-data.tabPos, Math.min(ideal, limit))}px`;\n      } else {\n        pxPos = '';\n      }\n      if (orientation === 'horizontal') {\n        (tabs[i] as HTMLElement).style.left = pxPos;\n      } else {\n        (tabs[i] as HTMLElement).style.top = pxPos;\n      }\n    }\n\n    // Update the computed target index.\n    data.targetIndex = targetIndex;\n  }\n\n  /**\n   * Position the drag tab at its final resting relative position.\n   */\n  export\n  function finalizeTabPosition(data: IDragData, orientation: TabBar.Orientation): void {\n    // Compute the orientation-sensitive client size.\n    let clientSize: number;\n    if (orientation === 'horizontal') {\n      clientSize = data.contentRect!.width;\n    } else {\n      clientSize = data.contentRect!.height;\n    }\n\n    // Compute the ideal final tab position.\n    let ideal: number;\n    if (data.targetIndex === data.index) {\n      ideal = 0;\n    } else if (data.targetIndex > data.index) {\n      let tgt = data.tabLayout![data.targetIndex];\n      ideal = tgt.pos + tgt.size - data.tabSize - data.tabPos;\n    } else {\n      let tgt = data.tabLayout![data.targetIndex];\n      ideal = tgt.pos - data.tabPos;\n    }\n\n    // Compute the tab position limit.\n    let limit = clientSize - (data.tabPos + data.tabSize);\n    let final = Math.max(-data.tabPos, Math.min(ideal, limit));\n\n    // Set the final orientation-sensitive position.\n    if (orientation === 'horizontal') {\n      data.tab.style.left = `${final}px`;\n    } else {\n      data.tab.style.top = `${final}px`;\n    }\n  }\n\n  /**\n   * Reset the relative positions of the given tabs.\n   */\n  export\n  function resetTabPositions(tabs: HTMLCollection, orientation: TabBar.Orientation): void {\n    each(tabs, tab => {\n      if (orientation === 'horizontal') {\n        (tab as HTMLElement).style.left = '';\n      } else {\n        (tab as HTMLElement).style.top = '';\n      }\n    });\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, ChainIterator, IIterator, chain, each, empty, map, once, reduce\n} from '@lumino/algorithm';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  BoxEngine, BoxSizer\n} from './boxengine';\n\nimport {\n  Layout, LayoutItem\n} from './layout';\n\nimport {\n  TabBar\n} from './tabbar';\n\nimport Utils from './utils';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A layout which provides a flexible docking arrangement.\n *\n * #### Notes\n * The consumer of this layout is responsible for handling all signals\n * from the generated tab bars and managing the visibility of widgets\n * and tab bars as needed.\n */\nexport\nclass DockLayout extends Layout {\n  /**\n   * Construct a new dock layout.\n   *\n   * @param options - The options for initializing the layout.\n   */\n  constructor(options: DockLayout.IOptions) {\n    super();\n    this.renderer = options.renderer;\n    if (options.spacing !== undefined) {\n      this._spacing = Utils.clampDimension(options.spacing);\n    }\n  }\n\n  /**\n   * Dispose of the resources held by the layout.\n   *\n   * #### Notes\n   * This will clear and dispose all widgets in the layout.\n   */\n  dispose(): void {\n    // Get an iterator over the widgets in the layout.\n    let widgets = this.iter();\n\n    // Dispose of the layout items.\n    this._items.forEach(item => { item.dispose(); });\n\n    // Clear the layout state before disposing the widgets.\n    this._box = null;\n    this._root = null;\n    this._items.clear();\n\n    // Dispose of the widgets contained in the old layout root.\n    each(widgets, widget => { widget.dispose(); });\n\n    // Dispose of the base class.\n    super.dispose();\n  }\n\n  /**\n   * The renderer used by the dock layout.\n   */\n  readonly renderer: DockLayout.IRenderer;\n\n  /**\n   * Get the inter-element spacing for the dock layout.\n   */\n  get spacing(): number {\n    return this._spacing;\n  }\n\n  /**\n   * Set the inter-element spacing for the dock layout.\n   */\n  set spacing(value: number) {\n    value = Utils.clampDimension(value);\n    if (this._spacing === value) {\n      return;\n    }\n    this._spacing = value;\n    if (!this.parent) {\n      return;\n    }\n    this.parent.fit();\n  }\n\n  /**\n   * Whether the dock layout is empty.\n   */\n  get isEmpty(): boolean {\n    return this._root === null;\n  }\n\n  /**\n   * Create an iterator over all widgets in the layout.\n   *\n   * @returns A new iterator over the widgets in the layout.\n   *\n   * #### Notes\n   * This iterator includes the generated tab bars.\n   */\n  iter(): IIterator<Widget> {\n    return this._root ? this._root.iterAllWidgets() : empty<Widget>();\n  }\n\n  /**\n   * Create an iterator over the user widgets in the layout.\n   *\n   * @returns A new iterator over the user widgets in the layout.\n   *\n   * #### Notes\n   * This iterator does not include the generated tab bars.\n   */\n  widgets(): IIterator<Widget> {\n    return this._root ? this._root.iterUserWidgets() : empty<Widget>();\n  }\n\n  /**\n   * Create an iterator over the selected widgets in the layout.\n   *\n   * @returns A new iterator over the selected user widgets.\n   *\n   * #### Notes\n   * This iterator yields the widgets corresponding to the current tab\n   * of each tab bar in the layout.\n   */\n  selectedWidgets(): IIterator<Widget> {\n    return this._root ? this._root.iterSelectedWidgets() : empty<Widget>();\n  }\n\n  /**\n   * Create an iterator over the tab bars in the layout.\n   *\n   * @returns A new iterator over the tab bars in the layout.\n   *\n   * #### Notes\n   * This iterator does not include the user widgets.\n   */\n  tabBars(): IIterator<TabBar<Widget>> {\n    return this._root ? this._root.iterTabBars() : empty<TabBar<Widget>>();\n  }\n\n  /**\n   * Create an iterator over the handles in the layout.\n   *\n   * @returns A new iterator over the handles in the layout.\n   */\n  handles(): IIterator<HTMLDivElement> {\n    return this._root ? this._root.iterHandles() : empty<HTMLDivElement>();\n  }\n\n  /**\n   * Move a handle to the given offset position.\n   *\n   * @param handle - The handle to move.\n   *\n   * @param offsetX - The desired offset X position of the handle.\n   *\n   * @param offsetY - The desired offset Y position of the handle.\n   *\n   * #### Notes\n   * If the given handle is not contained in the layout, this is no-op.\n   *\n   * The handle will be moved as close as possible to the desired\n   * position without violating any of the layout constraints.\n   *\n   * Only one of the coordinates is used depending on the orientation\n   * of the handle. This method accepts both coordinates to make it\n   * easy to invoke from a mouse move event without needing to know\n   * the handle orientation.\n   */\n  moveHandle(handle: HTMLDivElement, offsetX: number, offsetY: number): void {\n    // Bail early if there is no root or if the handle is hidden.\n    let hidden = handle.classList.contains('lm-mod-hidden');\n    /* <DEPRECATED> */\n    hidden = hidden || handle.classList.contains('p-mod-hidden');\n    /* </DEPRECATED> */\n    if (!this._root || hidden) {\n      return;\n    }\n\n    // Lookup the split node for the handle.\n    let data = this._root.findSplitNode(handle);\n    if (!data) {\n      return;\n    }\n\n    // Compute the desired delta movement for the handle.\n    let delta: number;\n    if (data.node.orientation === 'horizontal') {\n      delta = offsetX - handle.offsetLeft;\n    } else {\n      delta = offsetY - handle.offsetTop;\n    }\n\n    // Bail if there is no handle movement.\n    if (delta === 0) {\n      return;\n    }\n\n    // Prevent sibling resizing unless needed.\n    data.node.holdSizes();\n\n    // Adjust the sizers to reflect the handle movement.\n    BoxEngine.adjust(data.node.sizers, data.index, delta);\n\n    // Update the layout of the widgets.\n    if (this.parent) {\n      this.parent.update();\n    }\n  }\n\n  /**\n   * Save the current configuration of the dock layout.\n   *\n   * @returns A new config object for the current layout state.\n   *\n   * #### Notes\n   * The return value can be provided to the `restoreLayout` method\n   * in order to restore the layout to its current configuration.\n   */\n  saveLayout(): DockLayout.ILayoutConfig {\n    // Bail early if there is no root.\n    if (!this._root) {\n      return { main: null };\n    }\n\n    // Hold the current sizes in the layout tree.\n    this._root.holdAllSizes();\n\n    // Return the layout config.\n    return { main: this._root.createConfig() };\n  }\n\n  /**\n   * Restore the layout to a previously saved configuration.\n   *\n   * @param config - The layout configuration to restore.\n   *\n   * #### Notes\n   * Widgets which currently belong to the layout but which are not\n   * contained in the config will be unparented.\n   */\n  restoreLayout(config: DockLayout.ILayoutConfig): void {\n    // Create the widget set for validating the config.\n    let widgetSet = new Set<Widget>();\n\n    // Normalize the main area config and collect the widgets.\n    let mainConfig: DockLayout.AreaConfig | null;\n    if (config.main) {\n      mainConfig = Private.normalizeAreaConfig(config.main, widgetSet);\n    } else {\n      mainConfig = null;\n    }\n\n    // Create iterators over the old content.\n    let oldWidgets = this.widgets();\n    let oldTabBars = this.tabBars();\n    let oldHandles = this.handles();\n\n    // Clear the root before removing the old content.\n    this._root = null;\n\n    // Unparent the old widgets which are not in the new config.\n    each(oldWidgets, widget => {\n      if (!widgetSet.has(widget)) {\n        widget.parent = null;\n      }\n    });\n\n    // Dispose of the old tab bars.\n    each(oldTabBars, tabBar => {\n      tabBar.dispose();\n    });\n\n    // Remove the old handles.\n    each(oldHandles, handle => {\n      if (handle.parentNode) {\n        handle.parentNode.removeChild(handle);\n      }\n    });\n\n    // Reparent the new widgets to the current parent.\n    widgetSet.forEach(widget => {\n      widget.parent = this.parent;\n    });\n\n    // Create the root node for the new config.\n    if (mainConfig) {\n      this._root = Private.realizeAreaConfig(mainConfig, {\n        createTabBar: () => this._createTabBar(),\n        createHandle: () => this._createHandle()\n      });\n    } else {\n      this._root = null;\n    }\n\n    // If there is no parent, there is nothing more to do.\n    if (!this.parent) {\n      return;\n    }\n\n    // Attach the new widgets to the parent.\n    widgetSet.forEach(widget => {\n      this.attachWidget(widget);\n    });\n\n    // Post a fit request to the parent.\n    this.parent.fit();\n  }\n\n  /**\n   * Add a widget to the dock layout.\n   *\n   * @param widget - The widget to add to the dock layout.\n   *\n   * @param options - The additional options for adding the widget.\n   *\n   * #### Notes\n   * The widget will be moved if it is already contained in the layout.\n   *\n   * An error will be thrown if the reference widget is invalid.\n   */\n  addWidget(widget: Widget, options: DockLayout.IAddOptions = {}): void {\n    // Parse the options.\n    let ref = options.ref || null;\n    let mode = options.mode || 'tab-after';\n\n    // Find the tab node which holds the reference widget.\n    let refNode: Private.TabLayoutNode | null = null;\n    if (this._root && ref) {\n      refNode = this._root.findTabNode(ref);\n    }\n\n    // Throw an error if the reference widget is invalid.\n    if (ref && !refNode) {\n      throw new Error('Reference widget is not in the layout.');\n    }\n\n    // Reparent the widget to the current layout parent.\n    widget.parent = this.parent;\n\n    // Insert the widget according to the insert mode.\n    switch (mode) {\n    case 'tab-after':\n      this._insertTab(widget, ref, refNode, true);\n      break;\n    case 'tab-before':\n      this._insertTab(widget, ref, refNode, false);\n      break;\n    case 'split-top':\n      this._insertSplit(widget, ref, refNode, 'vertical', false);\n      break;\n    case 'split-left':\n      this._insertSplit(widget, ref, refNode, 'horizontal', false);\n      break;\n    case 'split-right':\n      this._insertSplit(widget, ref, refNode, 'horizontal', true);\n      break;\n    case 'split-bottom':\n      this._insertSplit(widget, ref, refNode, 'vertical', true);\n      break;\n    }\n\n    // Do nothing else if there is no parent widget.\n    if (!this.parent) {\n      return;\n    }\n\n    // Ensure the widget is attached to the parent widget.\n    this.attachWidget(widget);\n\n    // Post a fit request for the parent widget.\n    this.parent.fit();\n  }\n\n  /**\n   * Remove a widget from the layout.\n   *\n   * @param widget - The widget to remove from the layout.\n   *\n   * #### Notes\n   * A widget is automatically removed from the layout when its `parent`\n   * is set to `null`. This method should only be invoked directly when\n   * removing a widget from a layout which has yet to be installed on a\n   * parent widget.\n   *\n   * This method does *not* modify the widget's `parent`.\n   */\n  removeWidget(widget: Widget): void {\n    // Remove the widget from its current layout location.\n    this._removeWidget(widget);\n\n    // Do nothing else if there is no parent widget.\n    if (!this.parent) {\n      return;\n    }\n\n    // Detach the widget from the parent widget.\n    this.detachWidget(widget);\n\n    // Post a fit request for the parent widget.\n    this.parent.fit();\n  }\n\n  /**\n   * Find the tab area which contains the given client position.\n   *\n   * @param clientX - The client X position of interest.\n   *\n   * @param clientY - The client Y position of interest.\n   *\n   * @returns The geometry of the tab area at the given position, or\n   *   `null` if there is no tab area at the given position.\n   */\n  hitTestTabAreas(clientX: number, clientY: number): DockLayout.ITabAreaGeometry | null {\n    // Bail early if hit testing cannot produce valid results.\n    if (!this._root || !this.parent || !this.parent.isVisible) {\n      return null;\n    }\n\n    // Ensure the parent box sizing data is computed.\n    if (!this._box) {\n      this._box = ElementExt.boxSizing(this.parent.node);\n    }\n\n    // Convert from client to local coordinates.\n    let rect = this.parent.node.getBoundingClientRect();\n    let x = clientX - rect.left - this._box.borderLeft;\n    let y = clientY - rect.top - this._box.borderTop;\n\n    // Find the tab layout node at the local position.\n    let tabNode = this._root.hitTestTabNodes(x, y);\n\n    // Bail if a tab layout node was not found.\n    if (!tabNode) {\n      return null;\n    }\n\n    // Extract the data from the tab node.\n    let { tabBar, top, left, width, height } = tabNode;\n\n    // Compute the right and bottom edges of the tab area.\n    let borderWidth = this._box.borderLeft + this._box.borderRight;\n    let borderHeight = this._box.borderTop + this._box.borderBottom;\n    let right = rect.width - borderWidth - (left + width);\n    let bottom = rect.height - borderHeight - (top + height);\n\n    // Return the hit test results.\n    return { tabBar, x, y, top, left, right, bottom, width, height };\n  }\n\n  /**\n   * Perform layout initialization which requires the parent widget.\n   */\n  protected init(): void {\n    // Perform superclass initialization.\n    super.init();\n\n    // Attach each widget to the parent.\n    each(this, widget => { this.attachWidget(widget); });\n\n    // Attach each handle to the parent.\n    each(this.handles(), handle => { this.parent!.node.appendChild(handle); });\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * Attach the widget to the layout parent widget.\n   *\n   * @param widget - The widget to attach to the parent.\n   *\n   * #### Notes\n   * This is a no-op if the widget is already attached.\n   */\n  protected attachWidget(widget: Widget): void {\n    // Do nothing if the widget is already attached.\n    if (this.parent!.node === widget.node.parentNode) {\n      return;\n    }\n\n    // Create the layout item for the widget.\n    this._items.set(widget, new LayoutItem(widget));\n\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Add the widget's node to the parent.\n    this.parent!.node.appendChild(widget.node);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n  }\n\n  /**\n   * Detach the widget from the layout parent widget.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This is a no-op if the widget is not attached.\n   */\n  protected detachWidget(widget: Widget): void {\n    // Do nothing if the widget is not attached.\n    if (this.parent!.node !== widget.node.parentNode) {\n      return;\n    }\n\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget's node from the parent.\n    this.parent!.node.removeChild(widget.node);\n\n    // Send an `'after-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n\n    // Delete the layout item for the widget.\n    let item = this._items.get(widget);\n    if (item) {\n      this._items.delete(widget);\n      item.dispose();\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   */\n  protected onBeforeShow(msg: Message): void {\n    super.onBeforeShow(msg);\n    this.parent!.update();\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    super.onBeforeAttach(msg);\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-shown'` message.\n   */\n  protected onChildShown(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-hidden'` message.\n   */\n  protected onChildHidden(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    if (this.parent!.isVisible) {\n      this._update(msg.width, msg.height);\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    if (this.parent!.isVisible) {\n      this._update(-1, -1);\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   */\n  protected onFitRequest(msg: Message): void {\n    if (this.parent!.isAttached) {\n      this._fit();\n    }\n  }\n\n  /**\n   * Remove the specified widget from the layout structure.\n   *\n   * #### Notes\n   * This is a no-op if the widget is not in the layout tree.\n   *\n   * This does not detach the widget from the parent node.\n   */\n  private _removeWidget(widget: Widget): void {\n    // Bail early if there is no layout root.\n    if (!this._root) {\n      return;\n    }\n\n    // Find the tab node which contains the given widget.\n    let tabNode = this._root.findTabNode(widget);\n\n    // Bail early if the tab node is not found.\n    if (!tabNode) {\n      return;\n    }\n\n    Private.removeAria(widget);\n\n    // If there are multiple tabs, just remove the widget's tab.\n    if (tabNode.tabBar.titles.length > 1) {\n      tabNode.tabBar.removeTab(widget.title);\n      return;\n    }\n\n    // Otherwise, the tab node needs to be removed...\n\n    // Dispose the tab bar.\n    tabNode.tabBar.dispose();\n\n    // Handle the case where the tab node is the root.\n    if (this._root === tabNode) {\n      this._root = null;\n      return;\n    }\n\n    // Otherwise, remove the tab node from its parent...\n\n    // Prevent widget resizing unless needed.\n    this._root.holdAllSizes();\n\n    // Clear the parent reference on the tab node.\n    let splitNode = tabNode.parent!;\n    tabNode.parent = null;\n\n    // Remove the tab node from its parent split node.\n    let i = ArrayExt.removeFirstOf(splitNode.children, tabNode);\n    let handle = ArrayExt.removeAt(splitNode.handles, i)!;\n    ArrayExt.removeAt(splitNode.sizers, i);\n\n    // Remove the handle from its parent DOM node.\n    if (handle.parentNode) {\n      handle.parentNode.removeChild(handle);\n    }\n\n    // If there are multiple children, just update the handles.\n    if (splitNode.children.length > 1) {\n      splitNode.syncHandles();\n      return;\n    }\n\n    // Otherwise, the split node also needs to be removed...\n\n    // Clear the parent reference on the split node.\n    let maybeParent = splitNode.parent;\n    splitNode.parent = null;\n\n    // Lookup the remaining child node and handle.\n    let childNode = splitNode.children[0];\n    let childHandle = splitNode.handles[0];\n\n    // Clear the split node data.\n    splitNode.children.length = 0;\n    splitNode.handles.length = 0;\n    splitNode.sizers.length = 0;\n\n    // Remove the child handle from its parent node.\n    if (childHandle.parentNode) {\n      childHandle.parentNode.removeChild(childHandle);\n    }\n\n    // Handle the case where the split node is the root.\n    if (this._root === splitNode) {\n      childNode.parent = null;\n      this._root = childNode;\n      return;\n    }\n\n    // Otherwise, move the child node to the parent node...\n    let parentNode = maybeParent!;\n\n    // Lookup the index of the split node.\n    let j = parentNode.children.indexOf(splitNode);\n\n    // Handle the case where the child node is a tab node.\n    if (childNode instanceof Private.TabLayoutNode) {\n      childNode.parent = parentNode;\n      parentNode.children[j] = childNode;\n      return;\n    }\n\n    // Remove the split data from the parent.\n    let splitHandle = ArrayExt.removeAt(parentNode.handles, j)!;\n    ArrayExt.removeAt(parentNode.children, j);\n    ArrayExt.removeAt(parentNode.sizers, j);\n\n    // Remove the handle from its parent node.\n    if (splitHandle.parentNode) {\n      splitHandle.parentNode.removeChild(splitHandle);\n    }\n\n    // The child node and the split parent node will have the same\n    // orientation. Merge the grand-children with the parent node.\n    for (let i = 0, n = childNode.children.length; i < n; ++i) {\n      let gChild = childNode.children[i];\n      let gHandle = childNode.handles[i];\n      let gSizer = childNode.sizers[i];\n      ArrayExt.insert(parentNode.children, j + i, gChild);\n      ArrayExt.insert(parentNode.handles, j + i, gHandle);\n      ArrayExt.insert(parentNode.sizers, j + i, gSizer);\n      gChild.parent = parentNode;\n    }\n\n    // Clear the child node.\n    childNode.children.length = 0;\n    childNode.handles.length = 0;\n    childNode.sizers.length = 0;\n    childNode.parent = null;\n\n    // Sync the handles on the parent node.\n    parentNode.syncHandles();\n  }\n\n  /**\n   * Insert a widget next to an existing tab.\n   *\n   * #### Notes\n   * This does not attach the widget to the parent widget.\n   */\n  private _insertTab(widget: Widget, ref: Widget | null, refNode: Private.TabLayoutNode | null, after: boolean): void {\n    // Do nothing if the tab is inserted next to itself.\n    if (widget === ref) {\n      return;\n    }\n\n    // Create the root if it does not exist.\n    if (!this._root) {\n      let tabNode = new Private.TabLayoutNode(this._createTabBar());\n      tabNode.tabBar.addTab(widget.title);\n      this._root = tabNode;\n      Private.addAria(widget, tabNode.tabBar);\n      return;\n    }\n\n    // Use the first tab node as the ref node if needed.\n    if (!refNode) {\n      refNode = this._root.findFirstTabNode()!;\n    }\n\n    // If the widget is not contained in the ref node, ensure it is\n    // removed from the layout and hidden before being added again.\n    if (refNode.tabBar.titles.indexOf(widget.title) === -1) {\n      this._removeWidget(widget);\n      widget.hide();\n    }\n\n    // Lookup the target index for inserting the tab.\n    let index: number;\n    if (ref) {\n      index = refNode.tabBar.titles.indexOf(ref.title);\n    } else {\n      index = refNode.tabBar.currentIndex;\n    }\n\n    // Insert the widget's tab relative to the target index.\n    refNode.tabBar.insertTab(index + (after ? 1 : 0), widget.title);\n    Private.addAria(widget, refNode.tabBar);\n  }\n\n  /**\n   * Insert a widget as a new split area.\n   *\n   * #### Notes\n   * This does not attach the widget to the parent widget.\n   */\n  private _insertSplit(widget: Widget, ref: Widget | null, refNode: Private.TabLayoutNode | null, orientation: Private.Orientation, after: boolean): void {\n    // Do nothing if there is no effective split.\n    if (widget === ref && refNode && refNode.tabBar.titles.length === 1) {\n      return;\n    }\n\n    // Ensure the widget is removed from the current layout.\n    this._removeWidget(widget);\n\n    // Create the tab layout node to hold the widget.\n    let tabNode = new Private.TabLayoutNode(this._createTabBar());\n    tabNode.tabBar.addTab(widget.title);\n    Private.addAria(widget, tabNode.tabBar);\n\n    // Set the root if it does not exist.\n    if (!this._root) {\n      this._root = tabNode;\n      return;\n    }\n\n    // If the ref node parent is null, split the root.\n    if (!refNode || !refNode.parent) {\n      // Ensure the root is split with the correct orientation.\n      let root = this._splitRoot(orientation);\n\n      // Determine the insert index for the new tab node.\n      let i = after ? root.children.length : 0;\n\n      // Normalize the split node.\n      root.normalizeSizes();\n\n      // Create the sizer for new tab node.\n      let sizer = Private.createSizer(refNode ? 1 : Private.GOLDEN_RATIO);\n\n      // Insert the tab node sized to the golden ratio.\n      ArrayExt.insert(root.children, i, tabNode);\n      ArrayExt.insert(root.sizers, i, sizer);\n      ArrayExt.insert(root.handles, i, this._createHandle());\n      tabNode.parent = root;\n\n      // Re-normalize the split node to maintain the ratios.\n      root.normalizeSizes();\n\n      // Finally, synchronize the visibility of the handles.\n      root.syncHandles();\n      return;\n    }\n\n    // Lookup the split node for the ref widget.\n    let splitNode = refNode.parent;\n\n    // If the split node already had the correct orientation,\n    // the widget can be inserted into the split node directly.\n    if (splitNode.orientation === orientation) {\n      // Find the index of the ref node.\n      let i = splitNode.children.indexOf(refNode);\n\n      // Normalize the split node.\n      splitNode.normalizeSizes();\n\n      // Consume half the space for the insert location.\n      let s = splitNode.sizers[i].sizeHint /= 2;\n\n      // Insert the tab node sized to the other half.\n      let j = i + (after ? 1 : 0);\n      ArrayExt.insert(splitNode.children, j, tabNode);\n      ArrayExt.insert(splitNode.sizers, j, Private.createSizer(s));\n      ArrayExt.insert(splitNode.handles, j, this._createHandle());\n      tabNode.parent = splitNode;\n\n      // Finally, synchronize the visibility of the handles.\n      splitNode.syncHandles();\n      return;\n    }\n\n    // Remove the ref node from the split node.\n    let i = ArrayExt.removeFirstOf(splitNode.children, refNode);\n\n    // Create a new normalized split node for the children.\n    let childNode = new Private.SplitLayoutNode(orientation);\n    childNode.normalized = true;\n\n    // Add the ref node sized to half the space.\n    childNode.children.push(refNode);\n    childNode.sizers.push(Private.createSizer(0.5));\n    childNode.handles.push(this._createHandle());\n    refNode.parent = childNode;\n\n    // Add the tab node sized to the other half.\n    let j = after ? 1 : 0;\n    ArrayExt.insert(childNode.children, j, tabNode);\n    ArrayExt.insert(childNode.sizers, j, Private.createSizer(0.5));\n    ArrayExt.insert(childNode.handles, j, this._createHandle());\n    tabNode.parent = childNode;\n\n    // Synchronize the visibility of the handles.\n    childNode.syncHandles();\n\n    // Finally, add the new child node to the original split node.\n    ArrayExt.insert(splitNode.children, i, childNode);\n    childNode.parent = splitNode;\n  }\n\n  /**\n   * Ensure the root is a split node with the given orientation.\n   */\n  private _splitRoot(orientation: Private.Orientation): Private.SplitLayoutNode {\n    // Bail early if the root already meets the requirements.\n    let oldRoot = this._root;\n    if (oldRoot instanceof Private.SplitLayoutNode) {\n      if (oldRoot.orientation === orientation) {\n        return oldRoot;\n      }\n    }\n\n    // Create a new root node with the specified orientation.\n    let newRoot = this._root = new Private.SplitLayoutNode(orientation);\n\n    // Add the old root to the new root.\n    if (oldRoot) {\n      newRoot.children.push(oldRoot);\n      newRoot.sizers.push(Private.createSizer(0));\n      newRoot.handles.push(this._createHandle());\n      oldRoot.parent = newRoot;\n    }\n\n    // Return the new root as a convenience.\n    return newRoot;\n  }\n\n  /**\n   * Fit the layout to the total size required by the widgets.\n   */\n  private _fit(): void {\n    // Set up the computed minimum size.\n    let minW = 0;\n    let minH = 0;\n\n    // Update the size limits for the layout tree.\n    if (this._root) {\n      let limits = this._root.fit(this._spacing, this._items);\n      minW = limits.minWidth;\n      minH = limits.minHeight;\n    }\n\n    // Update the box sizing and add it to the computed min size.\n    let box = this._box = ElementExt.boxSizing(this.parent!.node);\n    minW += box.horizontalSum;\n    minH += box.verticalSum;\n\n    // Update the parent's min size constraints.\n    let style = this.parent!.node.style;\n    style.minWidth = `${minW}px`;\n    style.minHeight = `${minH}px`;\n\n    // Set the dirty flag to ensure only a single update occurs.\n    this._dirty = true;\n\n    // Notify the ancestor that it should fit immediately. This may\n    // cause a resize of the parent, fulfilling the required update.\n    if (this.parent!.parent) {\n      MessageLoop.sendMessage(this.parent!.parent!, Widget.Msg.FitRequest);\n    }\n\n    // If the dirty flag is still set, the parent was not resized.\n    // Trigger the required update on the parent widget immediately.\n    if (this._dirty) {\n      MessageLoop.sendMessage(this.parent!, Widget.Msg.UpdateRequest);\n    }\n  }\n\n  /**\n   * Update the layout position and size of the widgets.\n   *\n   * The parent offset dimensions should be `-1` if unknown.\n   */\n  private _update(offsetWidth: number, offsetHeight: number): void {\n    // Clear the dirty flag to indicate the update occurred.\n    this._dirty = false;\n\n    // Bail early if there is no root layout node.\n    if (!this._root) {\n      return;\n    }\n\n    // Measure the parent if the offset dimensions are unknown.\n    if (offsetWidth < 0) {\n      offsetWidth = this.parent!.node.offsetWidth;\n    }\n    if (offsetHeight < 0) {\n      offsetHeight = this.parent!.node.offsetHeight;\n    }\n\n    // Ensure the parent box sizing data is computed.\n    if (!this._box) {\n      this._box = ElementExt.boxSizing(this.parent!.node);\n    }\n\n    // Compute the actual layout bounds adjusted for border and padding.\n    let x = this._box.paddingTop;\n    let y = this._box.paddingLeft;\n    let width = offsetWidth - this._box.horizontalSum;\n    let height = offsetHeight - this._box.verticalSum;\n\n    // Update the geometry of the layout tree.\n    this._root.update(x, y, width, height, this._spacing, this._items);\n  }\n\n  /**\n   * Create a new tab bar for use by the dock layout.\n   *\n   * #### Notes\n   * The tab bar will be attached to the parent if it exists.\n   */\n  private _createTabBar(): TabBar<Widget> {\n    // Create the tab bar using the renderer.\n    let tabBar = this.renderer.createTabBar();\n\n    // Enforce necessary tab bar behavior.\n    tabBar.orientation = 'horizontal';\n\n    // Reparent and attach the tab bar to the parent if possible.\n    if (this.parent) {\n      tabBar.parent = this.parent;\n      this.attachWidget(tabBar);\n    }\n\n    // Return the initialized tab bar.\n    return tabBar;\n  }\n\n  /**\n   * Create a new handle for the dock layout.\n   *\n   * #### Notes\n   * The handle will be attached to the parent if it exists.\n   */\n  private _createHandle(): HTMLDivElement {\n    // Create the handle using the renderer.\n    let handle = this.renderer.createHandle();\n\n    // Initialize the handle layout behavior.\n    let style = handle.style;\n    style.position = 'absolute';\n    style.top = '0';\n    style.left = '0';\n    style.width = '0';\n    style.height = '0';\n\n    // Attach the handle to the parent if it exists.\n    if (this.parent) {\n      this.parent.node.appendChild(handle);\n    }\n\n    // Return the initialized handle.\n    return handle;\n  }\n\n  private _spacing = 4;\n  private _dirty = false;\n  private _root: Private.LayoutNode | null = null;\n  private _box: ElementExt.IBoxSizing | null = null;\n  private _items: Private.ItemMap = new Map<Widget, LayoutItem>();\n}\n\n\n/**\n * The namespace for the `DockLayout` class statics.\n */\nexport\nnamespace DockLayout {\n  /**\n   * An options object for creating a dock layout.\n   */\n  export\n  interface IOptions {\n    /**\n     * The renderer to use for the dock layout.\n     */\n    renderer: IRenderer;\n\n    /**\n     * The spacing between items in the layout.\n     *\n     * The default is `4`.\n     */\n    spacing?: number;\n  }\n\n  /**\n   * A renderer for use with a dock layout.\n   */\n  export\n  interface IRenderer {\n    /**\n     * Create a new tab bar for use with a dock layout.\n     *\n     * @returns A new tab bar for a dock layout.\n     */\n    createTabBar(): TabBar<Widget>;\n\n    /**\n     * Create a new handle node for use with a dock layout.\n     *\n     * @returns A new handle node for a dock layout.\n     */\n    createHandle(): HTMLDivElement;\n  }\n\n  /**\n   * A type alias for the supported insertion modes.\n   *\n   * An insert mode is used to specify how a widget should be added\n   * to the dock layout relative to a reference widget.\n   */\n  export\n  type InsertMode = (\n    /**\n     * The area to the top of the reference widget.\n     *\n     * The widget will be inserted just above the reference widget.\n     *\n     * If the reference widget is null or invalid, the widget will be\n     * inserted at the top edge of the dock layout.\n     */\n    'split-top' |\n\n    /**\n     * The area to the left of the reference widget.\n     *\n     * The widget will be inserted just left of the reference widget.\n     *\n     * If the reference widget is null or invalid, the widget will be\n     * inserted at the left edge of the dock layout.\n     */\n    'split-left' |\n\n    /**\n     * The area to the right of the reference widget.\n     *\n     * The widget will be inserted just right of the reference widget.\n     *\n     * If the reference widget is null or invalid, the widget will be\n     * inserted  at the right edge of the dock layout.\n     */\n    'split-right' |\n\n    /**\n     * The area to the bottom of the reference widget.\n     *\n     * The widget will be inserted just below the reference widget.\n     *\n     * If the reference widget is null or invalid, the widget will be\n     * inserted at the bottom edge of the dock layout.\n     */\n    'split-bottom' |\n\n    /**\n     * The tab position before the reference widget.\n     *\n     * The widget will be added as a tab before the reference widget.\n     *\n     * If the reference widget is null or invalid, a sensible default\n     * will be used.\n     */\n    'tab-before' |\n\n    /**\n     * The tab position after the reference widget.\n     *\n     * The widget will be added as a tab after the reference widget.\n     *\n     * If the reference widget is null or invalid, a sensible default\n     * will be used.\n     */\n    'tab-after'\n  );\n\n  /**\n   * An options object for adding a widget to the dock layout.\n   */\n  export\n  interface IAddOptions {\n    /**\n     * The insertion mode for adding the widget.\n     *\n     * The default is `'tab-after'`.\n     */\n    mode?: InsertMode;\n\n    /**\n     * The reference widget for the insert location.\n     *\n     * The default is `null`.\n     */\n    ref?: Widget | null;\n  }\n\n  /**\n   * A layout config object for a tab area.\n   */\n  export\n  interface ITabAreaConfig {\n    /**\n     * The discriminated type of the config object.\n     */\n    type: 'tab-area';\n\n    /**\n     * The widgets contained in the tab area.\n     */\n    widgets: Widget[];\n\n    /**\n     * The index of the selected tab.\n     */\n    currentIndex: number;\n  }\n\n  /**\n   * A layout config object for a split area.\n   */\n  export\n  interface ISplitAreaConfig {\n    /**\n     * The discriminated type of the config object.\n     */\n    type: 'split-area';\n\n    /**\n     * The orientation of the split area.\n     */\n    orientation: 'horizontal' | 'vertical';\n\n    /**\n     * The children in the split area.\n     */\n    children: AreaConfig[];\n\n    /**\n     * The relative sizes of the children.\n     */\n    sizes: number[];\n  }\n\n  /**\n   * A type alias for a general area config.\n   */\n  export\n  type AreaConfig = ITabAreaConfig | ISplitAreaConfig;\n\n  /**\n   * A dock layout configuration object.\n   */\n  export\n  interface ILayoutConfig {\n    /**\n     * The layout config for the main dock area.\n     */\n    main: AreaConfig | null;\n  }\n\n  /**\n   * An object which represents the geometry of a tab area.\n   */\n  export\n  interface ITabAreaGeometry {\n    /**\n     * The tab bar for the tab area.\n     */\n    tabBar: TabBar<Widget>;\n\n    /**\n     * The local X position of the hit test in the dock area.\n     *\n     * #### Notes\n     * This is the distance from the left edge of the layout parent\n     * widget, to the local X coordinate of the hit test query.\n     */\n    x: number;\n\n    /**\n     * The local Y position of the hit test in the dock area.\n     *\n     * #### Notes\n     * This is the distance from the top edge of the layout parent\n     * widget, to the local Y coordinate of the hit test query.\n     */\n    y: number;\n\n    /**\n     * The local coordinate of the top edge of the tab area.\n     *\n     * #### Notes\n     * This is the distance from the top edge of the layout parent\n     * widget, to the top edge of the tab area.\n     */\n    top: number;\n\n    /**\n     * The local coordinate of the left edge of the tab area.\n     *\n     * #### Notes\n     * This is the distance from the left edge of the layout parent\n     * widget, to the left edge of the tab area.\n     */\n    left: number;\n\n    /**\n     * The local coordinate of the right edge of the tab area.\n     *\n     * #### Notes\n     * This is the distance from the right edge of the layout parent\n     * widget, to the right edge of the tab area.\n     */\n    right: number;\n\n    /**\n     * The local coordinate of the bottom edge of the tab area.\n     *\n     * #### Notes\n     * This is the distance from the bottom edge of the layout parent\n     * widget, to the bottom edge of the tab area.\n     */\n    bottom: number;\n\n    /**\n     * The width of the tab area.\n     *\n     * #### Notes\n     * This is total width allocated for the tab area.\n     */\n    width: number;\n\n    /**\n     * The height of the tab area.\n     *\n     * #### Notes\n     * This is total height allocated for the tab area.\n     */\n    height: number;\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A fraction used for sizing root panels; ~= `1 / golden_ratio`.\n   */\n  export\n  const GOLDEN_RATIO = 0.618;\n\n  /**\n   * A type alias for a dock layout node.\n   */\n  export\n  type LayoutNode = TabLayoutNode | SplitLayoutNode;\n\n  /**\n   * A type alias for the orientation of a split layout node.\n   */\n  export\n  type Orientation = 'horizontal' | 'vertical';\n\n  /**\n   * A type alias for a layout item map.\n   */\n  export\n  type ItemMap = Map<Widget, LayoutItem>;\n\n  /**\n   * Create a box sizer with an initial size hint.\n   */\n  export\n  function createSizer(hint: number): BoxSizer {\n    let sizer = new BoxSizer();\n    sizer.sizeHint = hint;\n    sizer.size = hint;\n    return sizer;\n  }\n\n  /**\n   * Normalize an area config object and collect the visited widgets.\n   */\n  export\n  function normalizeAreaConfig(config: DockLayout.AreaConfig, widgetSet: Set<Widget>): DockLayout.AreaConfig | null {\n    let result: DockLayout.AreaConfig | null;\n    if (config.type === 'tab-area') {\n      result = normalizeTabAreaConfig(config, widgetSet);\n    } else {\n      result = normalizeSplitAreaConfig(config, widgetSet);\n    }\n    return result;\n  }\n\n  /**\n   * Convert a normalized area config into a layout tree.\n   */\n  export\n  function realizeAreaConfig(config: DockLayout.AreaConfig, renderer: DockLayout.IRenderer): LayoutNode {\n    let node: LayoutNode;\n    if (config.type === 'tab-area') {\n      node = realizeTabAreaConfig(config, renderer);\n    } else {\n      node = realizeSplitAreaConfig(config, renderer);\n    }\n    return node;\n  }\n\n  /**\n   * A layout node which holds the data for a tabbed area.\n   */\n  export\n  class TabLayoutNode {\n    /**\n     * Construct a new tab layout node.\n     *\n     * @param tabBar - The tab bar to use for the layout node.\n     */\n    constructor(tabBar: TabBar<Widget>) {\n      let tabSizer = new BoxSizer();\n      let widgetSizer = new BoxSizer();\n      tabSizer.stretch = 0;\n      widgetSizer.stretch = 1;\n      this.tabBar = tabBar;\n      this.sizers = [tabSizer, widgetSizer];\n    }\n\n    /**\n     * The parent of the layout node.\n     */\n    parent: SplitLayoutNode | null = null;\n\n    /**\n     * The tab bar for the layout node.\n     */\n    readonly tabBar: TabBar<Widget>;\n\n    /**\n     * The sizers for the layout node.\n     */\n    readonly sizers: [BoxSizer, BoxSizer];\n\n    /**\n     * The most recent value for the `top` edge of the layout box.\n     */\n    get top(): number {\n      return this._top;\n    }\n\n    /**\n     * The most recent value for the `left` edge of the layout box.\n     */\n    get left(): number {\n      return this._left;\n    }\n\n    /**\n     * The most recent value for the `width` of the layout box.\n     */\n    get width(): number {\n      return this._width;\n    }\n\n    /**\n     * The most recent value for the `height` of the layout box.\n     */\n    get height(): number {\n      return this._height;\n    }\n\n    /**\n     * Create an iterator for all widgets in the layout tree.\n     */\n    iterAllWidgets(): IIterator<Widget> {\n      return chain(once(this.tabBar), this.iterUserWidgets());\n    }\n\n    /**\n     * Create an iterator for the user widgets in the layout tree.\n     */\n    iterUserWidgets(): IIterator<Widget> {\n      return map(this.tabBar.titles, title => title.owner);\n    }\n\n    /**\n     * Create an iterator for the selected widgets in the layout tree.\n     */\n    iterSelectedWidgets(): IIterator<Widget> {\n      let title = this.tabBar.currentTitle;\n      return title ? once(title.owner) : empty<Widget>();\n    }\n\n    /**\n     * Create an iterator for the tab bars in the layout tree.\n     */\n    iterTabBars(): IIterator<TabBar<Widget>> {\n      return once(this.tabBar);\n    }\n\n    /**\n     * Create an iterator for the handles in the layout tree.\n     */\n    iterHandles(): IIterator<HTMLDivElement> {\n      return empty<HTMLDivElement>();\n    }\n\n    /**\n     * Find the tab layout node which contains the given widget.\n     */\n    findTabNode(widget: Widget): TabLayoutNode | null {\n      return this.tabBar.titles.indexOf(widget.title) !== -1 ? this : null;\n    }\n\n    /**\n     * Find the split layout node which contains the given handle.\n     */\n    findSplitNode(handle: HTMLDivElement): { index: number, node: SplitLayoutNode } | null {\n      return null;\n    }\n\n    /**\n     * Find the first tab layout node in a layout tree.\n     */\n    findFirstTabNode(): TabLayoutNode | null {\n      return this;\n    }\n\n    /**\n     * Find the tab layout node which contains the local point.\n     */\n    hitTestTabNodes(x: number, y: number): TabLayoutNode | null {\n      if (x < this._left || x >= this._left + this._width) {\n        return null;\n      }\n      if (y < this._top || y >= this._top + this._height) {\n        return null;\n      }\n      return this;\n    }\n\n    /**\n     * Create a configuration object for the layout tree.\n     */\n    createConfig(): DockLayout.ITabAreaConfig {\n      let widgets = this.tabBar.titles.map(title => title.owner);\n      let currentIndex = this.tabBar.currentIndex;\n      return { type: 'tab-area', widgets, currentIndex };\n    }\n\n    /**\n     * Recursively hold all of the sizes in the layout tree.\n     *\n     * This ignores the sizers of tab layout nodes.\n     */\n    holdAllSizes(): void {\n      return;\n    }\n\n    /**\n     * Fit the layout tree.\n     */\n    fit(spacing: number, items: ItemMap): ElementExt.ISizeLimits {\n      // Set up the limit variables.\n      let minWidth = 0;\n      let minHeight = 0;\n      let maxWidth = Infinity;\n      let maxHeight = Infinity;\n\n      // Lookup the tab bar layout item.\n      let tabBarItem = items.get(this.tabBar);\n\n      // Lookup the widget layout item.\n      let current = this.tabBar.currentTitle;\n      let widgetItem = current ? items.get(current.owner) : undefined;\n\n      // Lookup the tab bar and widget sizers.\n      let [tabBarSizer, widgetSizer] = this.sizers;\n\n      // Update the tab bar limits.\n      if (tabBarItem) {\n        tabBarItem.fit();\n      }\n\n      // Update the widget limits.\n      if (widgetItem) {\n        widgetItem.fit();\n      }\n\n      // Update the results and sizer for the tab bar.\n      if (tabBarItem && !tabBarItem.isHidden) {\n        minWidth = Math.max(minWidth, tabBarItem.minWidth);\n        minHeight += tabBarItem.minHeight;\n        tabBarSizer.minSize = tabBarItem.minHeight;\n        tabBarSizer.maxSize = tabBarItem.maxHeight;\n      } else {\n        tabBarSizer.minSize = 0;\n        tabBarSizer.maxSize = 0;\n      }\n\n      // Update the results and sizer for the current widget.\n      if (widgetItem && !widgetItem.isHidden) {\n        minWidth = Math.max(minWidth, widgetItem.minWidth);\n        minHeight += widgetItem.minHeight;\n        widgetSizer.minSize = widgetItem.minHeight;\n        widgetSizer.maxSize = Infinity;\n      } else {\n        widgetSizer.minSize = 0;\n        widgetSizer.maxSize = Infinity;\n      }\n\n      // Return the computed size limits for the layout node.\n      return { minWidth, minHeight, maxWidth, maxHeight };\n    }\n\n    /**\n     * Update the layout tree.\n     */\n    update(left: number, top: number, width: number, height: number, spacing: number, items: ItemMap): void {\n      // Update the layout box values.\n      this._top = top;\n      this._left = left;\n      this._width = width;\n      this._height = height;\n\n      // Lookup the tab bar layout item.\n      let tabBarItem = items.get(this.tabBar);\n\n      // Lookup the widget layout item.\n      let current = this.tabBar.currentTitle;\n      let widgetItem = current ? items.get(current.owner) : undefined;\n\n      // Distribute the layout space to the sizers.\n      BoxEngine.calc(this.sizers, height);\n\n      // Update the tab bar item using the computed size.\n      if (tabBarItem && !tabBarItem.isHidden) {\n        let size = this.sizers[0].size;\n        tabBarItem.update(left, top, width, size);\n        top += size;\n      }\n\n      // Layout the widget using the computed size.\n      if (widgetItem && !widgetItem.isHidden) {\n        let size = this.sizers[1].size;\n        widgetItem.update(left, top, width, size);\n      }\n    }\n\n    private _top = 0;\n    private _left = 0;\n    private _width = 0;\n    private _height = 0;\n  }\n\n  /**\n   * A layout node which holds the data for a split area.\n   */\n  export\n  class SplitLayoutNode {\n    /**\n     * Construct a new split layout node.\n     *\n     * @param orientation - The orientation of the node.\n     */\n    constructor(orientation: Orientation) {\n      this.orientation = orientation;\n    }\n\n    /**\n     * The parent of the layout node.\n     */\n    parent: SplitLayoutNode | null = null;\n\n    /**\n     * Whether the sizers have been normalized.\n     */\n    normalized = false;\n\n    /**\n     * The orientation of the node.\n     */\n    readonly orientation: Orientation;\n\n    /**\n     * The child nodes for the split node.\n     */\n    readonly children: LayoutNode[] = [];\n\n    /**\n     * The box sizers for the layout children.\n     */\n    readonly sizers: BoxSizer[] = [];\n\n    /**\n     * The handles for the layout children.\n     */\n    readonly handles: HTMLDivElement[] = [];\n\n    /**\n     * Create an iterator for all widgets in the layout tree.\n     */\n    iterAllWidgets(): IIterator<Widget> {\n      let children = map(this.children, child => child.iterAllWidgets());\n      return new ChainIterator<Widget>(children);\n    }\n\n    /**\n     * Create an iterator for the user widgets in the layout tree.\n     */\n    iterUserWidgets(): IIterator<Widget> {\n      let children = map(this.children, child => child.iterUserWidgets());\n      return new ChainIterator<Widget>(children);\n    }\n\n    /**\n     * Create an iterator for the selected widgets in the layout tree.\n     */\n    iterSelectedWidgets(): IIterator<Widget> {\n      let children = map(this.children, child => child.iterSelectedWidgets());\n      return new ChainIterator<Widget>(children);\n    }\n\n    /**\n     * Create an iterator for the tab bars in the layout tree.\n     */\n    iterTabBars(): IIterator<TabBar<Widget>> {\n      let children = map(this.children, child => child.iterTabBars());\n      return new ChainIterator<TabBar<Widget>>(children);\n    }\n\n    /**\n     * Create an iterator for the handles in the layout tree.\n     */\n    iterHandles(): IIterator<HTMLDivElement> {\n      let children = map(this.children, child => child.iterHandles());\n      return chain(this.handles, new ChainIterator<HTMLDivElement>(children));\n    }\n\n    /**\n     * Find the tab layout node which contains the given widget.\n     */\n    findTabNode(widget: Widget): TabLayoutNode | null {\n      for (let i = 0, n = this.children.length; i < n; ++i) {\n        let result = this.children[i].findTabNode(widget);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Find the split layout node which contains the given handle.\n     */\n    findSplitNode(handle: HTMLDivElement): { index: number, node: SplitLayoutNode } | null {\n      let index = this.handles.indexOf(handle);\n      if (index !== -1) {\n        return { index, node: this };\n      }\n      for (let i = 0, n = this.children.length; i < n; ++i) {\n        let result = this.children[i].findSplitNode(handle);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Find the first tab layout node in a layout tree.\n     */\n    findFirstTabNode(): TabLayoutNode | null {\n      if (this.children.length === 0) {\n        return null;\n      }\n      return this.children[0].findFirstTabNode();\n    }\n\n    /**\n     * Find the tab layout node which contains the local point.\n     */\n    hitTestTabNodes(x: number, y: number): TabLayoutNode | null {\n      for (let i = 0, n = this.children.length; i < n; ++i) {\n        let result = this.children[i].hitTestTabNodes(x, y);\n        if (result) {\n          return result;\n        }\n      }\n      return null;\n    }\n\n    /**\n     * Create a configuration object for the layout tree.\n     */\n    createConfig(): DockLayout.ISplitAreaConfig {\n      let orientation = this.orientation;\n      let sizes = this.createNormalizedSizes();\n      let children = this.children.map(child => child.createConfig());\n      return { type: 'split-area', orientation, children, sizes };\n    }\n\n    /**\n     * Sync the visibility and orientation of the handles.\n     */\n    syncHandles(): void {\n      each(this.handles, (handle, i) => {\n        handle.setAttribute('data-orientation', this.orientation);\n        if (i === this.handles.length - 1) {\n          handle.classList.add('lm-mod-hidden');\n          /* <DEPRECATED> */\n          handle.classList.add('p-mod-hidden');\n          /* </DEPRECATED> */\n        } else {\n          handle.classList.remove('lm-mod-hidden');\n          /* <DEPRECATED> */\n          handle.classList.remove('p-mod-hidden');\n          /* </DEPRECATED> */\n        }\n      });\n    }\n\n    /**\n     * Hold the current sizes of the box sizers.\n     *\n     * This sets the size hint of each sizer to its current size.\n     */\n    holdSizes(): void {\n      each(this.sizers, sizer => { sizer.sizeHint = sizer.size; });\n    }\n\n    /**\n     * Recursively hold all of the sizes in the layout tree.\n     *\n     * This ignores the sizers of tab layout nodes.\n     */\n    holdAllSizes(): void {\n      each(this.children, child => child.holdAllSizes());\n      this.holdSizes();\n    }\n\n    /**\n     * Normalize the sizes of the split layout node.\n     */\n    normalizeSizes(): void {\n      // Bail early if the sizers are empty.\n      let n = this.sizers.length;\n      if (n === 0) {\n        return;\n      }\n\n      // Hold the current sizes of the sizers.\n      this.holdSizes();\n\n      // Compute the sum of the sizes.\n      let sum = reduce(this.sizers, (v, sizer) => v + sizer.sizeHint, 0);\n\n      // Normalize the sizes based on the sum.\n      if (sum === 0) {\n        each(this.sizers, sizer => {\n          sizer.size = sizer.sizeHint = 1 / n;\n        });\n      } else {\n        each(this.sizers, sizer => {\n          sizer.size = sizer.sizeHint /= sum;\n        });\n      }\n\n      // Mark the sizes as normalized.\n      this.normalized = true;\n    }\n\n    /**\n     * Snap the normalized sizes of the split layout node.\n     */\n    createNormalizedSizes(): number[] {\n      // Bail early if the sizers are empty.\n      let n = this.sizers.length;\n      if (n === 0) {\n        return [];\n      }\n\n      // Grab the current sizes of the sizers.\n      let sizes = this.sizers.map(sizer => sizer.size);\n\n      // Compute the sum of the sizes.\n      let sum = reduce(sizes, (v, size) => v + size, 0);\n\n      // Normalize the sizes based on the sum.\n      if (sum === 0) {\n        each(sizes, (size, i) => { sizes[i] = 1 / n; });\n      } else {\n        each(sizes, (size, i) => { sizes[i] = size / sum; });\n      }\n\n      // Return the normalized sizes.\n      return sizes;\n    }\n\n    /**\n     * Fit the layout tree.\n     */\n    fit(spacing: number, items: ItemMap): ElementExt.ISizeLimits {\n      // Compute the required fixed space.\n      let horizontal = this.orientation === 'horizontal';\n      let fixed = Math.max(0, this.children.length - 1) * spacing;\n\n      // Set up the limit variables.\n      let minWidth = horizontal ? fixed : 0;\n      let minHeight = horizontal ? 0 : fixed;\n      let maxWidth = Infinity;\n      let maxHeight = Infinity;\n\n      // Fit the children and update the limits.\n      for (let i = 0, n = this.children.length; i < n; ++i) {\n        let limits = this.children[i].fit(spacing, items);\n        if (horizontal) {\n          minHeight = Math.max(minHeight, limits.minHeight);\n          minWidth += limits.minWidth;\n          this.sizers[i].minSize = limits.minWidth;\n        } else {\n          minWidth = Math.max(minWidth, limits.minWidth);\n          minHeight += limits.minHeight;\n          this.sizers[i].minSize = limits.minHeight;\n        }\n      }\n\n      // Return the computed limits for the layout node.\n      return { minWidth, minHeight, maxWidth, maxHeight };\n    }\n\n    /**\n     * Update the layout tree.\n     */\n    update(left: number, top: number, width: number, height: number, spacing: number, items: ItemMap): void {\n      // Compute the available layout space.\n      let horizontal = this.orientation === 'horizontal';\n      let fixed = Math.max(0, this.children.length - 1) * spacing;\n      let space = Math.max(0, (horizontal ? width : height) - fixed);\n\n      // De-normalize the sizes if needed.\n      if (this.normalized) {\n        each(this.sizers, sizer => { sizer.sizeHint *= space; });\n        this.normalized = false;\n      }\n\n      // Distribute the layout space to the sizers.\n      BoxEngine.calc(this.sizers, space);\n\n      // Update the geometry of the child nodes and handles.\n      for (let i = 0, n = this.children.length; i < n; ++i) {\n        let child = this.children[i];\n        let size = this.sizers[i].size;\n        let handleStyle = this.handles[i].style;\n        if (horizontal) {\n          child.update(left, top, size, height, spacing, items);\n          left += size;\n          handleStyle.top = `${top}px`;\n          handleStyle.left = `${left}px`;\n          handleStyle.width = `${spacing}px`;\n          handleStyle.height = `${height}px`;\n          left += spacing;\n        } else {\n          child.update(left, top, width, size, spacing, items);\n          top += size;\n          handleStyle.top = `${top}px`;\n          handleStyle.left = `${left}px`;\n          handleStyle.width = `${width}px`;\n          handleStyle.height = `${spacing}px`;\n          top += spacing;\n        }\n      }\n    }\n  }\n\n  export\n  function addAria(widget: Widget, tabBar: TabBar<Widget>) {\n    widget.node.setAttribute('role', 'tabpanel');\n    let renderer = tabBar.renderer;\n    if (renderer instanceof TabBar.Renderer) {\n      let tabId = renderer.createTabKey({ title: widget.title, current: false, zIndex: 0 });\n      widget.node.setAttribute('aria-labelledby', tabId);  \n    }\n  }\n\n  export\n  function removeAria(widget: Widget) {\n    widget.node.removeAttribute('role');\n    widget.node.removeAttribute('aria-labelledby');\n  }\n\n  /**\n   * Normalize a tab area config and collect the visited widgets.\n   */\n  function normalizeTabAreaConfig(config: DockLayout.ITabAreaConfig, widgetSet: Set<Widget>): DockLayout.ITabAreaConfig | null {\n    // Bail early if there is no content.\n    if (config.widgets.length === 0) {\n      return null;\n    }\n\n    // Setup the filtered widgets array.\n    let widgets: Widget[] = [];\n\n    // Filter the config for unique widgets.\n    each(config.widgets, widget => {\n      if (!widgetSet.has(widget)) {\n        widgetSet.add(widget);\n        widgets.push(widget);\n      }\n    });\n\n    // Bail if there are no effective widgets.\n    if (widgets.length === 0) {\n      return null;\n    }\n\n    // Normalize the current index.\n    let index = config.currentIndex;\n    if (index !== -1 && (index < 0 || index >= widgets.length)) {\n      index = 0;\n    }\n\n    // Return a normalized config object.\n    return { type: 'tab-area', widgets, currentIndex: index };\n  }\n\n  /**\n   * Normalize a split area config and collect the visited widgets.\n   */\n  function normalizeSplitAreaConfig(config: DockLayout.ISplitAreaConfig, widgetSet: Set<Widget>): DockLayout.AreaConfig | null {\n    // Set up the result variables.\n    let orientation = config.orientation;\n    let children: DockLayout.AreaConfig[] = [];\n    let sizes: number[] = [];\n\n    // Normalize the config children.\n    for (let i = 0, n = config.children.length; i < n; ++i) {\n      // Normalize the child config.\n      let child = normalizeAreaConfig(config.children[i], widgetSet);\n\n      // Ignore an empty child.\n      if (!child) {\n        continue;\n      }\n\n      // Add the child or hoist its content as appropriate.\n      if (child.type === 'tab-area' || child.orientation !== orientation) {\n        children.push(child);\n        sizes.push(Math.abs(config.sizes[i] || 0));\n      } else {\n        children.push(...child.children);\n        sizes.push(...child.sizes);\n      }\n    }\n\n    // Bail if there are no effective children.\n    if (children.length === 0) {\n      return null;\n    }\n\n    // If there is only one effective child, return that child.\n    if (children.length === 1) {\n      return children[0];\n    }\n\n    // Return a normalized config object.\n    return { type: 'split-area', orientation, children, sizes };\n  }\n\n  /**\n   * Convert a normalized tab area config into a layout tree.\n   */\n  function realizeTabAreaConfig(config: DockLayout.ITabAreaConfig, renderer: DockLayout.IRenderer): TabLayoutNode {\n    // Create the tab bar for the layout node.\n    let tabBar = renderer.createTabBar();\n\n    // Hide each widget and add it to the tab bar.\n    each(config.widgets, widget => {\n      widget.hide();\n      tabBar.addTab(widget.title);\n      Private.addAria(widget, tabBar);\n    });\n\n    // Set the current index of the tab bar.\n    tabBar.currentIndex = config.currentIndex;\n\n    // Return the new tab layout node.\n    return new TabLayoutNode(tabBar);\n  }\n\n  /**\n   * Convert a normalized split area config into a layout tree.\n   */\n  function realizeSplitAreaConfig(config: DockLayout.ISplitAreaConfig, renderer: DockLayout.IRenderer): SplitLayoutNode {\n    // Create the split layout node.\n    let node = new SplitLayoutNode(config.orientation);\n\n    // Add each child to the layout node.\n    each(config.children, (child, i) => {\n      // Create the child data for the layout node.\n      let childNode = realizeAreaConfig(child, renderer);\n      let sizer = createSizer(config.sizes[i]);\n      let handle = renderer.createHandle();\n\n      // Add the child data to the layout node.\n      node.children.push(childNode);\n      node.handles.push(handle);\n      node.sizers.push(sizer);\n\n      // Update the parent for the child node.\n      childNode.parent = node;\n    });\n\n    // Synchronize the handle state for the layout node.\n    node.syncHandles();\n\n    // Normalize the sizes for the layout node.\n    node.normalizeSizes();\n\n    // Return the new layout node.\n    return node;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  IIterator, each, find, toArray\n} from '@lumino/algorithm';\n\nimport {\n  MimeData\n} from '@lumino/coreutils';\n\nimport {\n  IDisposable\n} from '@lumino/disposable';\n\nimport {\n  ElementExt, Platform\n} from '@lumino/domutils';\n\nimport {\n  Drag, IDragEvent\n} from '@lumino/dragdrop';\n\nimport {\n  ConflatableMessage, Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  AttachedProperty\n} from '@lumino/properties';\n\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  DockLayout\n} from './docklayout';\n\nimport {\n  TabBar\n} from './tabbar';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A widget which provides a flexible docking area for widgets.\n */\nexport\nclass DockPanel extends Widget {\n  /**\n   * Construct a new dock panel.\n   *\n   * @param options - The options for initializing the panel.\n   */\n  constructor(options: DockPanel.IOptions = {}) {\n    super();\n    this.addClass('lm-DockPanel');\n    /* <DEPRECATED> */\n    this.addClass('p-DockPanel');\n    /* </DEPRECATED> */\n    this._mode = options.mode || 'multiple-document';\n    this._renderer = options.renderer || DockPanel.defaultRenderer;\n    this._edges = options.edges || Private.DEFAULT_EDGES;\n    if (options.tabsMovable !== undefined) {\n      this._tabsMovable = options.tabsMovable;\n    }\n    if(options.tabsConstrained !== undefined){\n      this._tabsConstrained = options.tabsConstrained;\n    }\n    if (options.addButtonEnabled !== undefined) {\n      this._addButtonEnabled = options.addButtonEnabled;\n    }\n\n    // Toggle the CSS mode attribute.\n    this.dataset['mode'] = this._mode;\n\n    // Create the delegate renderer for the layout.\n    let renderer: DockPanel.IRenderer = {\n      createTabBar: () => this._createTabBar(),\n      createHandle: () => this._createHandle()\n    };\n\n    // Set up the dock layout for the panel.\n    this.layout = new DockLayout({ renderer, spacing: options.spacing });\n\n    // Set up the overlay drop indicator.\n    this.overlay = options.overlay || new DockPanel.Overlay();\n    this.node.appendChild(this.overlay.node);\n  }\n\n  /**\n   * Dispose of the resources held by the panel.\n   */\n  dispose(): void {\n    // Ensure the mouse is released.\n    this._releaseMouse();\n\n    // Hide the overlay.\n    this.overlay.hide(0);\n\n    // Cancel a drag if one is in progress.\n    if (this._drag) {\n      this._drag.dispose();\n    }\n\n    // Dispose of the base class.\n    super.dispose();\n  }\n\n  /**\n   * A signal emitted when the layout configuration is modified.\n   *\n   * #### Notes\n   * This signal is emitted whenever the current layout configuration\n   * may have changed.\n   *\n   * This signal is emitted asynchronously in a collapsed fashion, so\n   * that multiple synchronous modifications results in only a single\n   * emit of the signal.\n   */\n  get layoutModified(): ISignal<this, void> {\n    return this._layoutModified;\n  }\n\n  /**\n   * A signal emitted when the add button on a tab bar is clicked.\n   *\n   */\n  get addRequested(): ISignal<this, TabBar<Widget>> {\n    return this._addRequested;\n  }\n\n  /**\n   * The overlay used by the dock panel.\n   */\n  readonly overlay: DockPanel.IOverlay;\n\n  /**\n   * The renderer used by the dock panel.\n   */\n  get renderer(): DockPanel.IRenderer {\n    return (this.layout as DockLayout).renderer;\n  }\n\n  /**\n   * Get the spacing between the widgets.\n   */\n  get spacing(): number {\n    return (this.layout as DockLayout).spacing;\n  }\n\n  /**\n   * Set the spacing between the widgets.\n   */\n  set spacing(value: number) {\n    (this.layout as DockLayout).spacing = value;\n  }\n\n  /**\n   * Get the mode for the dock panel.\n   */\n  get mode(): DockPanel.Mode {\n    return this._mode;\n  }\n\n  /**\n   * Set the mode for the dock panel.\n   *\n   * #### Notes\n   * Changing the mode is a destructive operation with respect to the\n   * panel's layout configuration. If layout state must be preserved,\n   * save the current layout config before changing the mode.\n   */\n  set mode(value: DockPanel.Mode) {\n    // Bail early if the mode does not change.\n    if (this._mode === value) {\n      return;\n    }\n\n    // Update the internal mode.\n    this._mode = value;\n\n    // Toggle the CSS mode attribute.\n    this.dataset['mode'] = value;\n\n    // Get the layout for the panel.\n    let layout = this.layout as DockLayout;\n\n    // Configure the layout for the specified mode.\n    switch (value) {\n    case 'multiple-document':\n      each(layout.tabBars(), tabBar => { tabBar.show(); });\n      break;\n    case 'single-document':\n      layout.restoreLayout(Private.createSingleDocumentConfig(this));\n      break;\n    default:\n      throw 'unreachable';\n    }\n\n    // Schedule an emit of the layout modified signal.\n    MessageLoop.postMessage(this, Private.LayoutModified);\n  }\n\n  /**\n   * Whether the tabs can be dragged / moved at runtime.\n   */\n  get tabsMovable(): boolean {\n    return this._tabsMovable;\n  }\n\n\n  /**\n   * Enable / Disable draggable / movable tabs.\n   */\n  set tabsMovable(value: boolean) {\n    this._tabsMovable = value;\n    each(this.tabBars(), (tabbar) => { tabbar.tabsMovable = value });\n  }\n\n  /**\n   * Whether the tabs are constrained to their source dock panel\n   */\n  get tabsConstrained(): boolean{\n    return this._tabsConstrained;\n  }\n\n  /**\n   * Constrain/Allow tabs to be dragged outside of this dock panel\n   */\n  set tabsConstrained(value:boolean) {\n    this._tabsConstrained = value;\n  }\n\n  /**\n   * Whether the add buttons for each tab bar are enabled.\n   */\n  get addButtonEnabled(): boolean {\n    return this._addButtonEnabled;\n  }\n\n  /**\n   * Set whether the add buttons for each tab bar are enabled.\n   */\n  set addButtonEnabled(value: boolean) {\n    this._addButtonEnabled = value;\n    each(this.tabBars(), tabbar => { tabbar.addButtonEnabled = value; });\n  }\n\n  /**\n   * Whether the dock panel is empty.\n   */\n  get isEmpty(): boolean {\n    return (this.layout as DockLayout).isEmpty;\n  }\n\n  /**\n   * Create an iterator over the user widgets in the panel.\n   *\n   * @returns A new iterator over the user widgets in the panel.\n   *\n   * #### Notes\n   * This iterator does not include the generated tab bars.\n   */\n  widgets(): IIterator<Widget> {\n    return (this.layout as DockLayout).widgets();\n  }\n\n  /**\n   * Create an iterator over the selected widgets in the panel.\n   *\n   * @returns A new iterator over the selected user widgets.\n   *\n   * #### Notes\n   * This iterator yields the widgets corresponding to the current tab\n   * of each tab bar in the panel.\n   */\n  selectedWidgets(): IIterator<Widget> {\n    return (this.layout as DockLayout).selectedWidgets();\n  }\n\n  /**\n   * Create an iterator over the tab bars in the panel.\n   *\n   * @returns A new iterator over the tab bars in the panel.\n   *\n   * #### Notes\n   * This iterator does not include the user widgets.\n   */\n  tabBars(): IIterator<TabBar<Widget>> {\n    return (this.layout as DockLayout).tabBars();\n  }\n\n  /**\n   * Create an iterator over the handles in the panel.\n   *\n   * @returns A new iterator over the handles in the panel.\n   */\n  handles(): IIterator<HTMLDivElement> {\n    return (this.layout as DockLayout).handles();\n  }\n\n  /**\n   * Select a specific widget in the dock panel.\n   *\n   * @param widget - The widget of interest.\n   *\n   * #### Notes\n   * This will make the widget the current widget in its tab area.\n   */\n  selectWidget(widget: Widget): void {\n    // Find the tab bar which contains the widget.\n    let tabBar = find(this.tabBars(), bar => {\n      return bar.titles.indexOf(widget.title) !== -1;\n    });\n\n    // Throw an error if no tab bar is found.\n    if (!tabBar) {\n      throw new Error('Widget is not contained in the dock panel.');\n    }\n\n    // Ensure the widget is the current widget.\n    tabBar.currentTitle = widget.title;\n  }\n\n  /**\n   * Activate a specified widget in the dock panel.\n   *\n   * @param widget - The widget of interest.\n   *\n   * #### Notes\n   * This will select and activate the given widget.\n   */\n  activateWidget(widget: Widget): void {\n    this.selectWidget(widget);\n    widget.activate();\n  }\n\n  /**\n   * Save the current layout configuration of the dock panel.\n   *\n   * @returns A new config object for the current layout state.\n   *\n   * #### Notes\n   * The return value can be provided to the `restoreLayout` method\n   * in order to restore the layout to its current configuration.\n   */\n  saveLayout(): DockPanel.ILayoutConfig {\n    return (this.layout as DockLayout).saveLayout();\n  }\n\n  /**\n   * Restore the layout to a previously saved configuration.\n   *\n   * @param config - The layout configuration to restore.\n   *\n   * #### Notes\n   * Widgets which currently belong to the layout but which are not\n   * contained in the config will be unparented.\n   *\n   * The dock panel automatically reverts to `'multiple-document'`\n   * mode when a layout config is restored.\n   */\n  restoreLayout(config: DockPanel.ILayoutConfig): void {\n    // Reset the mode.\n    this._mode = 'multiple-document';\n\n    // Restore the layout.\n    (this.layout as DockLayout).restoreLayout(config);\n\n    // Flush the message loop on IE and Edge to prevent flicker.\n    if (Platform.IS_EDGE || Platform.IS_IE) {\n      MessageLoop.flush();\n    }\n\n    // Schedule an emit of the layout modified signal.\n    MessageLoop.postMessage(this, Private.LayoutModified);\n  }\n\n  /**\n   * Add a widget to the dock panel.\n   *\n   * @param widget - The widget to add to the dock panel.\n   *\n   * @param options - The additional options for adding the widget.\n   *\n   * #### Notes\n   * If the panel is in single document mode, the options are ignored\n   * and the widget is always added as tab in the hidden tab bar.\n   */\n  addWidget(widget: Widget, options: DockPanel.IAddOptions = {}): void {\n    // Add the widget to the layout.\n    if (this._mode === 'single-document') {\n      (this.layout as DockLayout).addWidget(widget);\n    } else {\n      (this.layout as DockLayout).addWidget(widget, options);\n    }\n\n    // Schedule an emit of the layout modified signal.\n    MessageLoop.postMessage(this, Private.LayoutModified);\n  }\n\n  /**\n   * Process a message sent to the widget.\n   *\n   * @param msg - The message sent to the widget.\n   */\n  processMessage(msg: Message): void {\n    if (msg.type === 'layout-modified') {\n      this._layoutModified.emit(undefined);\n    } else {\n      super.processMessage(msg);\n    }\n  }\n\n  /**\n   * Handle the DOM events for the dock panel.\n   *\n   * @param event - The DOM event sent to the panel.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the panel's DOM node. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'lm-dragenter':\n      this._evtDragEnter(event as IDragEvent);\n      break;\n    case 'lm-dragleave':\n      this._evtDragLeave(event as IDragEvent);\n      break;\n    case 'lm-dragover':\n      this._evtDragOver(event as IDragEvent);\n      break;\n    case 'lm-drop':\n      this._evtDrop(event as IDragEvent);\n      break;\n    case 'mousedown':\n      this._evtMouseDown(event as MouseEvent);\n      break;\n    case 'mousemove':\n      this._evtMouseMove(event as MouseEvent);\n      break;\n    case 'mouseup':\n      this._evtMouseUp(event as MouseEvent);\n      break;\n    case 'keydown':\n      this._evtKeyDown(event as KeyboardEvent);\n      break;\n    case 'contextmenu':\n      event.preventDefault();\n      event.stopPropagation();\n      break;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('lm-dragenter', this);\n    this.node.addEventListener('lm-dragleave', this);\n    this.node.addEventListener('lm-dragover', this);\n    this.node.addEventListener('lm-drop', this);\n    this.node.addEventListener('mousedown', this);\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('lm-dragenter', this);\n    this.node.removeEventListener('lm-dragleave', this);\n    this.node.removeEventListener('lm-dragover', this);\n    this.node.removeEventListener('lm-drop', this);\n    this.node.removeEventListener('mousedown', this);\n    this._releaseMouse();\n  }\n\n  /**\n   * A message handler invoked on a `'child-added'` message.\n   */\n  protected onChildAdded(msg: Widget.ChildMessage): void {\n    // Ignore the generated tab bars.\n    if (Private.isGeneratedTabBarProperty.get(msg.child)) {\n      return;\n    }\n\n    // Add the widget class to the child.\n    msg.child.addClass('lm-DockPanel-widget');\n    /* <DEPRECATED> */\n    msg.child.addClass('p-DockPanel-widget');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * A message handler invoked on a `'child-removed'` message.\n   */\n  protected onChildRemoved(msg: Widget.ChildMessage): void {\n    // Ignore the generated tab bars.\n    if (Private.isGeneratedTabBarProperty.get(msg.child)) {\n      return;\n    }\n\n    // Remove the widget class from the child.\n    msg.child.removeClass('lm-DockPanel-widget');\n    /* <DEPRECATED> */\n    msg.child.removeClass('p-DockPanel-widget');\n    /* </DEPRECATED> */\n\n    // Schedule an emit of the layout modified signal.\n    MessageLoop.postMessage(this, Private.LayoutModified);\n  }\n\n  /**\n   * Handle the `'lm-dragenter'` event for the dock panel.\n   */\n  private _evtDragEnter(event: IDragEvent): void {\n    // If the factory mime type is present, mark the event as\n    // handled in order to get the rest of the drag events.\n    if (event.mimeData.hasData('application/vnd.lumino.widget-factory')) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * Handle the `'lm-dragleave'` event for the dock panel.\n   */\n  private _evtDragLeave(event: IDragEvent): void {\n    // Mark the event as handled.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // The new target might be a descendant, so we might still handle the drop.\n    // Hide asynchronously so that if a lm-dragover event bubbles up to us, the\n    // hide is cancelled by the lm-dragover handler's show overlay logic.\n    this.overlay.hide(1)\n  }\n\n  /**\n   * Handle the `'lm-dragover'` event for the dock panel.\n   */\n  private _evtDragOver(event: IDragEvent): void {\n    // Mark the event as handled.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Show the drop indicator overlay and update the drop\n    // action based on the drop target zone under the mouse.\n    if ((this._tabsConstrained && event.source !== this) || this._showOverlay(event.clientX, event.clientY) === 'invalid') {\n      event.dropAction = 'none';\n    } else {\n      event.dropAction = event.proposedAction;\n    }\n  }\n\n  /**\n   * Handle the `'lm-drop'` event for the dock panel.\n   */\n  private _evtDrop(event: IDragEvent): void {\n    // Mark the event as handled.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Hide the drop indicator overlay.\n    this.overlay.hide(0);\n\n    // Bail if the proposed action is to do nothing.\n    if (event.proposedAction === 'none') {\n      event.dropAction = 'none';\n      return;\n    }\n\n    // Find the drop target under the mouse.\n    let { clientX, clientY } = event;\n    let { zone, target } = Private.findDropTarget(\n      this,\n      clientX,\n      clientY,\n      this._edges\n    );\n\n    // Bail if the drop zone is invalid.\n    if (zone === 'invalid') {\n      event.dropAction = 'none';\n      return;\n    }\n\n    // Bail if the factory mime type has invalid data.\n    let mimeData = event.mimeData;\n    let factory = mimeData.getData('application/vnd.lumino.widget-factory');\n    if (typeof factory !== 'function') {\n      event.dropAction = 'none';\n      return;\n    }\n\n    // Bail if the factory does not produce a widget.\n    let widget = factory();\n    if (!(widget instanceof Widget)) {\n      event.dropAction = 'none';\n      return;\n    }\n\n    // Bail if the widget is an ancestor of the dock panel.\n    if (widget.contains(this)) {\n      event.dropAction = 'none';\n      return;\n    }\n\n    // Find the reference widget for the drop target.\n    let ref = target ? Private.getDropRef(target.tabBar) : null;\n\n    // Add the widget according to the indicated drop zone.\n    switch(zone) {\n    case 'root-all':\n      this.addWidget(widget);\n      break;\n    case 'root-top':\n      this.addWidget(widget, { mode: 'split-top' });\n      break;\n    case 'root-left':\n      this.addWidget(widget, { mode: 'split-left' });\n      break;\n    case 'root-right':\n      this.addWidget(widget, { mode: 'split-right' });\n      break;\n    case 'root-bottom':\n      this.addWidget(widget, { mode: 'split-bottom' });\n      break;\n    case 'widget-all':\n      this.addWidget(widget, { mode: 'tab-after', ref });\n      break;\n    case 'widget-top':\n      this.addWidget(widget, { mode: 'split-top', ref });\n      break;\n    case 'widget-left':\n      this.addWidget(widget, { mode: 'split-left', ref });\n      break;\n    case 'widget-right':\n      this.addWidget(widget, { mode: 'split-right', ref });\n      break;\n    case 'widget-bottom':\n      this.addWidget(widget, { mode: 'split-bottom', ref });\n      break;\n    case 'widget-tab':\n      this.addWidget(widget, { mode: 'tab-after', ref });\n      break;\n    default:\n      throw 'unreachable';\n    }\n\n    // Accept the proposed drop action.\n    event.dropAction = event.proposedAction;\n\n    // Activate the dropped widget.\n    this.activateWidget(widget);\n  }\n\n  /**\n   * Handle the `'keydown'` event for the dock panel.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // Stop input events during drag.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Release the mouse if `Escape` is pressed.\n    if (event.keyCode === 27) {\n      // Finalize the mouse release.\n      this._releaseMouse();\n\n      // Schedule an emit of the layout modified signal.\n      MessageLoop.postMessage(this, Private.LayoutModified);\n    }\n  }\n\n  /**\n   * Handle the `'mousedown'` event for the dock panel.\n   */\n  private _evtMouseDown(event: MouseEvent): void {\n    // Do nothing if the left mouse button is not pressed.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Find the handle which contains the mouse target, if any.\n    let layout = this.layout as DockLayout;\n    let target = event.target as HTMLElement;\n    let handle = find(layout.handles(), handle => handle.contains(target));\n    if (!handle) {\n      return;\n    }\n\n    // Stop the event when a handle is pressed.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Add the extra document listeners.\n    document.addEventListener('keydown', this, true);\n    document.addEventListener('mouseup', this, true);\n    document.addEventListener('mousemove', this, true);\n    document.addEventListener('contextmenu', this, true);\n\n    // Compute the offset deltas for the handle press.\n    let rect = handle.getBoundingClientRect();\n    let deltaX = event.clientX - rect.left;\n    let deltaY = event.clientY - rect.top;\n\n    // Override the cursor and store the press data.\n    let style = window.getComputedStyle(handle);\n    let override = Drag.overrideCursor(style.cursor!);\n    this._pressData = { handle, deltaX, deltaY, override };\n  }\n\n  /**\n   * Handle the `'mousemove'` event for the dock panel.\n   */\n  private _evtMouseMove(event: MouseEvent): void {\n    // Bail early if no drag is in progress.\n    if (!this._pressData) {\n      return;\n    }\n\n    // Stop the event when dragging a handle.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Compute the desired offset position for the handle.\n    let rect = this.node.getBoundingClientRect();\n    let xPos = event.clientX - rect.left - this._pressData.deltaX;\n    let yPos = event.clientY - rect.top - this._pressData.deltaY;\n\n    // Set the handle as close to the desired position as possible.\n    let layout = this.layout as DockLayout;\n    layout.moveHandle(this._pressData.handle, xPos, yPos);\n  }\n\n  /**\n   * Handle the `'mouseup'` event for the dock panel.\n   */\n  private _evtMouseUp(event: MouseEvent): void {\n    // Do nothing if the left mouse button is not released.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Stop the event when releasing a handle.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Finalize the mouse release.\n    this._releaseMouse();\n\n    // Schedule an emit of the layout modified signal.\n    MessageLoop.postMessage(this, Private.LayoutModified);\n  }\n\n  /**\n   * Release the mouse grab for the dock panel.\n   */\n  private _releaseMouse(): void {\n    // Bail early if no drag is in progress.\n    if (!this._pressData) {\n      return;\n    }\n\n    // Clear the override cursor.\n    this._pressData.override.dispose();\n    this._pressData = null;\n\n    // Remove the extra document listeners.\n    document.removeEventListener('keydown', this, true);\n    document.removeEventListener('mouseup', this, true);\n    document.removeEventListener('mousemove', this, true);\n    document.removeEventListener('contextmenu', this, true);\n  }\n\n  /**\n   * Show the overlay indicator at the given client position.\n   *\n   * Returns the drop zone at the specified client position.\n   *\n   * #### Notes\n   * If the position is not over a valid zone, the overlay is hidden.\n   */\n  private _showOverlay(clientX: number, clientY: number): Private.DropZone {\n    // Find the dock target for the given client position.\n    let { zone, target } = Private.findDropTarget(\n      this,\n      clientX,\n      clientY,\n      this._edges\n    );\n\n    // If the drop zone is invalid, hide the overlay and bail.\n    if (zone === 'invalid') {\n      this.overlay.hide(100);\n      return zone;\n    }\n\n    // Setup the variables needed to compute the overlay geometry.\n    let top: number;\n    let left: number;\n    let right: number;\n    let bottom: number;\n    let box = ElementExt.boxSizing(this.node); // TODO cache this?\n    let rect = this.node.getBoundingClientRect();\n\n    // Compute the overlay geometry based on the dock zone.\n    switch (zone) {\n    case 'root-all':\n      top = box.paddingTop;\n      left = box.paddingLeft;\n      right = box.paddingRight;\n      bottom = box.paddingBottom;\n      break;\n    case 'root-top':\n      top = box.paddingTop;\n      left = box.paddingLeft;\n      right = box.paddingRight;\n      bottom = rect.height * Private.GOLDEN_RATIO;\n      break;\n    case 'root-left':\n      top = box.paddingTop;\n      left = box.paddingLeft;\n      right = rect.width * Private.GOLDEN_RATIO;\n      bottom = box.paddingBottom;\n      break;\n    case 'root-right':\n      top = box.paddingTop;\n      left = rect.width * Private.GOLDEN_RATIO;\n      right = box.paddingRight;\n      bottom = box.paddingBottom;\n      break;\n    case 'root-bottom':\n      top = rect.height * Private.GOLDEN_RATIO;\n      left = box.paddingLeft;\n      right = box.paddingRight;\n      bottom = box.paddingBottom;\n      break;\n    case 'widget-all':\n      top = target!.top;\n      left = target!.left;\n      right = target!.right;\n      bottom = target!.bottom;\n      break;\n    case 'widget-top':\n      top = target!.top;\n      left = target!.left;\n      right = target!.right;\n      bottom = target!.bottom + target!.height / 2;\n      break;\n    case 'widget-left':\n      top = target!.top;\n      left = target!.left;\n      right = target!.right + target!.width / 2;\n      bottom = target!.bottom;\n      break;\n    case 'widget-right':\n      top = target!.top;\n      left = target!.left + target!.width / 2;\n      right = target!.right;\n      bottom = target!.bottom;\n      break;\n    case 'widget-bottom':\n      top = target!.top + target!.height / 2;\n      left = target!.left;\n      right = target!.right;\n      bottom = target!.bottom;\n      break;\n    case 'widget-tab':\n      const tabHeight = target!.tabBar.node.getBoundingClientRect().height;\n      top = target!.top;\n      left = target!.left;\n      right = target!.right;\n      bottom = target!.bottom + target!.height - tabHeight;\n      break;\n    default:\n      throw 'unreachable';\n    }\n\n    // Show the overlay with the computed geometry.\n    this.overlay.show({ top, left, right, bottom });\n\n    // Finally, return the computed drop zone.\n    return zone;\n  }\n\n  /**\n   * Create a new tab bar for use by the panel.\n   */\n  private _createTabBar(): TabBar<Widget> {\n    // Create the tab bar.\n    let tabBar = this._renderer.createTabBar();\n\n    // Set the generated tab bar property for the tab bar.\n    Private.isGeneratedTabBarProperty.set(tabBar, true);\n\n    // Hide the tab bar when in single document mode.\n    if (this._mode === 'single-document') {\n      tabBar.hide();\n    }\n\n    // Enforce necessary tab bar behavior.\n    // TODO do we really want to enforce *all* of these?\n    tabBar.tabsMovable = this._tabsMovable;\n    tabBar.allowDeselect = false;\n    tabBar.addButtonEnabled = this._addButtonEnabled;\n    tabBar.removeBehavior = 'select-previous-tab';\n    tabBar.insertBehavior = 'select-tab-if-needed';\n\n    // Connect the signal handlers for the tab bar.\n    tabBar.tabMoved.connect(this._onTabMoved, this);\n    tabBar.currentChanged.connect(this._onCurrentChanged, this);\n    tabBar.tabCloseRequested.connect(this._onTabCloseRequested, this);\n    tabBar.tabDetachRequested.connect(this._onTabDetachRequested, this);\n    tabBar.tabActivateRequested.connect(this._onTabActivateRequested, this);\n    tabBar.addRequested.connect(this._onTabAddRequested, this);\n\n    // Return the initialized tab bar.\n    return tabBar;\n  }\n\n  /**\n   * Create a new handle for use by the panel.\n   */\n  private _createHandle(): HTMLDivElement {\n    return this._renderer.createHandle();\n  }\n\n  /**\n   * Handle the `tabMoved` signal from a tab bar.\n   */\n  private _onTabMoved(): void {\n    MessageLoop.postMessage(this, Private.LayoutModified);\n  }\n\n  /**\n   * Handle the `currentChanged` signal from a tab bar.\n   */\n  private _onCurrentChanged(sender: TabBar<Widget>, args: TabBar.ICurrentChangedArgs<Widget>): void {\n    // Extract the previous and current title from the args.\n    let { previousTitle, currentTitle } = args;\n\n    // Hide the previous widget.\n    if (previousTitle) {\n      previousTitle.owner.hide();\n    }\n\n    // Show the current widget.\n    if (currentTitle) {\n      currentTitle.owner.show();\n    }\n\n    // Flush the message loop on IE and Edge to prevent flicker.\n    if (Platform.IS_EDGE || Platform.IS_IE) {\n      MessageLoop.flush();\n    }\n\n    // Schedule an emit of the layout modified signal.\n    MessageLoop.postMessage(this, Private.LayoutModified);\n  }\n\n  /**\n   * Handle the `addRequested` signal from a tab bar.\n   */\n  private _onTabAddRequested(sender: TabBar<Widget>): void {\n    this._addRequested.emit(sender);\n  }\n\n  /**\n   * Handle the `tabActivateRequested` signal from a tab bar.\n   */\n  private _onTabActivateRequested(sender: TabBar<Widget>, args: TabBar.ITabActivateRequestedArgs<Widget>): void {\n    args.title.owner.activate();\n  }\n\n  /**\n   * Handle the `tabCloseRequested` signal from a tab bar.\n   */\n  private _onTabCloseRequested(sender: TabBar<Widget>, args: TabBar.ITabCloseRequestedArgs<Widget>): void {\n    args.title.owner.close();\n  }\n\n  /**\n   * Handle the `tabDetachRequested` signal from a tab bar.\n   */\n  private _onTabDetachRequested(sender: TabBar<Widget>, args: TabBar.ITabDetachRequestedArgs<Widget>): void {\n    // Do nothing if a drag is already in progress.\n    if (this._drag) {\n      return;\n    }\n\n    // Release the tab bar's hold on the mouse.\n    sender.releaseMouse();\n\n    // Extract the data from the args.\n    let { title, tab, clientX, clientY } = args;\n\n    // Setup the mime data for the drag operation.\n    let mimeData = new MimeData();\n    let factory = () => title.owner;\n    mimeData.setData('application/vnd.lumino.widget-factory', factory);\n\n    // Create the drag image for the drag operation.\n    let dragImage = tab.cloneNode(true) as HTMLElement;\n\n    // Create the drag object to manage the drag-drop operation.\n    this._drag = new Drag({\n      mimeData, dragImage,\n      proposedAction: 'move',\n      supportedActions: 'move',\n      source: this\n    });\n\n    // Hide the tab node in the original tab.\n    tab.classList.add('lm-mod-hidden');\n    /* <DEPRECATED> */\n    tab.classList.add('p-mod-hidden');\n    /* </DEPRECATED> */;\n\n    // Create the cleanup callback.\n    let cleanup = (() => {\n      this._drag = null;\n      tab.classList.remove('lm-mod-hidden');\n      /* <DEPRECATED> */\n      tab.classList.remove('p-mod-hidden');\n      /* </DEPRECATED> */;\n    });\n\n    // Start the drag operation and cleanup when done.\n    this._drag.start(clientX, clientY).then(cleanup);\n  }\n\n  private _edges: DockPanel.IEdges;\n  private _mode: DockPanel.Mode;\n  private _drag: Drag | null = null;\n  private _renderer: DockPanel.IRenderer;\n  private _tabsMovable: boolean = true;\n  private _tabsConstrained: boolean = false;\n  private _addButtonEnabled: boolean = false;\n  private _pressData: Private.IPressData | null = null;\n  private _layoutModified = new Signal<this, void>(this);\n\n  private _addRequested = new Signal<this, TabBar<Widget>>(this);\n\n}\n\n\n/**\n * The namespace for the `DockPanel` class statics.\n */\nexport\nnamespace DockPanel {\n  /**\n   * An options object for creating a dock panel.\n   */\n  export\n  interface IOptions {\n    /**\n     * The overlay to use with the dock panel.\n     *\n     * The default is a new `Overlay` instance.\n     */\n    overlay?: IOverlay;\n\n    /**\n     * The renderer to use for the dock panel.\n     *\n     * The default is a shared renderer instance.\n     */\n    renderer?: IRenderer;\n\n    /**\n     * The spacing between the items in the panel.\n     *\n     * The default is `4`.\n     */\n    spacing?: number;\n\n    /**\n     * The mode for the dock panel.\n     *\n     * The default is `'multiple-document'`.\n     */\n    mode?: DockPanel.Mode;\n\n    /**\n     * The sizes of the edge drop zones, in pixels.\n     * If not given, default values will be used.\n     */\n    edges?: IEdges;\n\n    /**\n     * Allow tabs to be draggable / movable by user.\n     *\n     * The default is `'true'`.\n     */\n    tabsMovable?: boolean;\n\n    /**\n     * Constrain tabs to this dock panel\n     *\n     * The default is `'false'`.\n     */\n    tabsConstrained?: boolean;\n\n    /**\n     * Enable add buttons in each of the dock panel's tab bars.\n     *\n     * The default is `'false'`.\n     */\n    addButtonEnabled?: boolean;\n  }\n\n  /**\n   * The sizes of the edge drop zones, in pixels.\n   */\n  export interface IEdges {\n    /**\n     * The size of the top edge drop zone.\n     */\n    top: number;\n\n    /**\n     * The size of the right edge drop zone.\n     */\n    right: number;\n\n    /**\n     * The size of the bottom edge drop zone.\n     */\n    bottom: number;\n\n    /**\n     * The size of the left edge drop zone.\n     */\n    left: number;\n  };\n\n  /**\n   * A type alias for the supported dock panel modes.\n   */\n  export\n  type Mode = (\n    /**\n     * The single document mode.\n     *\n     * In this mode, only a single widget is visible at a time, and that\n     * widget fills the available layout space. No tab bars are visible.\n     */\n    'single-document' |\n\n    /**\n     * The multiple document mode.\n     *\n     * In this mode, multiple documents are displayed in separate tab\n     * areas, and those areas can be individually resized by the user.\n     */\n    'multiple-document'\n  );\n\n  /**\n   * A type alias for a layout configuration object.\n   */\n  export\n  type ILayoutConfig = DockLayout.ILayoutConfig;\n\n  /**\n   * A type alias for the supported insertion modes.\n   */\n  export\n  type InsertMode = DockLayout.InsertMode;\n\n  /**\n   * A type alias for the add widget options.\n   */\n  export\n  type IAddOptions = DockLayout.IAddOptions;\n\n  /**\n   * An object which holds the geometry for overlay positioning.\n   */\n  export\n  interface IOverlayGeometry {\n    /**\n     * The distance between the overlay and parent top edges.\n     */\n    top: number;\n\n    /**\n     * The distance between the overlay and parent left edges.\n     */\n    left: number;\n\n    /**\n     * The distance between the overlay and parent right edges.\n     */\n    right: number;\n\n    /**\n     * The distance between the overlay and parent bottom edges.\n     */\n    bottom: number;\n  }\n\n  /**\n   * An object which manages the overlay node for a dock panel.\n   */\n  export\n  interface IOverlay {\n    /**\n     * The DOM node for the overlay.\n     */\n    readonly node: HTMLDivElement;\n\n    /**\n     * Show the overlay using the given overlay geometry.\n     *\n     * @param geo - The desired geometry for the overlay.\n     *\n     * #### Notes\n     * The given geometry values assume the node will use absolute\n     * positioning.\n     *\n     * This is called on every mouse move event during a drag in order\n     * to update the position of the overlay. It should be efficient.\n     */\n    show(geo: IOverlayGeometry): void;\n\n    /**\n     * Hide the overlay node.\n     *\n     * @param delay - The delay (in ms) before hiding the overlay.\n     *   A delay value <= 0 should hide the overlay immediately.\n     *\n     * #### Notes\n     * This is called whenever the overlay node should been hidden.\n     */\n    hide(delay: number): void;\n  }\n\n  /**\n   * A concrete implementation of `IOverlay`.\n   *\n   * This is the default overlay implementation for a dock panel.\n   */\n  export\n  class Overlay implements IOverlay {\n    /**\n     * Construct a new overlay.\n     */\n    constructor() {\n      this.node = document.createElement('div');\n      this.node.classList.add('lm-DockPanel-overlay');\n      this.node.classList.add('lm-mod-hidden');\n      /* <DEPRECATED> */\n      this.node.classList.add('p-DockPanel-overlay');\n      this.node.classList.add('p-mod-hidden');\n      /* </DEPRECATED> */;\n      this.node.style.position = 'absolute';\n    }\n\n    /**\n     * The DOM node for the overlay.\n     */\n    readonly node: HTMLDivElement;\n\n    /**\n     * Show the overlay using the given overlay geometry.\n     *\n     * @param geo - The desired geometry for the overlay.\n     */\n    show(geo: IOverlayGeometry): void {\n      // Update the position of the overlay.\n      let style = this.node.style;\n      style.top = `${geo.top}px`;\n      style.left = `${geo.left}px`;\n      style.right = `${geo.right}px`;\n      style.bottom = `${geo.bottom}px`;\n\n      // Clear any pending hide timer.\n      clearTimeout(this._timer);\n      this._timer = -1;\n\n      // If the overlay is already visible, we're done.\n      if (!this._hidden) {\n        return;\n      }\n\n      // Clear the hidden flag.\n      this._hidden = false;\n\n      // Finally, show the overlay.\n      this.node.classList.remove('lm-mod-hidden');\n      /* <DEPRECATED> */\n      this.node.classList.remove('p-mod-hidden');\n      /* </DEPRECATED> */;\n    }\n\n    /**\n     * Hide the overlay node.\n     *\n     * @param delay - The delay (in ms) before hiding the overlay.\n     *   A delay value <= 0 will hide the overlay immediately.\n     */\n    hide(delay: number): void {\n      // Do nothing if the overlay is already hidden.\n      if (this._hidden) {\n        return;\n      }\n\n      // Hide immediately if the delay is <= 0.\n      if (delay <= 0) {\n        clearTimeout(this._timer);\n        this._timer = -1;\n        this._hidden = true;\n        this.node.classList.add('lm-mod-hidden');\n        /* <DEPRECATED> */\n        this.node.classList.add('p-mod-hidden');\n        /* </DEPRECATED> */;\n        return;\n      }\n\n      // Do nothing if a hide is already pending.\n      if (this._timer !== -1) {\n        return;\n      }\n\n      // Otherwise setup the hide timer.\n      this._timer = window.setTimeout(() => {\n        this._timer = -1;\n        this._hidden = true;\n        this.node.classList.add('lm-mod-hidden');\n        /* <DEPRECATED> */\n        this.node.classList.add('p-mod-hidden');\n        /* </DEPRECATED> */;\n      }, delay);\n    }\n\n    private _timer = -1;\n    private _hidden = true;\n  }\n\n  /**\n   * A type alias for a dock panel renderer;\n   */\n  export\n  type IRenderer = DockLayout.IRenderer;\n\n  /**\n   * The default implementation of `IRenderer`.\n   */\n  export\n  class Renderer implements IRenderer {\n    /**\n     * Create a new tab bar for use with a dock panel.\n     *\n     * @returns A new tab bar for a dock panel.\n     */\n    createTabBar(): TabBar<Widget> {\n      let bar = new TabBar<Widget>();\n      bar.addClass('lm-DockPanel-tabBar');\n      /* <DEPRECATED> */\n      bar.addClass('p-DockPanel-tabBar');\n      /* </DEPRECATED> */\n      return bar;\n    }\n\n    /**\n     * Create a new handle node for use with a dock panel.\n     *\n     * @returns A new handle node for a dock panel.\n     */\n    createHandle(): HTMLDivElement {\n      let handle = document.createElement('div');\n      handle.className = 'lm-DockPanel-handle';\n      /* <DEPRECATED> */\n      handle.classList.add('p-DockPanel-handle');\n      /* </DEPRECATED> */;\n      return handle;\n    }\n  }\n\n  /**\n   * The default `Renderer` instance.\n   */\n  export\n  const defaultRenderer = new Renderer();\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A fraction used for sizing root panels; ~= `1 / golden_ratio`.\n   */\n  export\n  const GOLDEN_RATIO = 0.618;\n\n  /**\n   * The default sizes for the edge drop zones, in pixels.\n   */\n  export const DEFAULT_EDGES = {\n    /**\n     * The size of the top edge dock zone for the root panel, in pixels.\n     * This is different from the others to distinguish between the top\n     * tab bar and the top root zone.\n     */\n    top: 12,\n\n    /**\n     * The size of the edge dock zone for the root panel, in pixels.\n     */\n    right: 40,\n\n    /**\n     * The size of the edge dock zone for the root panel, in pixels.\n     */\n    bottom: 40,\n\n    /**\n     * The size of the edge dock zone for the root panel, in pixels.\n     */\n    left: 40\n  };\n\n  /**\n   * A singleton `'layout-modified'` conflatable message.\n   */\n  export\n  const LayoutModified = new ConflatableMessage('layout-modified');\n\n  /**\n   * An object which holds mouse press data.\n   */\n  export\n  interface IPressData {\n    /**\n     * The handle which was pressed.\n     */\n    handle: HTMLDivElement;\n\n    /**\n     * The X offset of the press in handle coordinates.\n     */\n    deltaX: number;\n\n    /**\n     * The Y offset of the press in handle coordinates.\n     */\n    deltaY: number;\n\n    /**\n     * The disposable which will clear the override cursor.\n     */\n    override: IDisposable;\n  }\n\n  /**\n   * A type alias for a drop zone.\n   */\n  export\n  type DropZone = (\n    /**\n     * An invalid drop zone.\n     */\n    'invalid' |\n\n    /**\n     * The entirety of the root dock area.\n     */\n    'root-all' |\n\n    /**\n     * The top portion of the root dock area.\n     */\n    'root-top' |\n\n    /**\n     * The left portion of the root dock area.\n     */\n    'root-left' |\n\n    /**\n     * The right portion of the root dock area.\n     */\n    'root-right' |\n\n    /**\n     * The bottom portion of the root dock area.\n     */\n    'root-bottom' |\n\n    /**\n     * The entirety of a tabbed widget area.\n     */\n    'widget-all' |\n\n    /**\n     * The top portion of tabbed widget area.\n     */\n    'widget-top' |\n\n    /**\n     * The left portion of tabbed widget area.\n     */\n    'widget-left' |\n\n    /**\n     * The right portion of tabbed widget area.\n     */\n    'widget-right' |\n\n    /**\n     * The bottom portion of tabbed widget area.\n     */\n    'widget-bottom' |\n\n    /**\n     * The the bar of a tabbed widget area.\n     */\n    'widget-tab'\n  );\n\n  /**\n   * An object which holds the drop target zone and widget.\n   */\n  export\n  interface IDropTarget {\n    /**\n     * The semantic zone for the mouse position.\n     */\n    zone: DropZone;\n\n    /**\n     * The tab area geometry for the drop zone, or `null`.\n     */\n    target: DockLayout.ITabAreaGeometry | null;\n  }\n\n  /**\n   * An attached property used to track generated tab bars.\n   */\n  export\n  const isGeneratedTabBarProperty = new AttachedProperty<Widget, boolean>({\n    name: 'isGeneratedTabBar',\n    create: () => false\n  });\n\n  /**\n   * Create a single document config for the widgets in a dock panel.\n   */\n  export\n  function createSingleDocumentConfig(panel: DockPanel): DockPanel.ILayoutConfig {\n    // Return an empty config if the panel is empty.\n    if (panel.isEmpty) {\n      return { main: null };\n    }\n\n    // Get a flat array of the widgets in the panel.\n    let widgets = toArray(panel.widgets());\n\n    // Get the first selected widget in the panel.\n    let selected = panel.selectedWidgets().next();\n\n    // Compute the current index for the new config.\n    let currentIndex = selected ? widgets.indexOf(selected) : -1;\n\n    // Return the single document config.\n    return { main: { type: 'tab-area', widgets, currentIndex } };\n  }\n\n  /**\n   * Find the drop target at the given client position.\n   */\n  export\n  function findDropTarget(\n    panel: DockPanel,\n    clientX: number,\n    clientY: number,\n    edges: DockPanel.IEdges\n  ): IDropTarget {\n    // Bail if the mouse is not over the dock panel.\n    if (!ElementExt.hitTest(panel.node, clientX, clientY)) {\n      return { zone: 'invalid', target: null };\n    }\n\n    // Look up the layout for the panel.\n    let layout = panel.layout as DockLayout;\n\n    // If the layout is empty, indicate the entire root drop zone.\n    if (layout.isEmpty) {\n      return { zone: 'root-all', target: null };\n    }\n\n    // Test the edge zones when in multiple document mode.\n    if (panel.mode === 'multiple-document') {\n      // Get the client rect for the dock panel.\n      let panelRect = panel.node.getBoundingClientRect();\n\n      // Compute the distance to each edge of the panel.\n      let pl = clientX - panelRect.left + 1;\n      let pt = clientY - panelRect.top + 1;\n      let pr = panelRect.right - clientX;\n      let pb = panelRect.bottom - clientY;\n\n      // Find the minimum distance to an edge.\n      let pd = Math.min(pt, pr, pb, pl);\n\n      // Return a root zone if the mouse is within an edge.\n      switch (pd) {\n        case pt:\n          if (pt < edges.top) {\n            return { zone: 'root-top', target: null };\n          }\n          break;\n        case pr:\n          if (pr < edges.right) {\n            return { zone: 'root-right', target: null };\n          }\n          break;\n        case pb:\n          if (pb < edges.bottom) {\n            return { zone: 'root-bottom', target: null };\n          }\n          break;\n        case pl:\n          if (pl < edges.left) {\n            return { zone: 'root-left', target: null };\n          }\n          break;\n        default:\n          throw 'unreachable';\n      }\n    }\n\n    // Hit test the dock layout at the given client position.\n    let target = layout.hitTestTabAreas(clientX, clientY);\n\n    // Bail if no target area was found.\n    if (!target) {\n      return { zone: 'invalid', target: null };\n    }\n\n    // Return the whole tab area when in single document mode.\n    if (panel.mode === 'single-document') {\n      return { zone: 'widget-all', target };\n    }\n\n    // Compute the distance to each edge of the tab area.\n    let al = target.x - target.left + 1;\n    let at = target.y - target.top + 1;\n    let ar = target.left + target.width - target.x;\n    let ab = target.top + target.height - target.y;\n\n    const tabHeight = target.tabBar.node.getBoundingClientRect().height;\n    if (at < tabHeight) {\n      return { zone: 'widget-tab', target };\n    }\n\n    // Get the X and Y edge sizes for the area.\n    let rx = Math.round(target.width / 3);\n    let ry = Math.round(target.height / 3);\n\n    // If the mouse is not within an edge, indicate the entire area.\n    if (al > rx && ar > rx && at > ry && ab > ry) {\n      return { zone: 'widget-all', target };\n    }\n\n    // Scale the distances by the slenderness ratio.\n    al /= rx;\n    at /= ry;\n    ar /= rx;\n    ab /= ry;\n\n    // Find the minimum distance to the area edge.\n    let ad = Math.min(al, at, ar, ab);\n\n    // Find the widget zone for the area edge.\n    let zone: DropZone;\n    switch (ad) {\n    case al:\n      zone = 'widget-left';\n      break;\n    case at:\n      zone = 'widget-top';\n      break;\n    case ar:\n      zone = 'widget-right';\n      break;\n    case ab:\n      zone = 'widget-bottom';\n      break;\n    default:\n      throw 'unreachable';\n    }\n\n    // Return the final drop target.\n    return { zone, target };\n  }\n\n  /**\n   * Get the drop reference widget for a tab bar.\n   */\n  export\n  function getDropRef(tabBar: TabBar<Widget>): Widget | null {\n    if (tabBar.titles.length === 0) {\n      return null;\n    }\n    if (tabBar.currentTitle) {\n      return tabBar.currentTitle.owner;\n    }\n    return tabBar.titles[tabBar.titles.length - 1].owner;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, IIterator, each, map\n} from '@lumino/algorithm';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  AttachedProperty\n} from '@lumino/properties';\n\nimport {\n  BoxEngine, BoxSizer\n} from './boxengine';\n\nimport {\n Layout, LayoutItem\n} from './layout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A layout which arranges its widgets in a grid.\n */\nexport\nclass GridLayout extends Layout {\n  /**\n   * Construct a new grid layout.\n   *\n   * @param options - The options for initializing the layout.\n   */\n  constructor(options: GridLayout.IOptions = {}) {\n    super(options);\n    if (options.rowCount !== undefined) {\n      Private.reallocSizers(this._rowSizers, options.rowCount);\n    }\n    if (options.columnCount !== undefined) {\n      Private.reallocSizers(this._columnSizers, options.columnCount);\n    }\n    if (options.rowSpacing !== undefined) {\n      this._rowSpacing = Private.clampValue(options.rowSpacing);\n    }\n    if (options.columnSpacing !== undefined) {\n      this._columnSpacing = Private.clampValue(options.columnSpacing);\n    }\n  }\n\n  /**\n   * Dispose of the resources held by the layout.\n   */\n  dispose(): void {\n    // Dispose of the widgets and layout items.\n    each(this._items, item => {\n      let widget = item.widget;\n      item.dispose();\n      widget.dispose();\n    });\n\n    // Clear the layout state.\n    this._box = null;\n    this._items.length = 0;\n    this._rowStarts.length = 0;\n    this._rowSizers.length = 0;\n    this._columnStarts.length = 0;\n    this._columnSizers.length = 0;\n\n    // Dispose of the rest of the layout.\n    super.dispose();\n  }\n\n  /**\n   * Get the number of rows in the layout.\n   */\n  get rowCount(): number {\n    return this._rowSizers.length;\n  }\n\n  /**\n   * Set the number of rows in the layout.\n   *\n   * #### Notes\n   * The minimum row count is `1`.\n   */\n  set rowCount(value: number) {\n    // Do nothing if the row count does not change.\n    if (value === this.rowCount) {\n      return;\n    }\n\n    // Reallocate the row sizers.\n    Private.reallocSizers(this._rowSizers, value);\n\n    // Schedule a fit of the parent.\n    if (this.parent) {\n      this.parent.fit();\n    }\n  }\n\n  /**\n   * Get the number of columns in the layout.\n   */\n  get columnCount(): number {\n    return this._columnSizers.length;\n  }\n\n  /**\n   * Set the number of columns in the layout.\n   *\n   * #### Notes\n   * The minimum column count is `1`.\n   */\n  set columnCount(value: number) {\n    // Do nothing if the column count does not change.\n    if (value === this.columnCount) {\n      return;\n    }\n\n    // Reallocate the column sizers.\n    Private.reallocSizers(this._columnSizers, value);\n\n    // Schedule a fit of the parent.\n    if (this.parent) {\n      this.parent.fit();\n    }\n  }\n\n  /**\n   * Get the row spacing for the layout.\n   */\n  get rowSpacing(): number {\n    return this._rowSpacing;\n  }\n\n  /**\n   * Set the row spacing for the layout.\n   */\n  set rowSpacing(value: number) {\n    // Clamp the spacing to the allowed range.\n    value = Private.clampValue(value);\n\n    // Bail if the spacing does not change\n    if (this._rowSpacing === value) {\n      return;\n    }\n\n    // Update the internal spacing.\n    this._rowSpacing = value;\n\n    // Schedule a fit of the parent.\n    if (this.parent) {\n      this.parent.fit();\n    }\n  }\n\n  /**\n   * Get the column spacing for the layout.\n   */\n  get columnSpacing(): number {\n    return this._columnSpacing;\n  }\n\n  /**\n   * Set the col spacing for the layout.\n   */\n  set columnSpacing(value: number) {\n    // Clamp the spacing to the allowed range.\n    value = Private.clampValue(value);\n\n    // Bail if the spacing does not change\n    if (this._columnSpacing === value) {\n      return;\n    }\n\n    // Update the internal spacing.\n    this._columnSpacing = value;\n\n    // Schedule a fit of the parent.\n    if (this.parent) {\n      this.parent.fit();\n    }\n  }\n\n  /**\n   * Get the stretch factor for a specific row.\n   *\n   * @param index - The row index of interest.\n   *\n   * @returns The stretch factor for the row.\n   *\n   * #### Notes\n   * This returns `-1` if the index is out of range.\n   */\n  rowStretch(index: number): number {\n    let sizer = this._rowSizers[index];\n    return sizer ? sizer.stretch : -1;\n  }\n\n  /**\n   * Set the stretch factor for a specific row.\n   *\n   * @param index - The row index of interest.\n   *\n   * @param value - The stretch factor for the row.\n   *\n   * #### Notes\n   * This is a no-op if the index is out of range.\n   */\n  setRowStretch(index: number, value: number): void {\n    // Look up the row sizer.\n    let sizer = this._rowSizers[index];\n\n    // Bail if the index is out of range.\n    if (!sizer) {\n      return;\n    }\n\n    // Clamp the value to the allowed range.\n    value = Private.clampValue(value);\n\n    // Bail if the stretch does not change.\n    if (sizer.stretch === value) {\n      return;\n    }\n\n    // Update the sizer stretch.\n    sizer.stretch = value;\n\n    // Schedule an update of the parent.\n    if (this.parent) {\n      this.parent.update();\n    }\n  }\n\n  /**\n   * Get the stretch factor for a specific column.\n   *\n   * @param index - The column index of interest.\n   *\n   * @returns The stretch factor for the column.\n   *\n   * #### Notes\n   * This returns `-1` if the index is out of range.\n   */\n  columnStretch(index: number): number {\n    let sizer = this._columnSizers[index];\n    return sizer ? sizer.stretch : -1;\n  }\n\n  /**\n   * Set the stretch factor for a specific column.\n   *\n   * @param index - The column index of interest.\n   *\n   * @param value - The stretch factor for the column.\n   *\n   * #### Notes\n   * This is a no-op if the index is out of range.\n   */\n  setColumnStretch(index: number, value: number): void {\n    // Look up the column sizer.\n    let sizer = this._columnSizers[index];\n\n    // Bail if the index is out of range.\n    if (!sizer) {\n      return;\n    }\n\n    // Clamp the value to the allowed range.\n    value = Private.clampValue(value);\n\n    // Bail if the stretch does not change.\n    if (sizer.stretch === value) {\n      return;\n    }\n\n    // Update the sizer stretch.\n    sizer.stretch = value;\n\n    // Schedule an update of the parent.\n    if (this.parent) {\n      this.parent.update();\n    }\n  }\n\n  /**\n   * Create an iterator over the widgets in the layout.\n   *\n   * @returns A new iterator over the widgets in the layout.\n   */\n  iter(): IIterator<Widget> {\n    return map(this._items, item => item.widget);\n  }\n\n  /**\n   * Add a widget to the grid layout.\n   *\n   * @param widget - The widget to add to the layout.\n   *\n   * #### Notes\n   * If the widget is already contained in the layout, this is no-op.\n   */\n  addWidget(widget: Widget): void {\n    // Look up the index for the widget.\n    let i = ArrayExt.findFirstIndex(this._items, it => it.widget === widget);\n\n    // Bail if the widget is already in the layout.\n    if (i !== -1) {\n      return;\n    }\n\n    // Add the widget to the layout.\n    this._items.push(new LayoutItem(widget));\n\n    // Attach the widget to the parent.\n    if (this.parent) {\n      this.attachWidget(widget);\n    }\n  }\n\n  /**\n   * Remove a widget from the grid layout.\n   *\n   * @param widget - The widget to remove from the layout.\n   *\n   * #### Notes\n   * A widget is automatically removed from the layout when its `parent`\n   * is set to `null`. This method should only be invoked directly when\n   * removing a widget from a layout which has yet to be installed on a\n   * parent widget.\n   *\n   * This method does *not* modify the widget's `parent`.\n   */\n  removeWidget(widget: Widget): void {\n    // Look up the index for the widget.\n    let i = ArrayExt.findFirstIndex(this._items, it => it.widget === widget);\n\n    // Bail if the widget is not in the layout.\n    if (i === -1) {\n      return;\n    }\n\n    // Remove the widget from the layout.\n    let item = ArrayExt.removeAt(this._items, i)!;\n\n    // Detach the widget from the parent.\n    if (this.parent) {\n      this.detachWidget(widget);\n    }\n\n    // Dispose the layout item.\n    item.dispose();\n  }\n\n  /**\n   * Perform layout initialization which requires the parent widget.\n   */\n  protected init(): void {\n    super.init();\n    each(this, widget => { this.attachWidget(widget); });\n  }\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param widget - The widget to attach to the parent.\n   */\n  protected attachWidget(widget: Widget): void {\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Add the widget's node to the parent.\n    this.parent!.node.appendChild(widget.node);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param widget - The widget to detach from the parent.\n   */\n  protected detachWidget(widget: Widget): void {\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget's node from the parent.\n    this.parent!.node.removeChild(widget.node);\n\n    // Send an `'after-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   */\n  protected onBeforeShow(msg: Message): void {\n    super.onBeforeShow(msg);\n    this.parent!.update();\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    super.onBeforeAttach(msg);\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-shown'` message.\n   */\n  protected onChildShown(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-hidden'` message.\n   */\n  protected onChildHidden(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    if (this.parent!.isVisible) {\n      this._update(msg.width, msg.height);\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    if (this.parent!.isVisible) {\n      this._update(-1, -1);\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   */\n  protected onFitRequest(msg: Message): void {\n    if (this.parent!.isAttached) {\n      this._fit();\n    }\n  }\n\n  /**\n   * Fit the layout to the total size required by the widgets.\n   */\n  private _fit(): void {\n    // Reset the min sizes of the sizers.\n    for (let i = 0, n = this.rowCount; i < n; ++i) {\n      this._rowSizers[i].minSize = 0;\n    }\n    for (let i = 0, n = this.columnCount; i < n; ++i) {\n      this._columnSizers[i].minSize = 0;\n    }\n\n    // Filter for the visible layout items.\n    let items = this._items.filter(it => !it.isHidden);\n\n    // Fit the layout items.\n    for (let i = 0, n = items.length; i < n; ++i) {\n      items[i].fit();\n    }\n\n    // Get the max row and column index.\n    let maxRow = this.rowCount - 1;\n    let maxCol = this.columnCount - 1;\n\n    // Sort the items by row span.\n    items.sort(Private.rowSpanCmp);\n\n    // Update the min sizes of the row sizers.\n    for (let i = 0, n = items.length; i < n; ++i) {\n      // Fetch the item.\n      let item = items[i];\n\n      // Get the row bounds for the item.\n      let config = GridLayout.getCellConfig(item.widget);\n      let r1 = Math.min(config.row, maxRow);\n      let r2 = Math.min(config.row + config.rowSpan - 1, maxRow);\n\n      // Distribute the minimum height to the sizers as needed.\n      Private.distributeMin(this._rowSizers, r1, r2, item.minHeight);\n    }\n\n    // Sort the items by column span.\n    items.sort(Private.columnSpanCmp);\n\n    // Update the min sizes of the column sizers.\n    for (let i = 0, n = items.length; i < n; ++i) {\n      // Fetch the item.\n      let item = items[i];\n\n      // Get the column bounds for the item.\n      let config = GridLayout.getCellConfig(item.widget);\n      let c1 = Math.min(config.column, maxCol);\n      let c2 = Math.min(config.column + config.columnSpan - 1, maxCol);\n\n      // Distribute the minimum width to the sizers as needed.\n      Private.distributeMin(this._columnSizers, c1, c2, item.minWidth);\n    }\n\n    // If no size constraint is needed, just update the parent.\n    if (this.fitPolicy === 'set-no-constraint') {\n      MessageLoop.sendMessage(this.parent!, Widget.Msg.UpdateRequest);\n      return;\n    }\n\n    // Set up the computed min size.\n    let minH = maxRow * this._rowSpacing;\n    let minW = maxCol * this._columnSpacing;\n\n    // Add the sizer minimums to the computed min size.\n    for (let i = 0, n = this.rowCount; i < n; ++i) {\n      minH += this._rowSizers[i].minSize;\n    }\n    for (let i = 0, n = this.columnCount; i < n; ++i) {\n      minW += this._columnSizers[i].minSize;\n    }\n\n    // Update the box sizing and add it to the computed min size.\n    let box = this._box = ElementExt.boxSizing(this.parent!.node);\n    minW += box.horizontalSum;\n    minH += box.verticalSum;\n\n    // Update the parent's min size constraints.\n    let style = this.parent!.node.style;\n    style.minWidth = `${minW}px`;\n    style.minHeight = `${minH}px`;\n\n    // Set the dirty flag to ensure only a single update occurs.\n    this._dirty = true;\n\n    // Notify the ancestor that it should fit immediately. This may\n    // cause a resize of the parent, fulfilling the required update.\n    if (this.parent!.parent) {\n      MessageLoop.sendMessage(this.parent!.parent!, Widget.Msg.FitRequest);\n    }\n\n    // If the dirty flag is still set, the parent was not resized.\n    // Trigger the required update on the parent widget immediately.\n    if (this._dirty) {\n      MessageLoop.sendMessage(this.parent!, Widget.Msg.UpdateRequest);\n    }\n  }\n\n  /**\n   * Update the layout position and size of the widgets.\n   *\n   * The parent offset dimensions should be `-1` if unknown.\n   */\n  private _update(offsetWidth: number, offsetHeight: number): void {\n    // Clear the dirty flag to indicate the update occurred.\n    this._dirty = false;\n\n    // Measure the parent if the offset dimensions are unknown.\n    if (offsetWidth < 0) {\n      offsetWidth = this.parent!.node.offsetWidth;\n    }\n    if (offsetHeight < 0) {\n      offsetHeight = this.parent!.node.offsetHeight;\n    }\n\n    // Ensure the parent box sizing data is computed.\n    if (!this._box) {\n      this._box = ElementExt.boxSizing(this.parent!.node);\n    }\n\n    // Compute the layout area adjusted for border and padding.\n    let top = this._box.paddingTop;\n    let left = this._box.paddingLeft;\n    let width = offsetWidth - this._box.horizontalSum;\n    let height = offsetHeight - this._box.verticalSum;\n\n    // Get the max row and column index.\n    let maxRow = this.rowCount - 1;\n    let maxCol = this.columnCount - 1;\n\n    // Compute the total fixed row and column space.\n    let fixedRowSpace = maxRow * this._rowSpacing;\n    let fixedColSpace = maxCol * this._columnSpacing;\n\n    // Distribute the available space to the box sizers.\n    BoxEngine.calc(this._rowSizers, Math.max(0, height - fixedRowSpace));\n    BoxEngine.calc(this._columnSizers, Math.max(0, width - fixedColSpace));\n\n    // Update the row start positions.\n    for (let i = 0, pos = top, n = this.rowCount; i < n; ++i) {\n      this._rowStarts[i] = pos;\n      pos += this._rowSizers[i].size + this._rowSpacing;\n    }\n\n    // Update the column start positions.\n    for (let i = 0, pos = left, n = this.columnCount; i < n; ++i) {\n      this._columnStarts[i] = pos;\n      pos += this._columnSizers[i].size + this._columnSpacing;\n    }\n\n    // Update the geometry of the layout items.\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      // Fetch the item.\n      let item = this._items[i];\n\n      // Ignore hidden items.\n      if (item.isHidden) {\n        continue;\n      }\n\n      // Fetch the cell bounds for the widget.\n      let config = GridLayout.getCellConfig(item.widget);\n      let r1 = Math.min(config.row, maxRow);\n      let c1 = Math.min(config.column, maxCol);\n      let r2 = Math.min(config.row + config.rowSpan - 1, maxRow);\n      let c2 = Math.min(config.column + config.columnSpan - 1, maxCol);\n\n      // Compute the cell geometry.\n      let x = this._columnStarts[c1];\n      let y = this._rowStarts[r1];\n      let w = this._columnStarts[c2] + this._columnSizers[c2].size - x;\n      let h = this._rowStarts[r2] + this._rowSizers[r2].size - y;\n\n      // Update the geometry of the layout item.\n      item.update(x, y, w, h);\n    }\n  }\n\n  private _dirty = false;\n  private _rowSpacing = 4;\n  private _columnSpacing = 4;\n  private _items: LayoutItem[] = [];\n  private _rowStarts: number[] = [];\n  private _columnStarts: number[] = [];\n  private _rowSizers: BoxSizer[] = [new BoxSizer()];\n  private _columnSizers: BoxSizer[] = [new BoxSizer()];\n  private _box: ElementExt.IBoxSizing | null = null;\n}\n\n\n/**\n * The namespace for the `GridLayout` class statics.\n */\nexport\nnamespace GridLayout {\n  /**\n   * An options object for initializing a grid layout.\n   */\n  export\n  interface IOptions extends Layout.IOptions {\n    /**\n     * The initial row count for the layout.\n     *\n     * The default is `1`.\n     */\n    rowCount?: number;\n\n    /**\n     * The initial column count for the layout.\n     *\n     * The default is `1`.\n     */\n    columnCount?: number;\n\n    /**\n     * The spacing between rows in the layout.\n     *\n     * The default is `4`.\n     */\n    rowSpacing?: number;\n\n    /**\n     * The spacing between columns in the layout.\n     *\n     * The default is `4`.\n     */\n    columnSpacing?: number;\n  }\n\n  /**\n   * An object which holds the cell configuration for a widget.\n   */\n  export\n  interface ICellConfig {\n    /**\n     * The row index for the widget.\n     */\n    readonly row: number;\n\n    /**\n     * The column index for the widget.\n     */\n    readonly column: number;\n\n    /**\n     * The row span for the widget.\n     */\n    readonly rowSpan: number;\n\n    /**\n     * The column span for the widget.\n     */\n    readonly columnSpan: number;\n  }\n\n  /**\n   * Get the cell config for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The cell config for the widget.\n   */\n  export\n  function getCellConfig(widget: Widget): ICellConfig {\n    return Private.cellConfigProperty.get(widget);\n  }\n\n  /**\n   * Set the cell config for the given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @param value - The value for the cell config.\n   */\n  export\n  function setCellConfig(widget: Widget, value: Partial<ICellConfig>): void {\n    Private.cellConfigProperty.set(widget, Private.normalizeConfig(value));\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The property descriptor for the widget cell config.\n   */\n  export\n  const cellConfigProperty = new AttachedProperty<Widget, GridLayout.ICellConfig>({\n    name: 'cellConfig',\n    create: () => ({ row: 0, column: 0, rowSpan: 1, columnSpan: 1 }),\n    changed: onChildCellConfigChanged\n  });\n\n  /**\n   * Normalize a partial cell config object.\n   */\n  export\n  function normalizeConfig(config: Partial<GridLayout.ICellConfig>): GridLayout.ICellConfig {\n    let row = Math.max(0, Math.floor(config.row || 0));\n    let column = Math.max(0, Math.floor(config.column || 0));\n    let rowSpan = Math.max(1, Math.floor(config.rowSpan || 0));\n    let columnSpan = Math.max(1, Math.floor(config.columnSpan || 0));\n    return { row, column, rowSpan, columnSpan };\n  }\n\n  /**\n   * Clamp a value to an integer >= 0.\n   */\n  export\n  function clampValue(value: number): number {\n    return Math.max(0, Math.floor(value));\n  }\n\n  /**\n   * A sort comparison function for row spans.\n   */\n  export\n  function rowSpanCmp(a: LayoutItem, b: LayoutItem): number {\n    let c1 = cellConfigProperty.get(a.widget);\n    let c2 = cellConfigProperty.get(b.widget);\n    return c1.rowSpan - c2.rowSpan;\n  }\n\n  /**\n   * A sort comparison function for column spans.\n   */\n  export\n  function columnSpanCmp(a: LayoutItem, b: LayoutItem): number {\n    let c1 = cellConfigProperty.get(a.widget);\n    let c2 = cellConfigProperty.get(b.widget);\n    return c1.columnSpan - c2.columnSpan;\n  }\n\n  /**\n   * Reallocate the box sizers for the given grid dimensions.\n   */\n  export\n  function reallocSizers(sizers: BoxSizer[], count: number): void {\n    // Coerce the count to the valid range.\n    count = Math.max(1, Math.floor(count));\n\n    // Add the missing sizers.\n    while (sizers.length < count) {\n      sizers.push(new BoxSizer());\n    }\n\n    // Remove the extra sizers.\n    if (sizers.length > count) {\n      sizers.length = count;\n    }\n  }\n\n  /**\n   * Distribute a min size constraint across a range of sizers.\n   */\n  export\n  function distributeMin(sizers: BoxSizer[], i1: number, i2: number, minSize: number): void {\n    // Sanity check the indices.\n    if (i2 < i1) {\n      return;\n    }\n\n    // Handle the simple case of no cell span.\n    if (i1 === i2) {\n      let sizer = sizers[i1];\n      sizer.minSize = Math.max(sizer.minSize, minSize);\n      return;\n    }\n\n    // Compute the total current min size of the span.\n    let totalMin = 0;\n    for (let i = i1; i <= i2; ++i) {\n      totalMin += sizers[i].minSize;\n    }\n\n    // Do nothing if the total is greater than the required.\n    if (totalMin >= minSize) {\n      return;\n    }\n\n    // Compute the portion of the space to allocate to each sizer.\n    let portion = (minSize - totalMin) / (i2 - i1 + 1);\n\n    // Add the portion to each sizer.\n    for (let i = i1; i <= i2; ++i) {\n      sizers[i].minSize += portion;\n    }\n  }\n\n  /**\n   * The change handler for the child cell config property.\n   */\n  function onChildCellConfigChanged(child: Widget): void {\n    if (child.parent && child.parent.layout instanceof GridLayout) {\n      child.parent.fit();\n    }\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt\n} from '@lumino/algorithm';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  getKeyboardLayout\n} from '@lumino/keyboard';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  ElementARIAAttrs, ElementDataset, VirtualDOM, VirtualElement, h\n} from '@lumino/virtualdom';\n\nimport {\n  Menu\n} from './menu';\n\nimport {\n  Title\n} from './title';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A widget which displays menus as a canonical menu bar.\n */\nexport\nclass MenuBar extends Widget {\n  /**\n   * Construct a new menu bar.\n   *\n   * @param options - The options for initializing the menu bar.\n   */\n  constructor(options: MenuBar.IOptions = {}) {\n    super({ node: Private.createNode() });\n    this.addClass('lm-MenuBar');\n    /* <DEPRECATED> */\n    this.addClass('p-MenuBar');\n    /* </DEPRECATED> */\n    this.setFlag(Widget.Flag.DisallowLayout);\n    this.renderer = options.renderer || MenuBar.defaultRenderer;\n    this._forceItemsPosition = options.forceItemsPosition || { forceX: true, forceY: true };\n  }\n\n  /**\n   * Dispose of the resources held by the widget.\n   */\n  dispose(): void {\n    this._closeChildMenu();\n    this._menus.length = 0;\n    super.dispose();\n  }\n\n  /**\n   * The renderer used by the menu bar.\n   */\n  readonly renderer: MenuBar.IRenderer;\n\n  /**\n   * The child menu of the menu bar.\n   *\n   * #### Notes\n   * This will be `null` if the menu bar does not have an open menu.\n   */\n  get childMenu(): Menu | null {\n    return this._childMenu;\n  }\n\n  /**\n   * Get the menu bar content node.\n   *\n   * #### Notes\n   * This is the node which holds the menu title nodes.\n   *\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get contentNode(): HTMLUListElement {\n    return this.node.getElementsByClassName('lm-MenuBar-content')[0] as HTMLUListElement;\n  }\n\n  /**\n   * Get the currently active menu.\n   */\n  get activeMenu(): Menu | null {\n    return this._menus[this._activeIndex] || null;\n  }\n\n  /**\n   * Set the currently active menu.\n   *\n   * #### Notes\n   * If the menu does not exist, the menu will be set to `null`.\n   */\n  set activeMenu(value: Menu | null) {\n    this.activeIndex = value ? this._menus.indexOf(value) : -1;\n  }\n\n  /**\n   * Get the index of the currently active menu.\n   *\n   * #### Notes\n   * This will be `-1` if no menu is active.\n   */\n  get activeIndex(): number {\n    return this._activeIndex;\n  }\n\n  /**\n   * Set the index of the currently active menu.\n   *\n   * #### Notes\n   * If the menu cannot be activated, the index will be set to `-1`.\n   */\n  set activeIndex(value: number) {\n    // Adjust the value for an out of range index.\n    if (value < 0 || value >= this._menus.length) {\n      value = -1;\n    }\n\n    // Bail early if the index will not change.\n    if (this._activeIndex === value) {\n      return;\n    }\n\n    // Update the active index.\n    this._activeIndex = value;\n\n    // Update focus to new active index\n    if (this._activeIndex >= 0 && this.contentNode.childNodes[this._activeIndex]) {\n      (this.contentNode.childNodes[this._activeIndex] as HTMLElement).focus();\n    }\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * A read-only array of the menus in the menu bar.\n   */\n  get menus(): ReadonlyArray<Menu> {\n    return this._menus;\n  }\n\n  /**\n   * Open the active menu and activate its first menu item.\n   *\n   * #### Notes\n   * If there is no active menu, this is a no-op.\n   */\n  openActiveMenu(): void {\n    // Bail early if there is no active item.\n    if (this._activeIndex === -1) {\n      return;\n    }\n\n    // Open the child menu.\n    this._openChildMenu();\n\n    // Activate the first item in the child menu.\n    if (this._childMenu) {\n      this._childMenu.activeIndex = -1;\n      this._childMenu.activateNextItem();\n    }\n  }\n\n  /**\n   * Add a menu to the end of the menu bar.\n   *\n   * @param menu - The menu to add to the menu bar.\n   *\n   * #### Notes\n   * If the menu is already added to the menu bar, it will be moved.\n   */\n  addMenu(menu: Menu): void {\n    this.insertMenu(this._menus.length, menu);\n  }\n\n  /**\n   * Insert a menu into the menu bar at the specified index.\n   *\n   * @param index - The index at which to insert the menu.\n   *\n   * @param menu - The menu to insert into the menu bar.\n   *\n   * #### Notes\n   * The index will be clamped to the bounds of the menus.\n   *\n   * If the menu is already added to the menu bar, it will be moved.\n   */\n  insertMenu(index: number, menu: Menu): void {\n    // Close the child menu before making changes.\n    this._closeChildMenu();\n\n    // Look up the index of the menu.\n    let i = this._menus.indexOf(menu);\n\n    // Clamp the insert index to the array bounds.\n    let j = Math.max(0, Math.min(index, this._menus.length));\n\n    // If the menu is not in the array, insert it.\n    if (i === -1) {\n      // Insert the menu into the array.\n      ArrayExt.insert(this._menus, j, menu);\n\n      // Add the styling class to the menu.\n      menu.addClass('lm-MenuBar-menu');\n      /* <DEPRECATED> */\n      menu.addClass('p-MenuBar-menu');\n      /* </DEPRECATED> */\n\n      // Connect to the menu signals.\n      menu.aboutToClose.connect(this._onMenuAboutToClose, this);\n      menu.menuRequested.connect(this._onMenuMenuRequested, this);\n      menu.title.changed.connect(this._onTitleChanged, this);\n\n      // Schedule an update of the items.\n      this.update();\n\n      // There is nothing more to do.\n      return;\n    }\n\n    // Otherwise, the menu exists in the array and should be moved.\n\n    // Adjust the index if the location is at the end of the array.\n    if (j === this._menus.length) {\n      j--;\n    }\n\n    // Bail if there is no effective move.\n    if (i === j) {\n      return;\n    }\n\n    // Move the menu to the new locations.\n    ArrayExt.move(this._menus, i, j);\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * Remove a menu from the menu bar.\n   *\n   * @param menu - The menu to remove from the menu bar.\n   *\n   * #### Notes\n   * This is a no-op if the menu is not in the menu bar.\n   */\n  removeMenu(menu: Menu): void {\n    this.removeMenuAt(this._menus.indexOf(menu));\n  }\n\n  /**\n   * Remove the menu at a given index from the menu bar.\n   *\n   * @param index - The index of the menu to remove.\n   *\n   * #### Notes\n   * This is a no-op if the index is out of range.\n   */\n  removeMenuAt(index: number): void {\n    // Close the child menu before making changes.\n    this._closeChildMenu();\n\n    // Remove the menu from the array.\n    let menu = ArrayExt.removeAt(this._menus, index);\n\n    // Bail if the index is out of range.\n    if (!menu) {\n      return;\n    }\n\n    // Disconnect from the menu signals.\n    menu.aboutToClose.disconnect(this._onMenuAboutToClose, this);\n    menu.menuRequested.disconnect(this._onMenuMenuRequested, this);\n    menu.title.changed.disconnect(this._onTitleChanged, this);\n\n    // Remove the styling class from the menu.\n    menu.removeClass('lm-MenuBar-menu');\n    /* <DEPRECATED> */\n    menu.removeClass('p-MenuBar-menu');\n    /* </DEPRECATED> */\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * Remove all menus from the menu bar.\n   */\n  clearMenus(): void {\n    // Bail if there is nothing to remove.\n    if (this._menus.length === 0) {\n      return;\n    }\n\n    // Close the child menu before making changes.\n    this._closeChildMenu();\n\n    // Disconnect from the menu signals and remove the styling class.\n    for (let menu of this._menus) {\n      menu.aboutToClose.disconnect(this._onMenuAboutToClose, this);\n      menu.menuRequested.disconnect(this._onMenuMenuRequested, this);\n      menu.title.changed.disconnect(this._onTitleChanged, this);\n      menu.removeClass('lm-MenuBar-menu');\n      /* <DEPRECATED> */\n      menu.removeClass('p-MenuBar-menu');\n      /* </DEPRECATED> */\n    }\n\n    // Clear the menus array.\n    this._menus.length = 0;\n\n    // Schedule an update of the items.\n    this.update();\n  }\n\n  /**\n   * Handle the DOM events for the menu bar.\n   *\n   * @param event - The DOM event sent to the menu bar.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the menu bar's DOM nodes. It\n   * should not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'keydown':\n      this._evtKeyDown(event as KeyboardEvent);\n      break;\n    case 'mousedown':\n      this._evtMouseDown(event as MouseEvent);\n      break;\n    case 'mousemove':\n      this._evtMouseMove(event as MouseEvent);\n      break;\n    case 'mouseleave':\n      this._evtMouseLeave(event as MouseEvent);\n      break;\n    case 'contextmenu':\n      event.preventDefault();\n      event.stopPropagation();\n      break;\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('keydown', this);\n    this.node.addEventListener('mousedown', this);\n    this.node.addEventListener('mousemove', this);\n    this.node.addEventListener('mouseleave', this);\n    this.node.addEventListener('contextmenu', this);\n  }\n\n  /**\n   * A message handler invoked on an `'after-detach'` message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('keydown', this);\n    this.node.removeEventListener('mousedown', this);\n    this.node.removeEventListener('mousemove', this);\n    this.node.removeEventListener('mouseleave', this);\n    this.node.removeEventListener('contextmenu', this);\n    this._closeChildMenu();\n  }\n\n  /**\n   * A message handler invoked on an `'activate-request'` message.\n   */\n  protected onActivateRequest(msg: Message): void {\n    if (this.isAttached) {\n      this.node.focus();\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    let menus = this._menus;\n    let renderer = this.renderer;\n    let activeIndex = this._activeIndex;\n    let content = new Array<VirtualElement>(menus.length);\n    for (let i = 0, n = menus.length; i < n; ++i) {\n      let title = menus[i].title;\n      let active = i === activeIndex;\n      content[i] = renderer.renderItem({\n        title,\n        active,\n        onfocus: () => {\n          this.activeIndex = i;\n        }\n      });\n    }\n    VirtualDOM.render(content, this.contentNode);\n  }\n\n  /**\n   * Handle the `'keydown'` event for the menu bar.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // A menu bar handles all keydown events.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Fetch the key code for the event.\n    let kc = event.keyCode;\n\n    // Enter, Up Arrow, Down Arrow\n    if (kc === 13 || kc === 38 || kc === 40) {\n      this.openActiveMenu();\n      return;\n    }\n\n    // Escape\n    if (kc === 27) {\n      this._closeChildMenu();\n      this.activeIndex = -1;\n      this.node.blur();\n      return;\n    }\n\n    // Left Arrow\n    if (kc === 37) {\n      let i = this._activeIndex;\n      let n = this._menus.length;\n      this.activeIndex = i === 0 ? n - 1 : i - 1;\n      return;\n    }\n\n    // Right Arrow\n    if (kc === 39) {\n      let i = this._activeIndex;\n      let n = this._menus.length;\n      this.activeIndex = i === n - 1 ? 0 : i + 1;\n      return;\n    }\n\n    // Get the pressed key character.\n    let key = getKeyboardLayout().keyForKeydownEvent(event);\n\n    // Bail if the key is not valid.\n    if (!key) {\n      return;\n    }\n\n    // Search for the next best matching mnemonic item.\n    let start = this._activeIndex + 1;\n    let result = Private.findMnemonic(this._menus, key, start);\n\n    // Handle the requested mnemonic based on the search results.\n    // If exactly one mnemonic is matched, that menu is opened.\n    // Otherwise, the next mnemonic is activated if available,\n    // followed by the auto mnemonic if available.\n    if (result.index !== -1 && !result.multiple) {\n      this.activeIndex = result.index;\n      this.openActiveMenu();\n    } else if (result.index !== -1) {\n      this.activeIndex = result.index;\n    } else if (result.auto !== -1) {\n      this.activeIndex = result.auto;\n    }\n  }\n\n  /**\n   * Handle the `'mousedown'` event for the menu bar.\n   */\n  private _evtMouseDown(event: MouseEvent): void {\n    // Bail if the mouse press was not on the menu bar. This can occur\n    // when the document listener is installed for an active menu bar.\n    if (!ElementExt.hitTest(this.node, event.clientX, event.clientY)) {\n      return;\n    }\n\n    // Stop the propagation of the event. Immediate propagation is\n    // also stopped so that an open menu does not handle the event.\n    event.preventDefault();\n    event.stopPropagation();\n    event.stopImmediatePropagation();\n\n    // Check if the mouse is over one of the menu items.\n    let index = ArrayExt.findFirstIndex(this.contentNode.children, node => {\n      return ElementExt.hitTest(node, event.clientX, event.clientY);\n    });\n\n    // If the press was not on an item, close the child menu.\n    if (index === -1) {\n      this._closeChildMenu();\n      return;\n    }\n\n    // If the press was not the left mouse button, do nothing further.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Otherwise, toggle the open state of the child menu.\n    if (this._childMenu) {\n      this._closeChildMenu();\n      this.activeIndex = index;\n    } else {\n      this.activeIndex = index;\n      this._openChildMenu();\n    }\n  }\n\n  /**\n   * Handle the `'mousemove'` event for the menu bar.\n   */\n  private _evtMouseMove(event: MouseEvent): void {\n    // Check if the mouse is over one of the menu items.\n    let index = ArrayExt.findFirstIndex(this.contentNode.children, node => {\n      return ElementExt.hitTest(node, event.clientX, event.clientY);\n    });\n\n    // Bail early if the active index will not change.\n    if (index === this._activeIndex) {\n      return;\n    }\n\n    // Bail early if a child menu is open and the mouse is not over\n    // an item. This allows the child menu to be kept open when the\n    // mouse is over the empty part of the menu bar.\n    if (index === -1 && this._childMenu) {\n      return;\n    }\n\n    // Update the active index to the hovered item.\n    this.activeIndex = index;\n\n    // Open the new menu if a menu is already open.\n    if (this._childMenu) {\n      this._openChildMenu();\n    }\n  }\n\n  /**\n   * Handle the `'mouseleave'` event for the menu bar.\n   */\n  private _evtMouseLeave(event: MouseEvent): void {\n    // Reset the active index if there is no open menu.\n    if (!this._childMenu) {\n      this.activeIndex = -1;\n    }\n  }\n\n  /**\n   * Open the child menu at the active index immediately.\n   *\n   * If a different child menu is already open, it will be closed,\n   * even if there is no active menu.\n   */\n  private _openChildMenu(): void {\n    // If there is no active menu, close the current menu.\n    let newMenu = this.activeMenu;\n    if (!newMenu) {\n      this._closeChildMenu();\n      return;\n    }\n\n    // Bail if there is no effective menu change.\n    let oldMenu = this._childMenu;\n    if (oldMenu === newMenu) {\n      return;\n    }\n\n    // Swap the internal menu reference.\n    this._childMenu = newMenu;\n\n    // Close the current menu, or setup for the new menu.\n    if (oldMenu) {\n      oldMenu.close();\n    } else {\n      this.addClass('lm-mod-active');\n      /* <DEPRECATED> */\n      this.addClass('p-mod-active');\n      /* </DEPRECATED> */\n      document.addEventListener('mousedown', this, true);\n    }\n\n    // Ensure the menu bar is updated and look up the item node.\n    MessageLoop.sendMessage(this, Widget.Msg.UpdateRequest);\n    let itemNode = this.contentNode.children[this._activeIndex];\n\n    // Get the positioning data for the new menu.\n    let { left, bottom } = (itemNode as HTMLElement).getBoundingClientRect();\n\n    // Open the new menu at the computed location.\n    newMenu.open(left, bottom, this._forceItemsPosition);\n  }\n\n  /**\n   * Close the child menu immediately.\n   *\n   * This is a no-op if a child menu is not open.\n   */\n  private _closeChildMenu(): void {\n    // Bail if no child menu is open.\n    if (!this._childMenu) {\n      return;\n    }\n\n    // Remove the active class from the menu bar.\n    this.removeClass('lm-mod-active');\n    /* <DEPRECATED> */\n    this.removeClass('p-mod-active');\n    /* </DEPRECATED> */\n\n    // Remove the document listeners.\n    document.removeEventListener('mousedown', this, true);\n\n    // Clear the internal menu reference.\n    let menu = this._childMenu;\n    this._childMenu = null;\n\n    // Close the menu.\n    menu.close();\n\n    // Reset the active index.\n    this.activeIndex = -1;\n  }\n\n  /**\n   * Handle the `aboutToClose` signal of a menu.\n   */\n  private _onMenuAboutToClose(sender: Menu): void {\n    // Bail if the sender is not the child menu.\n    if (sender !== this._childMenu) {\n      return;\n    }\n\n    // Remove the active class from the menu bar.\n    this.removeClass('lm-mod-active');\n    /* <DEPRECATED> */\n    this.removeClass('p-mod-active');\n    /* </DEPRECATED> */\n\n    // Remove the document listeners.\n    document.removeEventListener('mousedown', this, true);\n\n    // Clear the internal menu reference.\n    this._childMenu = null;\n\n    // Reset the active index.\n    this.activeIndex = -1;\n  }\n\n  /**\n   * Handle the `menuRequested` signal of a child menu.\n   */\n  private _onMenuMenuRequested(sender: Menu, args: 'next' | 'previous'): void {\n    // Bail if the sender is not the child menu.\n    if (sender !== this._childMenu) {\n      return;\n    }\n\n    // Look up the active index and menu count.\n    let i = this._activeIndex;\n    let n = this._menus.length;\n\n    // Active the next requested index.\n    switch (args) {\n    case 'next':\n      this.activeIndex = i === n - 1 ? 0 : i + 1;\n      break;\n    case 'previous':\n      this.activeIndex = i === 0 ? n - 1 : i - 1;\n      break;\n    }\n\n    // Open the active menu.\n    this.openActiveMenu();\n  }\n\n  /**\n   * Handle the `changed` signal of a title object.\n   */\n  private _onTitleChanged(): void {\n    this.update();\n  }\n\n  private _activeIndex = -1;\n  private _forceItemsPosition: Menu.IOpenOptions;\n  private _menus: Menu[] = [];\n  private _childMenu: Menu | null = null;\n}\n\n\n/**\n * The namespace for the `MenuBar` class statics.\n */\nexport\nnamespace MenuBar {\n  /**\n   * An options object for creating a menu bar.\n   */\n  export\n  interface IOptions {\n    /**\n     * A custom renderer for creating menu bar content.\n     *\n     * The default is a shared renderer instance.\n     */\n    renderer?: IRenderer;\n    /**\n     * Whether to force the position of the menu. The MenuBar forces the\n     * coordinates of its menus by default. With this option you can disable it.\n     *\n     * Setting to `false` will enable the logic which repositions the\n     * coordinates of the menu if it will not fit entirely on screen.\n     *\n     * The default is `true`.\n     */\n    forceItemsPosition?: Menu.IOpenOptions;\n  }\n\n  /**\n   * An object which holds the data to render a menu bar item.\n   */\n  export\n  interface IRenderData {\n    /**\n     * The title to be rendered.\n     */\n    readonly title: Title<Widget>;\n\n    /**\n     * Whether the item is the active item.\n     */\n    readonly active: boolean;\n\n    readonly onfocus?: (event: FocusEvent) => void;\n  }\n\n  /**\n   * A renderer for use with a menu bar.\n   */\n  export\n  interface IRenderer {\n    /**\n     * Render the virtual element for a menu bar item.\n     *\n     * @param data - The data to use for rendering the item.\n     *\n     * @returns A virtual element representing the item.\n     */\n    renderItem(data: IRenderData): VirtualElement;\n  }\n\n  /**\n   * The default implementation of `IRenderer`.\n   *\n   * #### Notes\n   * Subclasses are free to reimplement rendering methods as needed.\n   */\n  export\n  class Renderer implements IRenderer {\n    /**\n     * Construct a new renderer.\n     */\n    constructor() { }\n\n    /**\n     * Render the virtual element for a menu bar item.\n     *\n     * @param data - The data to use for rendering the item.\n     *\n     * @returns A virtual element representing the item.\n     */\n    renderItem(data: IRenderData): VirtualElement {\n      let className = this.createItemClass(data);\n      let dataset = this.createItemDataset(data);\n      let aria = this.createItemARIA(data);\n      return (\n        h.li({ className, dataset, tabindex: '0', onfocus: data.onfocus, ...aria },\n          this.renderIcon(data),\n          this.renderLabel(data)\n        )\n      );\n    }\n\n    /**\n     * Render the icon element for a menu bar item.\n     *\n     * @param data - The data to use for rendering the icon.\n     *\n     * @returns A virtual element representing the item icon.\n     */\n    renderIcon(data: IRenderData): VirtualElement {\n      let className = this.createIconClass(data);\n\n      /* <DEPRECATED> */\n      if (typeof data.title.icon === 'string') {\n        return h.div({className}, data.title.iconLabel);\n      }\n      /* </DEPRECATED> */\n\n      // if data.title.icon is undefined, it will be ignored\n      return h.div({className}, data.title.icon!, data.title.iconLabel);\n    }\n\n    /**\n     * Render the label element for a menu item.\n     *\n     * @param data - The data to use for rendering the label.\n     *\n     * @returns A virtual element representing the item label.\n     */\n    renderLabel(data: IRenderData): VirtualElement {\n      let content = this.formatLabel(data);\n      return h.div({ className:\n        'lm-MenuBar-itemLabel'\n          /* <DEPRECATED> */\n            + ' p-MenuBar-itemLabel'\n          /* </DEPRECATED> */\n      }, content);\n    }\n\n    /**\n     * Create the class name for the menu bar item.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the menu item.\n     */\n    createItemClass(data: IRenderData): string {\n      let name = 'lm-MenuBar-item';\n      /* <DEPRECATED> */\n      name += ' p-MenuBar-item';\n      /* </DEPRECATED> */\n      if (data.title.className) {\n        name += ` ${data.title.className}`;\n      }\n      if (data.active) {\n        name += ' lm-mod-active';\n      /* <DEPRECATED> */\n      name += ' p-mod-active';\n      /* </DEPRECATED> */\n      }\n      return name;\n    }\n\n    /**\n     * Create the dataset for a menu bar item.\n     *\n     * @param data - The data to use for the item.\n     *\n     * @returns The dataset for the menu bar item.\n     */\n    createItemDataset(data: IRenderData): ElementDataset {\n      return data.title.dataset;\n    }\n\n    /**\n     * Create the aria attributes for menu bar item.\n     * \n     * @param data - The data to use for the aria attributes.\n     * \n     * @returns The aria attributes object for the item.\n     */\n    createItemARIA(data: IRenderData): ElementARIAAttrs {\n      return {role: 'menuitem', 'aria-haspopup': 'true'};\n    }\n\n    /**\n     * Create the class name for the menu bar item icon.\n     *\n     * @param data - The data to use for the class name.\n     *\n     * @returns The full class name for the item icon.\n     */\n    createIconClass(data: IRenderData): string {\n      let name = 'lm-MenuBar-itemIcon';\n      /* <DEPRECATED> */\n      name += ' p-MenuBar-itemIcon';\n      /* </DEPRECATED> */\n      let extra = data.title.iconClass;\n      return extra ? `${name} ${extra}` : name;\n    }\n\n    /**\n     * Create the render content for the label node.\n     *\n     * @param data - The data to use for the label content.\n     *\n     * @returns The content to add to the label node.\n     */\n    formatLabel(data: IRenderData): h.Child {\n      // Fetch the label text and mnemonic index.\n      let { label, mnemonic } = data.title;\n\n      // If the index is out of range, do not modify the label.\n      if (mnemonic < 0 || mnemonic >= label.length) {\n        return label;\n      }\n\n      // Split the label into parts.\n      let prefix = label.slice(0, mnemonic);\n      let suffix = label.slice(mnemonic + 1);\n      let char = label[mnemonic];\n\n      // Wrap the mnemonic character in a span.\n      let span = h.span({\n        className: 'lm-MenuBar-itemMnemonic'\n          /* <DEPRECATED> */\n          + ' p-MenuBar-itemMnemonic'\n          /* </DEPRECATED> */\n      }, char);\n\n      // Return the content parts.\n      return [prefix, span, suffix];\n    }\n  }\n\n  /**\n   * The default `Renderer` instance.\n   */\n  export\n  const defaultRenderer = new Renderer();\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Create the DOM node for a menu bar.\n   */\n  export\n  function createNode(): HTMLDivElement {\n    let node = document.createElement('div');\n    let content = document.createElement('ul');\n    content.className = 'lm-MenuBar-content';\n    /* <DEPRECATED> */\n    content.classList.add('p-MenuBar-content');\n    /* </DEPRECATED> */\n    node.appendChild(content);\n    content.setAttribute('role', 'menubar');\n    node.tabIndex = 0;\n    content.tabIndex = 0;\n    return node;\n  }\n\n  /**\n   * The results of a mnemonic search.\n   */\n  export\n  interface IMnemonicResult {\n    /**\n     * The index of the first matching mnemonic item, or `-1`.\n     */\n    index: number;\n\n    /**\n     * Whether multiple mnemonic items matched.\n     */\n    multiple: boolean;\n\n    /**\n     * The index of the first auto matched non-mnemonic item.\n     */\n    auto: number;\n  }\n\n  /**\n   * Find the best matching mnemonic item.\n   *\n   * The search starts at the given index and wraps around.\n   */\n  export\n  function findMnemonic(menus: ReadonlyArray<Menu>, key: string, start: number): IMnemonicResult {\n    // Setup the result variables.\n    let index = -1;\n    let auto = -1;\n    let multiple = false;\n\n    // Normalize the key to upper case.\n    let upperKey = key.toUpperCase();\n\n    // Search the items from the given start index.\n    for (let i = 0, n = menus.length; i < n; ++i) {\n      // Compute the wrapped index.\n      let k = (i + start) % n;\n\n      // Look up the menu title.\n      let title = menus[k].title;\n\n      // Ignore titles with an empty label.\n      if (title.label.length === 0) {\n        continue;\n      }\n\n      // Look up the mnemonic index for the label.\n      let mn = title.mnemonic;\n\n      // Handle a valid mnemonic index.\n      if (mn >= 0 && mn < title.label.length) {\n        if (title.label[mn].toUpperCase() === upperKey) {\n          if (index === -1) {\n            index = k;\n          } else {\n            multiple = true;\n          }\n        }\n        continue;\n      }\n\n      // Finally, handle the auto index if possible.\n      if (auto === -1 && title.label[0].toUpperCase() === upperKey) {\n        auto = k;\n      }\n    }\n\n    // Return the search results.\n    return { index, multiple, auto };\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, each, filter, find, max\n} from '@lumino/algorithm';\n\nimport {\n  IDisposable\n} from '@lumino/disposable';\n\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A class which tracks focus among a set of widgets.\n *\n * This class is useful when code needs to keep track of the most\n * recently focused widget(s) among a set of related widgets.\n */\nexport\nclass FocusTracker<T extends Widget> implements IDisposable {\n  /**\n   * Construct a new focus tracker.\n   */\n  constructor() { }\n\n  /**\n   * Dispose of the resources held by the tracker.\n   */\n  dispose(): void {\n    // Do nothing if the tracker is already disposed.\n    if (this._counter < 0) {\n      return;\n    }\n\n    // Mark the tracker as disposed.\n    this._counter = -1;\n\n    // Clear the connections for the tracker.\n    Signal.clearData(this);\n\n    // Remove all event listeners.\n    each(this._widgets, w => {\n      w.node.removeEventListener('focus', this, true);\n      w.node.removeEventListener('blur', this, true);\n    });\n\n    // Clear the internal data structures.\n    this._activeWidget = null;\n    this._currentWidget = null;\n    this._nodes.clear();\n    this._numbers.clear();\n    this._widgets.length = 0;\n  }\n\n  /**\n   * A signal emitted when the current widget has changed.\n   */\n  get currentChanged(): ISignal<this, FocusTracker.IChangedArgs<T>> {\n    return this._currentChanged;\n  }\n\n  /**\n   * A signal emitted when the active widget has changed.\n   */\n  get activeChanged(): ISignal<this, FocusTracker.IChangedArgs<T>> {\n    return this._activeChanged;\n  }\n\n  /**\n   * A flag indicating whether the tracker is disposed.\n   */\n  get isDisposed(): boolean {\n    return this._counter < 0;\n  }\n\n  /**\n   * The current widget in the tracker.\n   *\n   * #### Notes\n   * The current widget is the widget among the tracked widgets which\n   * has the *descendant node* which has most recently been focused.\n   *\n   * The current widget will not be updated if the node loses focus. It\n   * will only be updated when a different tracked widget gains focus.\n   *\n   * If the current widget is removed from the tracker, the previous\n   * current widget will be restored.\n   *\n   * This behavior is intended to follow a user's conceptual model of\n   * a semantically \"current\" widget, where the \"last thing of type X\"\n   * to be interacted with is the \"current instance of X\", regardless\n   * of whether that instance still has focus.\n   */\n  get currentWidget(): T | null {\n    return this._currentWidget;\n  }\n\n  /**\n   * The active widget in the tracker.\n   *\n   * #### Notes\n   * The active widget is the widget among the tracked widgets which\n   * has the *descendant node* which is currently focused.\n   */\n  get activeWidget(): T | null {\n    return this._activeWidget;\n  }\n\n  /**\n   * A read only array of the widgets being tracked.\n   */\n  get widgets(): ReadonlyArray<T> {\n    return this._widgets;\n  }\n\n  /**\n   * Get the focus number for a particular widget in the tracker.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns The focus number for the given widget, or `-1` if the\n   *   widget has not had focus since being added to the tracker, or\n   *   is not contained by the tracker.\n   *\n   * #### Notes\n   * The focus number indicates the relative order in which the widgets\n   * have gained focus. A widget with a larger number has gained focus\n   * more recently than a widget with a smaller number.\n   *\n   * The `currentWidget` will always have the largest focus number.\n   *\n   * All widgets start with a focus number of `-1`, which indicates that\n   * the widget has not been focused since being added to the tracker.\n   */\n  focusNumber(widget: T): number {\n    let n = this._numbers.get(widget);\n    return n === undefined ? -1 : n;\n  }\n\n  /**\n   * Test whether the focus tracker contains a given widget.\n   *\n   * @param widget - The widget of interest.\n   *\n   * @returns `true` if the widget is tracked, `false` otherwise.\n   */\n  has(widget: T): boolean {\n    return this._numbers.has(widget);\n  }\n\n  /**\n   * Add a widget to the focus tracker.\n   *\n   * @param widget - The widget of interest.\n   *\n   * #### Notes\n   * A widget will be automatically removed from the tracker if it\n   * is disposed after being added.\n   *\n   * If the widget is already tracked, this is a no-op.\n   */\n  add(widget: T): void {\n    // Do nothing if the widget is already tracked.\n    if (this._numbers.has(widget)) {\n      return;\n    }\n\n    // Test whether the widget has focus.\n    let focused = widget.node.contains(document.activeElement);\n\n    // Set up the initial focus number.\n    let n = focused ? this._counter++ : -1;\n\n    // Add the widget to the internal data structures.\n    this._widgets.push(widget);\n    this._numbers.set(widget, n);\n    this._nodes.set(widget.node, widget);\n\n    // Set up the event listeners. The capturing phase must be used\n    // since the 'focus' and 'blur' events don't bubble and Firefox\n    // doesn't support the 'focusin' or 'focusout' events.\n    widget.node.addEventListener('focus', this, true);\n    widget.node.addEventListener('blur', this, true);\n\n    // Connect the disposed signal handler.\n    widget.disposed.connect(this._onWidgetDisposed, this);\n\n    // Set the current and active widgets if needed.\n    if (focused) {\n      this._setWidgets(widget, widget);\n    }\n  }\n\n  /**\n   * Remove a widget from the focus tracker.\n   *\n   * #### Notes\n   * If the widget is the `currentWidget`, the previous current widget\n   * will become the new `currentWidget`.\n   *\n   * A widget will be automatically removed from the tracker if it\n   * is disposed after being added.\n   *\n   * If the widget is not tracked, this is a no-op.\n   */\n  remove(widget: T): void {\n    // Bail early if the widget is not tracked.\n    if (!this._numbers.has(widget)) {\n      return;\n    }\n\n    // Disconnect the disposed signal handler.\n    widget.disposed.disconnect(this._onWidgetDisposed, this);\n\n    // Remove the event listeners.\n    widget.node.removeEventListener('focus', this, true);\n    widget.node.removeEventListener('blur', this, true);\n\n    // Remove the widget from the internal data structures.\n    ArrayExt.removeFirstOf(this._widgets, widget);\n    this._nodes.delete(widget.node);\n    this._numbers.delete(widget);\n\n    // Bail early if the widget is not the current widget.\n    if (this._currentWidget !== widget) {\n      return;\n    }\n\n    // Filter the widgets for those which have had focus.\n    let valid = filter(this._widgets, w => this._numbers.get(w) !== -1);\n\n    // Get the valid widget with the max focus number.\n    let previous = max(valid, (first, second) => {\n      let a = this._numbers.get(first)!;\n      let b = this._numbers.get(second)!;\n      return a - b;\n    }) || null;\n\n    // Set the current and active widgets.\n    this._setWidgets(previous, null);\n  }\n\n  /**\n   * Handle the DOM events for the focus tracker.\n   *\n   * @param event - The DOM event sent to the panel.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the tracked nodes. It should\n   * not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'focus':\n      this._evtFocus(event as FocusEvent);\n      break;\n    case 'blur':\n      this._evtBlur(event as FocusEvent);\n      break;\n    }\n  }\n\n  /**\n   * Set the current and active widgets for the tracker.\n   */\n  private _setWidgets(current: T | null, active: T | null): void {\n    // Swap the current widget.\n    let oldCurrent = this._currentWidget;\n    this._currentWidget = current;\n\n    // Swap the active widget.\n    let oldActive = this._activeWidget;\n    this._activeWidget = active;\n\n    // Emit the `currentChanged` signal if needed.\n    if (oldCurrent !== current) {\n      this._currentChanged.emit({ oldValue: oldCurrent, newValue: current });\n    }\n\n    // Emit the `activeChanged` signal if needed.\n    if (oldActive !== active) {\n      this._activeChanged.emit({ oldValue: oldActive, newValue: active });\n    }\n  }\n\n  /**\n   * Handle the `'focus'` event for a tracked widget.\n   */\n  private _evtFocus(event: FocusEvent): void {\n    // Find the widget which gained focus, which is known to exist.\n    let widget = this._nodes.get(event.currentTarget as HTMLElement)!;\n\n    // Update the focus number if necessary.\n    if (widget !== this._currentWidget) {\n      this._numbers.set(widget, this._counter++);\n    }\n\n    // Set the current and active widgets.\n    this._setWidgets(widget, widget);\n  }\n\n  /**\n   * Handle the `'blur'` event for a tracked widget.\n   */\n  private _evtBlur(event: FocusEvent): void {\n    // Find the widget which lost focus, which is known to exist.\n    let widget = this._nodes.get(event.currentTarget as HTMLElement)!;\n\n    // Get the node which being focused after this blur.\n    let focusTarget = event.relatedTarget as HTMLElement;\n\n    // If no other node is being focused, clear the active widget.\n    if (!focusTarget) {\n      this._setWidgets(this._currentWidget, null);\n      return;\n    }\n\n    // Bail if the focus widget is not changing.\n    if (widget.node.contains(focusTarget)) {\n      return;\n    }\n\n    // If no tracked widget is being focused, clear the active widget.\n    if (!find(this._widgets, w => w.node.contains(focusTarget))) {\n      this._setWidgets(this._currentWidget, null);\n      return;\n    }\n  }\n\n  /**\n   * Handle the `disposed` signal for a tracked widget.\n   */\n  private _onWidgetDisposed(sender: T): void {\n    this.remove(sender);\n  }\n\n  private _counter = 0;\n  private _widgets: T[] = [];\n  private _activeWidget: T | null = null;\n  private _currentWidget: T | null = null;\n  private _numbers = new Map<T, number>();\n  private _nodes = new Map<HTMLElement, T>();\n  private _activeChanged = new Signal<this, FocusTracker.IChangedArgs<T>>(this);\n  private _currentChanged = new Signal<this, FocusTracker.IChangedArgs<T>>(this);\n}\n\n\n/**\n * The namespace for the `FocusTracker` class statics.\n */\nexport\nnamespace FocusTracker {\n  /**\n   * An arguments object for the changed signals.\n   */\n  export\n  interface IChangedArgs<T extends Widget> {\n    /**\n     * The old value for the widget.\n     */\n    oldValue: T | null;\n\n    /**\n     * The new value for the widget.\n     */\n    newValue: T | null;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  IDisposable\n} from '@lumino/disposable';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Drag\n} from '@lumino/dragdrop';\n\nimport {\n  Message\n} from '@lumino/messaging';\n\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A widget which implements a canonical scroll bar.\n */\nexport\nclass ScrollBar extends Widget {\n  /**\n   * Construct a new scroll bar.\n   *\n   * @param options - The options for initializing the scroll bar.\n   */\n  constructor(options: ScrollBar.IOptions = {}) {\n    super({ node: Private.createNode() });\n    this.addClass('lm-ScrollBar');\n    /* <DEPRECATED> */\n    this.addClass('p-ScrollBar');\n    /* </DEPRECATED> */\n    this.setFlag(Widget.Flag.DisallowLayout);\n\n    // Set the orientation.\n    this._orientation = options.orientation || 'vertical';\n    this.dataset['orientation'] = this._orientation;\n\n    // Parse the rest of the options.\n    if (options.maximum !== undefined) {\n      this._maximum = Math.max(0, options.maximum);\n    }\n    if (options.page !== undefined) {\n      this._page = Math.max(0, options.page);\n    }\n    if (options.value !== undefined) {\n      this._value = Math.max(0, Math.min(options.value, this._maximum));\n    }\n  }\n\n  /**\n   * A signal emitted when the user moves the scroll thumb.\n   *\n   * #### Notes\n   * The payload is the current value of the scroll bar.\n   */\n  get thumbMoved(): ISignal<this, number> {\n    return this._thumbMoved;\n  }\n\n  /**\n   * A signal emitted when the user clicks a step button.\n   *\n   * #### Notes\n   * The payload is whether a decrease or increase is requested.\n   */\n  get stepRequested(): ISignal<this, 'decrement' | 'increment'> {\n    return this._stepRequested;\n  }\n\n  /**\n   * A signal emitted when the user clicks the scroll track.\n   *\n   * #### Notes\n   * The payload is whether a decrease or increase is requested.\n   */\n  get pageRequested(): ISignal<this, 'decrement' | 'increment'> {\n    return this._pageRequested;\n  }\n\n  /**\n   * Get the orientation of the scroll bar.\n   */\n  get orientation(): ScrollBar.Orientation {\n    return this._orientation;\n  }\n\n  /**\n   * Set the orientation of the scroll bar.\n   */\n  set orientation(value: ScrollBar.Orientation) {\n    // Do nothing if the orientation does not change.\n    if (this._orientation === value) {\n      return;\n    }\n\n    // Release the mouse before making changes.\n    this._releaseMouse();\n\n    // Update the internal orientation.\n    this._orientation = value;\n    this.dataset['orientation'] = value;\n\n    // Schedule an update the scroll bar.\n    this.update();\n  }\n\n  /**\n   * Get the current value of the scroll bar.\n   */\n  get value(): number {\n    return this._value;\n  }\n\n  /**\n   * Set the current value of the scroll bar.\n   *\n   * #### Notes\n   * The value will be clamped to the range `[0, maximum]`.\n   */\n  set value(value: number) {\n    // Clamp the value to the allowable range.\n    value = Math.max(0, Math.min(value, this._maximum));\n\n    // Do nothing if the value does not change.\n    if (this._value === value) {\n      return;\n    }\n\n    // Update the internal value.\n    this._value = value;\n\n    // Schedule an update the scroll bar.\n    this.update();\n  }\n\n  /**\n   * Get the page size of the scroll bar.\n   *\n   * #### Notes\n   * The page size is the amount of visible content in the scrolled\n   * region, expressed in data units. It determines the size of the\n   * scroll bar thumb.\n   */\n  get page(): number {\n    return this._page;\n  }\n\n  /**\n   * Set the page size of the scroll bar.\n   *\n   * #### Notes\n   * The page size will be clamped to the range `[0, Infinity]`.\n   */\n  set page(value: number) {\n    // Clamp the page size to the allowable range.\n    value = Math.max(0, value);\n\n    // Do nothing if the value does not change.\n    if (this._page === value) {\n      return;\n    }\n\n    // Update the internal page size.\n    this._page = value;\n\n    // Schedule an update the scroll bar.\n    this.update();\n  }\n\n  /**\n   * Get the maximum value of the scroll bar.\n   */\n  get maximum(): number {\n    return this._maximum;\n  }\n\n  /**\n   * Set the maximum value of the scroll bar.\n   *\n   * #### Notes\n   * The max size will be clamped to the range `[0, Infinity]`.\n   */\n  set maximum(value: number) {\n    // Clamp the value to the allowable range.\n    value = Math.max(0, value);\n\n    // Do nothing if the value does not change.\n    if (this._maximum === value) {\n      return;\n    }\n\n    // Update the internal values.\n    this._maximum = value;\n\n    // Clamp the current value to the new range.\n    this._value = Math.min(this._value, value);\n\n    // Schedule an update the scroll bar.\n    this.update();\n  }\n\n  /**\n   * The scroll bar decrement button node.\n   *\n   * #### Notes\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get decrementNode(): HTMLDivElement {\n    return this.node.getElementsByClassName('lm-ScrollBar-button')[0] as HTMLDivElement;\n  }\n\n  /**\n   * The scroll bar increment button node.\n   *\n   * #### Notes\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get incrementNode(): HTMLDivElement {\n    return this.node.getElementsByClassName('lm-ScrollBar-button')[1] as HTMLDivElement;\n  }\n\n  /**\n   * The scroll bar track node.\n   *\n   * #### Notes\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get trackNode(): HTMLDivElement {\n    return this.node.getElementsByClassName('lm-ScrollBar-track')[0] as HTMLDivElement;\n  }\n\n  /**\n   * The scroll bar thumb node.\n   *\n   * #### Notes\n   * Modifying this node directly can lead to undefined behavior.\n   */\n  get thumbNode(): HTMLDivElement {\n    return this.node.getElementsByClassName('lm-ScrollBar-thumb')[0] as HTMLDivElement;\n  }\n\n  /**\n   * Handle the DOM events for the scroll bar.\n   *\n   * @param event - The DOM event sent to the scroll bar.\n   *\n   * #### Notes\n   * This method implements the DOM `EventListener` interface and is\n   * called in response to events on the scroll bar's DOM node.\n   *\n   * This should not be called directly by user code.\n   */\n  handleEvent(event: Event): void {\n    switch (event.type) {\n    case 'mousedown':\n      this._evtMouseDown(event as MouseEvent);\n      break;\n    case 'mousemove':\n      this._evtMouseMove(event as MouseEvent);\n      break;\n    case 'mouseup':\n      this._evtMouseUp(event as MouseEvent);\n      break;\n    case 'keydown':\n      this._evtKeyDown(event as KeyboardEvent);\n      break;\n    case 'contextmenu':\n      event.preventDefault();\n      event.stopPropagation();\n      break;\n    }\n  }\n\n  /**\n   * A method invoked on a 'before-attach' message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    this.node.addEventListener('mousedown', this);\n    this.update();\n  }\n\n  /**\n   * A method invoked on an 'after-detach' message.\n   */\n  protected onAfterDetach(msg: Message): void {\n    this.node.removeEventListener('mousedown', this);\n    this._releaseMouse();\n  }\n\n  /**\n   * A method invoked on an 'update-request' message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    // Convert the value and page into percentages.\n    let value = this._value * 100 / this._maximum;\n    let page = this._page * 100 / (this._page + this._maximum);\n\n    // Clamp the value and page to the relevant range.\n    value = Math.max(0, Math.min(value, 100));\n    page = Math.max(0, Math.min(page, 100));\n\n    // Fetch the thumb style.\n    let thumbStyle = this.thumbNode.style;\n\n    // Update the thumb style for the current orientation.\n    if (this._orientation === 'horizontal') {\n      thumbStyle.top = '';\n      thumbStyle.height = '';\n      thumbStyle.left = `${value}%`;\n      thumbStyle.width = `${page}%`;\n      thumbStyle.transform = `translate(${-value}%, 0%)`;\n    } else {\n      thumbStyle.left = '';\n      thumbStyle.width = '';\n      thumbStyle.top = `${value}%`;\n      thumbStyle.height = `${page}%`;\n      thumbStyle.transform = `translate(0%, ${-value}%)`;\n    }\n  }\n\n  /**\n   * Handle the `'keydown'` event for the scroll bar.\n   */\n  private _evtKeyDown(event: KeyboardEvent): void {\n    // Stop all input events during drag.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Ignore anything except the `Escape` key.\n    if (event.keyCode !== 27) {\n      return;\n    }\n\n    // Fetch the previous scroll value.\n    let value = this._pressData ? this._pressData.value : -1;\n\n    // Release the mouse.\n    this._releaseMouse();\n\n    // Restore the old scroll value if possible.\n    if (value !== -1) {\n      this._moveThumb(value);\n    }\n  }\n\n  /**\n   * Handle the `'mousedown'` event for the scroll bar.\n   */\n  private _evtMouseDown(event: MouseEvent): void {\n    // Do nothing if it's not a left mouse press.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Send an activate request to the scroll bar. This can be\n    // used by message hooks to activate something relevant.\n    this.activate();\n\n    // Do nothing if the mouse is already captured.\n    if (this._pressData) {\n      return;\n    }\n\n    // Find the pressed scroll bar part.\n    let part = Private.findPart(this, event.target as HTMLElement);\n\n    // Do nothing if the part is not of interest.\n    if (!part) {\n      return;\n    }\n\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Override the mouse cursor.\n    let override = Drag.overrideCursor('default');\n\n    // Set up the press data.\n    this._pressData = {\n      part, override,\n      delta: -1, value: -1,\n      mouseX: event.clientX,\n      mouseY: event.clientY\n    };\n\n    // Add the extra event listeners.\n    document.addEventListener('mousemove', this, true);\n    document.addEventListener('mouseup', this, true);\n    document.addEventListener('keydown', this, true);\n    document.addEventListener('contextmenu', this, true);\n\n    // Handle a thumb press.\n    if (part === 'thumb') {\n      // Fetch the thumb node.\n      let thumbNode = this.thumbNode;\n\n      // Fetch the client rect for the thumb.\n      let thumbRect = thumbNode.getBoundingClientRect();\n\n      // Update the press data delta for the current orientation.\n      if (this._orientation === 'horizontal') {\n        this._pressData.delta = event.clientX - thumbRect.left;\n      } else {\n        this._pressData.delta = event.clientY - thumbRect.top;\n      }\n\n      // Add the active class to the thumb node.\n      thumbNode.classList.add('lm-mod-active');\n      /* <DEPRECATED> */\n      thumbNode.classList.add('p-mod-active');\n      /* </DEPRECATED> */\n\n      // Store the current value in the press data.\n      this._pressData.value = this._value;\n\n      // Finished.\n      return;\n    }\n\n    // Handle a track press.\n    if (part === 'track') {\n      // Fetch the client rect for the thumb.\n      let thumbRect = this.thumbNode.getBoundingClientRect();\n\n      // Determine the direction for the page request.\n      let dir: 'decrement' | 'increment';\n      if (this._orientation === 'horizontal') {\n        dir = event.clientX < thumbRect.left ? 'decrement' : 'increment';\n      } else {\n        dir = event.clientY < thumbRect.top ? 'decrement' : 'increment';\n      }\n\n      // Start the repeat timer.\n      this._repeatTimer = window.setTimeout(this._onRepeat, 350);\n\n      // Emit the page requested signal.\n      this._pageRequested.emit(dir);\n\n      // Finished.\n      return;\n    }\n\n    // Handle a decrement button press.\n    if (part === 'decrement') {\n      // Add the active class to the decrement node.\n      this.decrementNode.classList.add('lm-mod-active');\n      /* <DEPRECATED> */\n      this.decrementNode.classList.add('p-mod-active');\n      /* </DEPRECATED> */\n\n      // Start the repeat timer.\n      this._repeatTimer = window.setTimeout(this._onRepeat, 350);\n\n      // Emit the step requested signal.\n      this._stepRequested.emit('decrement');\n\n      // Finished.\n      return;\n    }\n\n    // Handle an increment button press.\n    if (part === 'increment') {\n\n      // Add the active class to the increment node.\n      this.incrementNode.classList.add('lm-mod-active');\n      /* <DEPRECATED> */\n      this.incrementNode.classList.add('p-mod-active');\n      /* </DEPRECATED> */\n\n      // Start the repeat timer.\n      this._repeatTimer = window.setTimeout(this._onRepeat, 350);\n\n      // Emit the step requested signal.\n      this._stepRequested.emit('increment');\n\n      // Finished.\n      return;\n    }\n  }\n\n  /**\n   * Handle the `'mousemove'` event for the scroll bar.\n   */\n  private _evtMouseMove(event: MouseEvent): void {\n    // Do nothing if no drag is in progress.\n    if (!this._pressData) {\n      return;\n    }\n\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Update the mouse position.\n    this._pressData.mouseX = event.clientX;\n    this._pressData.mouseY = event.clientY;\n\n    // Bail if the thumb is not being dragged.\n    if (this._pressData.part !== 'thumb') {\n      return;\n    }\n\n    // Get the client rect for the thumb and track.\n    let thumbRect = this.thumbNode.getBoundingClientRect();\n    let trackRect = this.trackNode.getBoundingClientRect();\n\n    // Fetch the scroll geometry based on the orientation.\n    let trackPos: number;\n    let trackSpan: number;\n    if (this._orientation === 'horizontal') {\n      trackPos = event.clientX - trackRect.left - this._pressData.delta;\n      trackSpan = trackRect.width - thumbRect.width;\n    } else {\n      trackPos = event.clientY - trackRect.top - this._pressData.delta;\n      trackSpan = trackRect.height - thumbRect.height;\n    }\n\n    // Compute the desired value from the scroll geometry.\n    let value = trackSpan === 0 ? 0 : trackPos * this._maximum / trackSpan;\n\n    // Move the thumb to the computed value.\n    this._moveThumb(value);\n  }\n\n  /**\n   * Handle the `'mouseup'` event for the scroll bar.\n   */\n  private _evtMouseUp(event: MouseEvent): void {\n    // Do nothing if it's not a left mouse release.\n    if (event.button !== 0) {\n      return;\n    }\n\n    // Stop the event propagation.\n    event.preventDefault();\n    event.stopPropagation();\n\n    // Release the mouse.\n    this._releaseMouse();\n  }\n\n  /**\n   * Release the mouse and restore the node states.\n   */\n  private _releaseMouse(): void {\n    // Bail if there is no press data.\n    if (!this._pressData) {\n      return;\n    }\n\n    // Clear the repeat timer.\n    clearTimeout(this._repeatTimer);\n    this._repeatTimer = -1;\n\n    // Clear the press data.\n    this._pressData.override.dispose();\n    this._pressData = null;\n\n    // Remove the extra event listeners.\n    document.removeEventListener('mousemove', this, true);\n    document.removeEventListener('mouseup', this, true);\n    document.removeEventListener('keydown', this, true);\n    document.removeEventListener('contextmenu', this, true);\n\n    // Remove the active classes from the nodes.\n    this.thumbNode.classList.remove('lm-mod-active');\n    this.decrementNode.classList.remove('lm-mod-active');\n    this.incrementNode.classList.remove('lm-mod-active');\n    /* <DEPRECATED> */\n    this.thumbNode.classList.remove('p-mod-active');\n    this.decrementNode.classList.remove('p-mod-active');\n    this.incrementNode.classList.remove('p-mod-active');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * Move the thumb to the specified position.\n   */\n  private _moveThumb(value: number): void {\n    // Clamp the value to the allowed range.\n    value = Math.max(0, Math.min(value, this._maximum));\n\n    // Bail if the value does not change.\n    if (this._value === value) {\n      return;\n    }\n\n    // Update the internal value.\n    this._value = value;\n\n    // Schedule an update of the scroll bar.\n    this.update();\n\n    // Emit the thumb moved signal.\n    this._thumbMoved.emit(value);\n  }\n\n  /**\n   * A timeout callback for repeating the mouse press.\n   */\n  private _onRepeat = () => {\n    // Clear the repeat timer id.\n    this._repeatTimer = -1;\n\n    // Bail if the mouse has been released.\n    if (!this._pressData) {\n      return;\n    }\n\n    // Look up the part that was pressed.\n    let part = this._pressData.part;\n\n    // Bail if the thumb was pressed.\n    if (part === 'thumb') {\n      return;\n    }\n\n    // Schedule the timer for another repeat.\n    this._repeatTimer = window.setTimeout(this._onRepeat, 20);\n\n    // Get the current mouse position.\n    let mouseX = this._pressData.mouseX;\n    let mouseY = this._pressData.mouseY;\n\n    // Handle a decrement button repeat.\n    if (part === 'decrement') {\n      // Bail if the mouse is not over the button.\n      if (!ElementExt.hitTest(this.decrementNode, mouseX, mouseY)) {\n        return;\n      }\n\n      // Emit the step requested signal.\n      this._stepRequested.emit('decrement');\n\n      // Finished.\n      return;\n    }\n\n    // Handle an increment button repeat.\n    if (part === 'increment') {\n      // Bail if the mouse is not over the button.\n      if (!ElementExt.hitTest(this.incrementNode, mouseX, mouseY)) {\n        return;\n      }\n\n      // Emit the step requested signal.\n      this._stepRequested.emit('increment');\n\n      // Finished.\n      return;\n    }\n\n    // Handle a track repeat.\n    if (part === 'track') {\n      // Bail if the mouse is not over the track.\n      if (!ElementExt.hitTest(this.trackNode, mouseX, mouseY)) {\n        return;\n      }\n\n      // Fetch the thumb node.\n      let thumbNode = this.thumbNode;\n\n      // Bail if the mouse is over the thumb.\n      if (ElementExt.hitTest(thumbNode, mouseX, mouseY)) {\n        return;\n      }\n\n      // Fetch the client rect for the thumb.\n      let thumbRect = thumbNode.getBoundingClientRect();\n\n      // Determine the direction for the page request.\n      let dir: 'decrement' | 'increment';\n      if (this._orientation === 'horizontal') {\n        dir = mouseX < thumbRect.left ? 'decrement' : 'increment';\n      } else {\n        dir = mouseY < thumbRect.top ? 'decrement' : 'increment';\n      }\n\n      // Emit the page requested signal.\n      this._pageRequested.emit(dir);\n\n      // Finished.\n      return;\n    }\n  };\n\n  private _value = 0;\n  private _page = 10;\n  private _maximum = 100;\n  private _repeatTimer = -1;\n  private _orientation: ScrollBar.Orientation;\n  private _pressData: Private.IPressData | null = null;\n  private _thumbMoved = new Signal<this, number>(this);\n  private _stepRequested = new Signal<this, 'decrement' | 'increment'>(this);\n  private _pageRequested = new Signal<this, 'decrement' | 'increment'>(this);\n}\n\n\n/**\n * The namespace for the `ScrollBar` class statics.\n */\nexport\nnamespace ScrollBar {\n  /**\n   * A type alias for a scroll bar orientation.\n   */\n  export\n  type Orientation = 'horizontal' | 'vertical';\n\n  /**\n   * An options object for creating a scroll bar.\n   */\n  export\n  interface IOptions {\n    /**\n     * The orientation of the scroll bar.\n     *\n     * The default is `'vertical'`.\n     */\n    orientation?: Orientation;\n\n    /**\n     * The value for the scroll bar.\n     *\n     * The default is `0`.\n     */\n    value?: number;\n\n    /**\n     * The page size for the scroll bar.\n     *\n     * The default is `10`.\n     */\n    page?: number;\n\n    /**\n     * The maximum value for the scroll bar.\n     *\n     * The default is `100`.\n     */\n    maximum?: number;\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A type alias for the parts of a scroll bar.\n   */\n  export\n  type ScrollBarPart = 'thumb' | 'track' | 'decrement' | 'increment';\n\n  /**\n   * An object which holds mouse press data.\n   */\n  export\n  interface IPressData {\n    /**\n     * The scroll bar part which was pressed.\n     */\n    part: ScrollBarPart;\n\n    /**\n     * The offset of the press in thumb coordinates, or -1.\n     */\n    delta: number;\n\n    /**\n     * The scroll value at the time the thumb was pressed, or -1.\n     */\n    value: number;\n\n    /**\n     * The disposable which will clear the override cursor.\n     */\n    override: IDisposable;\n\n    /**\n     * The current X position of the mouse.\n     */\n    mouseX: number;\n\n    /**\n     * The current Y position of the mouse.\n     */\n    mouseY: number;\n  }\n\n  /**\n   * Create the DOM node for a scroll bar.\n   */\n  export\n  function createNode(): HTMLElement {\n    let node = document.createElement('div');\n    let decrement = document.createElement('div');\n    let increment = document.createElement('div');\n    let track = document.createElement('div');\n    let thumb = document.createElement('div');\n    decrement.className = 'lm-ScrollBar-button';\n    increment.className = 'lm-ScrollBar-button';\n    decrement.dataset['action'] = 'decrement';\n    increment.dataset['action'] = 'increment';\n    track.className = 'lm-ScrollBar-track';\n    thumb.className = 'lm-ScrollBar-thumb';\n    /* <DEPRECATED> */\n    decrement.classList.add('p-ScrollBar-button');\n    increment.classList.add('p-ScrollBar-button');\n    track.classList.add('p-ScrollBar-track');\n    thumb.classList.add('p-ScrollBar-thumb');\n    /* </DEPRECATED> */\n    track.appendChild(thumb);\n    node.appendChild(decrement);\n    node.appendChild(track);\n    node.appendChild(increment);\n    return node;\n  }\n\n  /**\n   * Find the scroll bar part which contains the given target.\n   */\n  export\n  function findPart(scrollBar: ScrollBar, target: HTMLElement): ScrollBarPart | null {\n    // Test the thumb.\n    if (scrollBar.thumbNode.contains(target)) {\n      return 'thumb';\n    }\n\n    // Test the track.\n    if (scrollBar.trackNode.contains(target)) {\n      return 'track';\n    }\n\n    // Test the decrement button.\n    if (scrollBar.decrementNode.contains(target)) {\n      return 'decrement';\n    }\n\n    // Test the increment button.\n    if (scrollBar.incrementNode.contains(target)) {\n      return 'increment';\n    }\n\n    // Indicate no match.\n    return null;\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  Panel\n} from './panel';\n\nimport {\n  StackedLayout\n} from './stackedlayout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A panel where visible widgets are stacked atop one another.\n *\n * #### Notes\n * This class provides a convenience wrapper around a [[StackedLayout]].\n */\nexport\nclass StackedPanel extends Panel {\n  /**\n   * Construct a new stacked panel.\n   *\n   * @param options - The options for initializing the panel.\n   */\n  constructor(options: StackedPanel.IOptions = {}) {\n    super({ layout: Private.createLayout(options) });\n    this.addClass('lm-StackedPanel');\n    /* <DEPRECATED> */\n    this.addClass('p-StackedPanel');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * A signal emitted when a widget is removed from a stacked panel.\n   */\n  get widgetRemoved(): ISignal<this, Widget> {\n    return this._widgetRemoved;\n  }\n\n  /**\n   * A message handler invoked on a `'child-added'` message.\n   */\n  protected onChildAdded(msg: Widget.ChildMessage): void {\n    msg.child.addClass('lm-StackedPanel-child');\n    /* <DEPRECATED> */\n    msg.child.addClass('p-StackedPanel-child');\n    /* </DEPRECATED> */\n  }\n\n  /**\n   * A message handler invoked on a `'child-removed'` message.\n   */\n  protected onChildRemoved(msg: Widget.ChildMessage): void {\n    msg.child.removeClass('lm-StackedPanel-child');\n    /* <DEPRECATED> */\n    msg.child.removeClass('p-StackedPanel-child');\n    /* </DEPRECATED> */\n    this._widgetRemoved.emit(msg.child);\n  }\n\n  private _widgetRemoved = new Signal<this, Widget>(this);\n}\n\n\n/**\n * The namespace for the `StackedPanel` class statics.\n */\nexport\nnamespace StackedPanel {\n  /**\n   * An options object for creating a stacked panel.\n   */\n  export\n  interface IOptions {\n    /**\n     * The stacked layout to use for the stacked panel.\n     *\n     * The default is a new `StackedLayout`.\n     */\n    layout?: StackedLayout;\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Create a stacked layout for the given panel options.\n   */\n  export\n  function createLayout(options: StackedPanel.IOptions): StackedLayout {\n    return options.layout || new StackedLayout();\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  IIterator, each, empty, once\n} from '@lumino/algorithm';\n\nimport {\n  MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  Layout\n} from './layout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A concrete layout implementation which holds a single widget.\n *\n * #### Notes\n * This class is useful for creating simple container widgets which\n * hold a single child. The child should be positioned with CSS.\n */\nexport\nclass SingletonLayout extends Layout {\n  /**\n   * Dispose of the resources held by the layout.\n   */\n  dispose(): void {\n    if (this._widget) {\n      let widget = this._widget;\n      this._widget = null;\n      widget.dispose();\n    }\n    super.dispose();\n  }\n\n  /**\n   * Get the child widget for the layout.\n   */\n  get widget(): Widget | null {\n    return this._widget;\n  }\n\n  /**\n   * Set the child widget for the layout.\n   *\n   * #### Notes\n   * Setting the child widget will cause the old child widget to be\n   * automatically disposed. If that is not desired, set the parent\n   * of the old child to `null` before assigning a new child.\n   */\n  set widget(widget: Widget | null) {\n    // Remove the widget from its current parent. This is a no-op\n    // if the widget's parent is already the layout parent widget.\n    if (widget) {\n      widget.parent = this.parent;\n    }\n\n    // Bail early if the widget does not change.\n    if (this._widget === widget) {\n      return;\n    }\n\n    // Dispose of the old child widget.\n    if (this._widget) {\n      this._widget.dispose();\n    }\n\n    // Update the internal widget.\n    this._widget = widget;\n\n    // Attach the new child widget if needed.\n    if (this.parent && widget) {\n      this.attachWidget(widget);\n    }\n  }\n\n  /**\n   * Create an iterator over the widgets in the layout.\n   *\n   * @returns A new iterator over the widgets in the layout.\n   */\n  iter(): IIterator<Widget> {\n    return this._widget ? once(this._widget) : empty<Widget>();\n  }\n\n  /**\n   * Remove a widget from the layout.\n   *\n   * @param widget - The widget to remove from the layout.\n   *\n   * #### Notes\n   * A widget is automatically removed from the layout when its `parent`\n   * is set to `null`. This method should only be invoked directly when\n   * removing a widget from a layout which has yet to be installed on a\n   * parent widget.\n   *\n   * This method does *not* modify the widget's `parent`.\n   */\n  removeWidget(widget: Widget): void {\n    // Bail early if the widget does not exist in the layout.\n    if (this._widget !== widget) {\n      return;\n    }\n\n    // Clear the internal widget.\n    this._widget = null;\n\n    // If the layout is parented, detach the widget from the DOM.\n    if (this.parent) {\n      this.detachWidget(widget);\n    }\n  }\n\n  /**\n   * Perform layout initialization which requires the parent widget.\n   */\n  protected init(): void {\n    super.init();\n    each(this, widget => { this.attachWidget(widget); });\n  }\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param index - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to attach to the parent.\n   *\n   * #### Notes\n   * This method is called automatically by the single layout at the\n   * appropriate time. It should not be called directly by user code.\n   *\n   * The default implementation adds the widgets's node to the parent's\n   * node at the proper location, and sends the appropriate attach\n   * messages to the widget if the parent is attached to the DOM.\n   *\n   * Subclasses may reimplement this method to control how the widget's\n   * node is added to the parent's node.\n   */\n  protected attachWidget(widget: Widget): void {\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Add the widget's node to the parent.\n    this.parent!.node.appendChild(widget.node);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This method is called automatically by the single layout at the\n   * appropriate time. It should not be called directly by user code.\n   *\n   * The default implementation removes the widget's node from the\n   * parent's node, and sends the appropriate detach messages to the\n   * widget if the parent is attached to the DOM.\n   *\n   * Subclasses may reimplement this method to control how the widget's\n   * node is removed from the parent's node.\n   */\n  protected detachWidget(widget: Widget): void {\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget's node from the parent.\n    this.parent!.node.removeChild(widget.node);\n\n    // Send an `'after-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n  }\n\n  private _widget: Widget | null = null;\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, each\n} from '@lumino/algorithm';\n\nimport {\n  ElementExt\n} from '@lumino/domutils';\n\nimport {\n  Message, MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  LayoutItem\n} from './layout';\n\nimport {\n  PanelLayout\n} from './panellayout';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A layout where visible widgets are stacked atop one another.\n *\n * #### Notes\n * The Z-order of the visible widgets follows their layout order.\n */\nexport\nclass StackedLayout extends PanelLayout {\n  /**\n   * Dispose of the resources held by the layout.\n   */\n  dispose(): void {\n    // Dispose of the layout items.\n    each(this._items, item => { item.dispose(); });\n\n    // Clear the layout state.\n    this._box = null;\n    this._items.length = 0;\n\n    // Dispose of the rest of the layout.\n    super.dispose();\n  }\n\n  /**\n   * Attach a widget to the parent's DOM node.\n   *\n   * @param index - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to attach to the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected attachWidget(index: number, widget: Widget): void {\n    // Create and add a new layout item for the widget.\n    ArrayExt.insert(this._items, index, new LayoutItem(widget));\n\n    // Send a `'before-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeAttach);\n    }\n\n    // Add the widget's node to the parent.\n    this.parent!.node.appendChild(widget.node);\n\n    // Send an `'after-attach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterAttach);\n    }\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * Move a widget in the parent's DOM node.\n   *\n   * @param fromIndex - The previous index of the widget in the layout.\n   *\n   * @param toIndex - The current index of the widget in the layout.\n   *\n   * @param widget - The widget to move in the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected moveWidget(fromIndex: number, toIndex: number, widget: Widget): void {\n    // Move the layout item for the widget.\n    ArrayExt.move(this._items, fromIndex, toIndex);\n\n    // Post an update request for the parent widget.\n    this.parent!.update();\n  }\n\n  /**\n   * Detach a widget from the parent's DOM node.\n   *\n   * @param index - The previous index of the widget in the layout.\n   *\n   * @param widget - The widget to detach from the parent.\n   *\n   * #### Notes\n   * This is a reimplementation of the superclass method.\n   */\n  protected detachWidget(index: number, widget: Widget): void {\n    // Remove the layout item for the widget.\n    let item = ArrayExt.removeAt(this._items, index);\n\n    // Send a `'before-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.BeforeDetach);\n    }\n\n    // Remove the widget's node from the parent.\n    this.parent!.node.removeChild(widget.node);\n\n    // Send an `'after-detach'` message if the parent is attached.\n    if (this.parent!.isAttached) {\n      MessageLoop.sendMessage(widget, Widget.Msg.AfterDetach);\n    }\n\n    // Reset the z-index for the widget.\n    item!.widget.node.style.zIndex = '';\n\n    // Dispose of the layout item.\n    item!.dispose();\n\n    // Post a fit request for the parent widget.\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'before-show'` message.\n   */\n  protected onBeforeShow(msg: Message): void {\n    super.onBeforeShow(msg);\n    this.parent!.update();\n  }\n\n  /**\n   * A message handler invoked on a `'before-attach'` message.\n   */\n  protected onBeforeAttach(msg: Message): void {\n    super.onBeforeAttach(msg);\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-shown'` message.\n   */\n  protected onChildShown(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'child-hidden'` message.\n   */\n  protected onChildHidden(msg: Widget.ChildMessage): void {\n    this.parent!.fit();\n  }\n\n  /**\n   * A message handler invoked on a `'resize'` message.\n   */\n  protected onResize(msg: Widget.ResizeMessage): void {\n    if (this.parent!.isVisible) {\n      this._update(msg.width, msg.height);\n    }\n  }\n\n  /**\n   * A message handler invoked on an `'update-request'` message.\n   */\n  protected onUpdateRequest(msg: Message): void {\n    if (this.parent!.isVisible) {\n      this._update(-1, -1);\n    }\n  }\n\n  /**\n   * A message handler invoked on a `'fit-request'` message.\n   */\n  protected onFitRequest(msg: Message): void {\n    if (this.parent!.isAttached) {\n      this._fit();\n    }\n  }\n\n  /**\n   * Fit the layout to the total size required by the widgets.\n   */\n  private _fit(): void {\n    // Set up the computed minimum size.\n    let minW = 0;\n    let minH = 0;\n\n    // Update the computed minimum size.\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      // Fetch the item.\n      let item = this._items[i];\n\n      // Ignore hidden items.\n      if (item.isHidden) {\n        continue;\n      }\n\n      // Update the size limits for the item.\n      item.fit();\n\n      // Update the computed minimum size.\n      minW = Math.max(minW, item.minWidth);\n      minH = Math.max(minH, item.minHeight);\n    }\n\n    // Update the box sizing and add it to the computed min size.\n    let box = this._box = ElementExt.boxSizing(this.parent!.node);\n    minW += box.horizontalSum;\n    minH += box.verticalSum;\n\n    // Update the parent's min size constraints.\n    let style = this.parent!.node.style;\n    style.minWidth = `${minW}px`;\n    style.minHeight = `${minH}px`;\n\n    // Set the dirty flag to ensure only a single update occurs.\n    this._dirty = true;\n\n    // Notify the ancestor that it should fit immediately. This may\n    // cause a resize of the parent, fulfilling the required update.\n    if (this.parent!.parent) {\n      MessageLoop.sendMessage(this.parent!.parent!, Widget.Msg.FitRequest);\n    }\n\n    // If the dirty flag is still set, the parent was not resized.\n    // Trigger the required update on the parent widget immediately.\n    if (this._dirty) {\n      MessageLoop.sendMessage(this.parent!, Widget.Msg.UpdateRequest);\n    }\n  }\n\n  /**\n   * Update the layout position and size of the widgets.\n   *\n   * The parent offset dimensions should be `-1` if unknown.\n   */\n  private _update(offsetWidth: number, offsetHeight: number): void {\n    // Clear the dirty flag to indicate the update occurred.\n    this._dirty = false;\n\n    // Compute the visible item count.\n    let nVisible = 0;\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      nVisible += +!this._items[i].isHidden;\n    }\n\n    // Bail early if there are no visible items to layout.\n    if (nVisible === 0) {\n      return;\n    }\n\n    // Measure the parent if the offset dimensions are unknown.\n    if (offsetWidth < 0) {\n      offsetWidth = this.parent!.node.offsetWidth;\n    }\n    if (offsetHeight < 0) {\n      offsetHeight = this.parent!.node.offsetHeight;\n    }\n\n    // Ensure the parent box sizing data is computed.\n    if (!this._box) {\n      this._box = ElementExt.boxSizing(this.parent!.node);\n    }\n\n    // Compute the actual layout bounds adjusted for border and padding.\n    let top = this._box.paddingTop;\n    let left = this._box.paddingLeft;\n    let width = offsetWidth - this._box.horizontalSum;\n    let height = offsetHeight - this._box.verticalSum;\n\n    // Update the widget stacking order and layout geometry.\n    for (let i = 0, n = this._items.length; i < n; ++i) {\n      // Fetch the item.\n      let item = this._items[i];\n\n      // Ignore hidden items.\n      if (item.isHidden) {\n        continue;\n      }\n\n      // Set the z-index for the widget.\n      item.widget.node.style.zIndex = `${i}`;\n\n      // Update the item geometry.\n      item.update(left, top, width, height);\n    }\n  }\n\n  private _dirty = false;\n  private _items: LayoutItem[] = [];\n  private _box: ElementExt.IBoxSizing | null = null;\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  Platform\n} from '@lumino/domutils';\n\nimport {\n  MessageLoop\n} from '@lumino/messaging';\n\nimport {\n  ISignal, Signal\n} from '@lumino/signaling';\n\nimport {\n  BoxLayout\n} from './boxlayout';\n\nimport {\n  StackedPanel\n} from './stackedpanel';\n\nimport {\n  TabBar\n} from './tabbar';\n\nimport {\n  Widget\n} from './widget';\n\n\n/**\n * A widget which combines a `TabBar` and a `StackedPanel`.\n *\n * #### Notes\n * This is a simple panel which handles the common case of a tab bar\n * placed next to a content area. The selected tab controls the widget\n * which is shown in the content area.\n *\n * For use cases which require more control than is provided by this\n * panel, the `TabBar` widget may be used independently.\n */\nexport\nclass TabPanel extends Widget {\n  /**\n   * Construct a new tab panel.\n   *\n   * @param options - The options for initializing the tab panel.\n   */\n  constructor(options: TabPanel.IOptions = {}) {\n    super();\n    this.addClass('lm-TabPanel');\n    /* <DEPRECATED> */\n    this.addClass('p-TabPanel');\n    /* </DEPRECATED> */\n\n    // Create the tab bar and stacked panel.\n    this.tabBar = new TabBar<Widget>(options);\n    this.tabBar.addClass('lm-TabPanel-tabBar');\n    this.stackedPanel = new StackedPanel();\n    this.stackedPanel.addClass('lm-TabPanel-stackedPanel');\n    /* <DEPRECATED> */\n    this.tabBar.addClass('p-TabPanel-tabBar');\n    this.stackedPanel.addClass('p-TabPanel-stackedPanel');\n    /* </DEPRECATED> */\n\n    // Connect the tab bar signal handlers.\n    this.tabBar.tabMoved.connect(this._onTabMoved, this);\n    this.tabBar.currentChanged.connect(this._onCurrentChanged, this);\n    this.tabBar.tabCloseRequested.connect(this._onTabCloseRequested, this);\n    this.tabBar.tabActivateRequested.connect(this._onTabActivateRequested, this);\n    this.tabBar.addRequested.connect(this._onTabAddRequested, this);\n\n    // Connect the stacked panel signal handlers.\n    this.stackedPanel.widgetRemoved.connect(this._onWidgetRemoved, this);\n\n    // Get the data related to the placement.\n    this._tabPlacement = options.tabPlacement || 'top';\n    let direction = Private.directionFromPlacement(this._tabPlacement);\n    let orientation = Private.orientationFromPlacement(this._tabPlacement);\n\n    // Configure the tab bar for the placement.\n    this.tabBar.orientation = orientation;\n    this.tabBar.dataset['placement'] = this._tabPlacement;\n\n    // Create the box layout.\n    let layout = new BoxLayout({ direction, spacing: 0 });\n\n    // Set the stretch factors for the child widgets.\n    BoxLayout.setStretch(this.tabBar, 0);\n    BoxLayout.setStretch(this.stackedPanel, 1);\n\n    // Add the child widgets to the layout.\n    layout.addWidget(this.tabBar);\n    layout.addWidget(this.stackedPanel);\n\n    // Install the layout on the tab panel.\n    this.layout = layout;\n  }\n\n  /**\n   * A signal emitted when the current tab is changed.\n   *\n   * #### Notes\n   * This signal is emitted when the currently selected tab is changed\n   * either through user or programmatic interaction.\n   *\n   * Notably, this signal is not emitted when the index of the current\n   * tab changes due to tabs being inserted, removed, or moved. It is\n   * only emitted when the actual current tab node is changed.\n   */\n  get currentChanged(): ISignal<this, TabPanel.ICurrentChangedArgs> {\n    return this._currentChanged;\n  }\n\n  /**\n   * Get the index of the currently selected tab.\n   *\n   * #### Notes\n   * This will be `-1` if no tab is selected.\n   */\n  get currentIndex(): number {\n    return this.tabBar.currentIndex;\n  }\n\n  /**\n   * Set the index of the currently selected tab.\n   *\n   * #### Notes\n   * If the index is out of range, it will be set to `-1`.\n   */\n  set currentIndex(value: number) {\n    this.tabBar.currentIndex = value;\n  }\n\n  /**\n   * Get the currently selected widget.\n   *\n   * #### Notes\n   * This will be `null` if there is no selected tab.\n   */\n  get currentWidget(): Widget | null {\n    let title = this.tabBar.currentTitle;\n    return title ? title.owner : null;\n  }\n\n  /**\n   * Set the currently selected widget.\n   *\n   * #### Notes\n   * If the widget is not in the panel, it will be set to `null`.\n   */\n  set currentWidget(value: Widget | null) {\n    this.tabBar.currentTitle = value ? value.title : null;\n  }\n\n  /**\n   * Get the whether the tabs are movable by the user.\n   *\n   * #### Notes\n   * Tabs can always be moved programmatically.\n   */\n  get tabsMovable(): boolean {\n    return this.tabBar.tabsMovable;\n  }\n\n  /**\n   * Set the whether the tabs are movable by the user.\n   *\n   * #### Notes\n   * Tabs can always be moved programmatically.\n   */\n  set tabsMovable(value: boolean) {\n    this.tabBar.tabsMovable = value;\n  }\n\n  /**\n   * Get the whether the add button is enabled.\n   *\n   */\n  get addButtonEnabled(): boolean {\n    return this.tabBar.addButtonEnabled;\n  }\n\n  /**\n   * Set the whether the add button is enabled.\n   *\n   */\n  set addButtonEnabled(value: boolean) {\n    this.tabBar.addButtonEnabled = value;\n  }\n\n  /**\n   * Get the tab placement for the tab panel.\n   *\n   * #### Notes\n   * This controls the position of the tab bar relative to the content.\n   */\n  get tabPlacement(): TabPanel.TabPlacement {\n    return this._tabPlacement;\n  }\n\n  /**\n   * Set the tab placement for the tab panel.\n   *\n   * #### Notes\n   * This controls the position of the tab bar relative to the content.\n   */\n  set tabPlacement(value: TabPanel.TabPlacement) {\n    // Bail if the placement does not change.\n    if (this._tabPlacement === value) {\n      return;\n    }\n\n    // Update the internal value.\n    this._tabPlacement = value;\n\n    // Get the values related to the placement.\n    let direction = Private.directionFromPlacement(value);\n    let orientation = Private.orientationFromPlacement(value);\n\n    // Configure the tab bar for the placement.\n    this.tabBar.orientation = orientation;\n    this.tabBar.dataset['placement'] = value;\n\n    // Update the layout direction.\n    (this.layout as BoxLayout).direction = direction;\n  }\n\n  /**\n   * A signal emitted when the add button on a tab bar is clicked.\n   *\n   */\n  get addRequested(): ISignal<this, TabBar<Widget>> {\n    return this._addRequested;\n  }\n\n  /**\n   * The tab bar used by the tab panel.\n   *\n   * #### Notes\n   * Modifying the tab bar directly can lead to undefined behavior.\n   */\n  readonly tabBar: TabBar<Widget>;\n\n  /**\n   * The stacked panel used by the tab panel.\n   *\n   * #### Notes\n   * Modifying the panel directly can lead to undefined behavior.\n   */\n  readonly stackedPanel: StackedPanel;\n\n  /**\n   * A read-only array of the widgets in the panel.\n   */\n  get widgets(): ReadonlyArray<Widget> {\n    return this.stackedPanel.widgets;\n  }\n\n  /**\n   * Add a widget to the end of the tab panel.\n   *\n   * @param widget - The widget to add to the tab panel.\n   *\n   * #### Notes\n   * If the widget is already contained in the panel, it will be moved.\n   *\n   * The widget's `title` is used to populate the tab.\n   */\n  addWidget(widget: Widget): void {\n    this.insertWidget(this.widgets.length, widget);\n  }\n\n  /**\n   * Insert a widget into the tab panel at a specified index.\n   *\n   * @param index - The index at which to insert the widget.\n   *\n   * @param widget - The widget to insert into to the tab panel.\n   *\n   * #### Notes\n   * If the widget is already contained in the panel, it will be moved.\n   *\n   * The widget's `title` is used to populate the tab.\n   */\n  insertWidget(index: number, widget: Widget): void {\n    if (widget !== this.currentWidget) {\n      widget.hide();\n    }\n    this.stackedPanel.insertWidget(index, widget);\n    this.tabBar.insertTab(index, widget.title);\n\n    widget.node.setAttribute('role', 'tabpanel');\n\n    let renderer = this.tabBar.renderer\n    if (renderer instanceof TabBar.Renderer) {\n      let tabId = renderer.createTabKey({title: widget.title, current: false, zIndex: 0});\n      widget.node.setAttribute('aria-labelledby', tabId);\n    }\n  }\n\n  /**\n   * Handle the `currentChanged` signal from the tab bar.\n   */\n  private _onCurrentChanged(sender: TabBar<Widget>, args: TabBar.ICurrentChangedArgs<Widget>): void {\n    // Extract the previous and current title from the args.\n    let { previousIndex, previousTitle, currentIndex, currentTitle } = args;\n\n    // Extract the widgets from the titles.\n    let previousWidget = previousTitle ? previousTitle.owner : null;\n    let currentWidget = currentTitle ? currentTitle.owner : null;\n\n    // Hide the previous widget.\n    if (previousWidget) {\n      previousWidget.hide();\n    }\n\n    // Show the current widget.\n    if (currentWidget) {\n      currentWidget.show();\n    }\n\n    // Emit the `currentChanged` signal for the tab panel.\n    this._currentChanged.emit({\n      previousIndex, previousWidget, currentIndex, currentWidget\n    });\n\n    // Flush the message loop on IE and Edge to prevent flicker.\n    if (Platform.IS_EDGE || Platform.IS_IE) {\n      MessageLoop.flush();\n    }\n  }\n\n  /**\n   * Handle the `tabAddRequested` signal from the tab bar.\n   */\n  private _onTabAddRequested(sender: TabBar<Widget>, args: void): void {\n    this._addRequested.emit(sender);\n  }\n\n  /**\n   * Handle the `tabActivateRequested` signal from the tab bar.\n   */\n  private _onTabActivateRequested(sender: TabBar<Widget>, args: TabBar.ITabActivateRequestedArgs<Widget>): void {\n    args.title.owner.activate();\n  }\n\n  /**\n   * Handle the `tabCloseRequested` signal from the tab bar.\n   */\n  private _onTabCloseRequested(sender: TabBar<Widget>, args: TabBar.ITabCloseRequestedArgs<Widget>): void {\n    args.title.owner.close();\n  }\n\n  /**\n   * Handle the `tabMoved` signal from the tab bar.\n   */\n  private _onTabMoved(sender: TabBar<Widget>, args: TabBar.ITabMovedArgs<Widget>): void {\n    this.stackedPanel.insertWidget(args.toIndex, args.title.owner);\n  }\n\n  /**\n   * Handle the `widgetRemoved` signal from the stacked panel.\n   */\n  private _onWidgetRemoved(sender: StackedPanel, widget: Widget): void {\n    widget.node.removeAttribute('role');\n    widget.node.removeAttribute('aria-labelledby');\n    this.tabBar.removeTab(widget.title);\n  }\n\n  private _tabPlacement: TabPanel.TabPlacement;\n  private _currentChanged = new Signal<this, TabPanel.ICurrentChangedArgs>(this);\n\n  private _addRequested = new Signal<this, TabBar<Widget>>(this);\n\n}\n\n\n/**\n * The namespace for the `TabPanel` class statics.\n */\nexport\nnamespace TabPanel {\n  /**\n   * A type alias for tab placement in a tab bar.\n   */\n  export\n  type TabPlacement = (\n    /**\n     * The tabs are placed as a row above the content.\n     */\n    'top' |\n\n    /**\n     * The tabs are placed as a column to the left of the content.\n     */\n    'left' |\n\n    /**\n     * The tabs are placed as a column to the right of the content.\n     */\n    'right' |\n\n    /**\n     * The tabs are placed as a row below the content.\n     */\n    'bottom'\n  );\n\n  /**\n   * An options object for initializing a tab panel.\n   */\n  export\n  interface IOptions {\n    /**\n     * Whether the tabs are movable by the user.\n     *\n     * The default is `false`.\n     */\n    tabsMovable?: boolean;\n\n    /**\n     * Whether the button to add new tabs is enabled.\n     *\n     * The default is `false`.\n     */\n    addButtonEnabled?: boolean;\n\n    /**\n     * The placement of the tab bar relative to the content.\n     *\n     * The default is `'top'`.\n     */\n    tabPlacement?: TabPlacement;\n\n    /**\n     * The renderer for the panel's tab bar.\n     *\n     * The default is a shared renderer instance.\n     */\n    renderer?: TabBar.IRenderer<Widget>;\n  }\n\n  /**\n   * The arguments object for the `currentChanged` signal.\n   */\n  export\n  interface ICurrentChangedArgs {\n    /**\n     * The previously selected index.\n     */\n    previousIndex: number;\n\n    /**\n     * The previously selected widget.\n     */\n    previousWidget: Widget | null;\n\n    /**\n     * The currently selected index.\n     */\n    currentIndex: number;\n\n    /**\n     * The currently selected widget.\n     */\n    currentWidget: Widget | null;\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * Convert a tab placement to tab bar orientation.\n   */\n  export\n  function orientationFromPlacement(plc: TabPanel.TabPlacement): TabBar.Orientation {\n    return placementToOrientationMap[plc];\n  }\n\n  /**\n   * Convert a tab placement to a box layout direction.\n   */\n  export\n  function directionFromPlacement(plc: TabPanel.TabPlacement): BoxLayout.Direction {\n    return placementToDirectionMap[plc];\n  }\n\n  /**\n   * A mapping of tab placement to tab bar orientation.\n   */\n  const placementToOrientationMap: { [key: string]: TabBar.Orientation } = {\n    'top': 'horizontal',\n    'left': 'vertical',\n    'right': 'vertical',\n    'bottom': 'horizontal'\n  };\n\n  /**\n   * A mapping of tab placement to box layout direction.\n   */\n  const placementToDirectionMap: { [key: string]: BoxLayout.Direction } = {\n    'top': 'top-to-bottom',\n    'left': 'left-to-right',\n    'right': 'right-to-left',\n    'bottom': 'bottom-to-top'\n  };\n}\n"]}