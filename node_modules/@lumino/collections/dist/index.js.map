{"version":3,"file":"index.js","sources":["../src/bplustree.ts","../src/linkedlist.ts"],"sourcesContent":["// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2018, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  ArrayExt, IIterable, IIterator, IRetroable, IterableOrArrayLike, each, empty\n} from \"@lumino/algorithm\";\n\n\n/**\n * A generic B+ tree.\n *\n * #### Notes\n * Most operations have `O(log32 n)` or better complexity.\n */\nexport\nclass BPlusTree<T> implements IIterable<T>, IRetroable<T> {\n  /**\n   * Construct a new B+ tree.\n   *\n   * @param cmp - The item comparison function for the tree.\n   */\n  constructor(cmp: (a: T, b: T) => number) {\n    this.cmp = cmp;\n  }\n\n  /**\n   * The item comparison function for the tree.\n   *\n   * #### Complexity\n   * `O(1)`\n   */\n  readonly cmp: (a: T, b: T) => number;\n\n  /**\n   * Whether the tree is empty.\n   *\n   * #### Complexity\n   * `O(1)`\n   */\n  get isEmpty(): boolean {\n    return this._root.size === 0;\n  }\n\n  /**\n   * The size of the tree.\n   *\n   * #### Complexity\n   * `O(1)`\n   */\n  get size(): number {\n    return this._root.size;\n  }\n\n  /**\n   * The first item in the tree.\n   *\n   * This is `undefined` if the tree is empty.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  get first(): T | undefined {\n    let node = Private.firstLeaf(this._root);\n    return node.size > 0 ? node.items[0] : undefined;\n  }\n\n  /**\n   * The last item in the tree.\n   *\n   * This is `undefined` if the tree is empty.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  get last(): T | undefined {\n    let node = Private.lastLeaf(this._root);\n    return node.size > 0 ? node.items[node.size - 1] : undefined;\n  }\n\n  /**\n   * Create an iterator over the items in the tree.\n   *\n   * @returns A new iterator starting with the first item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  iter(): IIterator<T> {\n    return Private.iterItems(this._root);\n  }\n\n  /**\n   * Create a reverse iterator over the items in the tree.\n   *\n   * @returns A new iterator starting with the last item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  retro(): IIterator<T> {\n    return Private.retroItems(this._root);\n  }\n\n  /**\n   * Create an iterator for a slice of items in the tree.\n   *\n   * @param start - The index of the first item, inclusive. This\n   *   should be `< stop`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `0`.\n   *\n   * @param stop - The index of the last item, exclusive. This\n   *   should be `> start`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `size`.\n   *\n   * @returns A new iterator starting with the specified item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  slice(start?: number, stop?: number): IIterator<T> {\n    return Private.sliceItems(this._root, start, stop);\n  }\n\n  /**\n   * Create a reverse iterator for a slice of items in the tree.\n   *\n   * @param start - The index of the first item, inclusive. This\n   *   should be `> stop`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `size - 1`.\n   *\n   * @param stop - The index of the last item, exclusive. This\n   *   should be `< start`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `-size - 1`.\n   *\n   * @returns A new reverse iterator starting with the specified item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  retroSlice(start?: number, stop?: number): IIterator<T> {\n    return Private.retroSliceItems(this._root, start, stop);\n  }\n\n  /**\n   * Get the item at a particular index.\n   *\n   * @param index - The index of the item of interest. Negative\n   *   values are taken as an offset from the end of the tree.\n   *\n   * @returns The item at the specified index, or `undefined` if\n   *   the index is out of range.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  at(index: number): T | undefined {\n    return Private.itemAt(this._root, index);\n  }\n\n  /**\n   * Test whether the tree has an item which matches a key.\n   *\n   * @param key - The key of interest.\n   *\n   * @param cmp - A function which compares an item against the key.\n   *\n   * @returns `true` if the tree has an item which matches the given\n   *   key, `false` otherwise.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  has<U>(key: U, cmp: (item: T, key: U) => number): boolean {\n    return Private.hasItem(this._root, key, cmp);\n  }\n\n  /**\n   * Get the index of an item which matches a key.\n   *\n   * @param key - The key of interest.\n   *\n   * @param cmp - A function which compares an item against the key.\n   *\n   * @returns The index of the item which matches the given key. A\n   *   negative value means that a matching item does not exist in\n   *   the tree, but if one did it would reside at `-index - 1`.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  indexOf<U>(key: U, cmp: (item: T, key: U) => number): number {\n    return Private.indexOf(this._root, key, cmp);\n  }\n\n  /**\n   * Get the item which matches a key.\n   *\n   * @param item - The key of interest.\n   *\n   * @param cmp - A function which compares an item against the key.\n   *\n   * @returns The item which matches the given key, or `undefined` if\n   *   the tree does not have a matching item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  get<U>(key: U, cmp: (item: T, key: U) => number): T | undefined {\n    return Private.getItem(this._root, key, cmp);\n  }\n\n  /**\n   * Assign new items to the tree, replacing all current items.\n   *\n   * @param items - The items to assign to the tree.\n   *\n   * #### Complexity\n   * `O(n log32 n)`\n   */\n  assign(items: IterableOrArrayLike<T>): void {\n    this.clear();\n    this.update(items);\n  }\n\n  /**\n   * Insert an item into the tree.\n   *\n   * @param item - The item of interest.\n   *\n   * @returns If the given item matches an existing item in the tree,\n   *   the given item will replace it, and the existing item will be\n   *   returned. Otherwise, this method returns `undefined`.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  insert(item: T): T | undefined {\n    let existing = Private.insertItem(this._root, item, this.cmp);\n    this._root = Private.maybeSplitRoot(this._root);\n    return existing;\n  }\n\n  /**\n   * Update the tree with multiple items.\n   *\n   * @param items - The items to insert into the tree.\n   *\n   * #### Complexity\n   * `O(k log32 n)`\n   */\n  update(items: IterableOrArrayLike<T>): void {\n    each(items, item => { this.insert(item); });\n  }\n\n  /**\n   * Delete an item which matches a particular key.\n   *\n   * @param key - The key of interest.\n   *\n   * @param cmp - A function which compares an item against the key.\n   *\n   * @returns The item removed from the tree, or `undefined` if no\n   *   item matched the given key.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  delete<U>(key: U, cmp: (item: T, key: U) => number): T | undefined {\n    let item = Private.deleteItem(this._root, key, cmp);\n    this._root = Private.maybeExtractRoot(this._root);\n    return item;\n  }\n\n  /**\n   * Remove an item at a particular index.\n   *\n   * @param index - The index of the item to remove. Negative\n   *   values are taken as an offset from the end of the tree.\n   *\n   * @returns The item removed from the tree, or `undefined` if\n   *   the given index is out of range.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  remove(index: number): T | undefined {\n    let item = Private.removeItem(this._root, index);\n    this._root = Private.maybeExtractRoot(this._root);\n    return item;\n  }\n\n  /**\n   * Clear the contents of the tree.\n   *\n   * #### Complexity\n   * `O(n)`\n   */\n  clear(): void {\n    Private.clear(this._root);\n    this._root = new Private.LeafNode<T>();\n  }\n\n  private _root: Private.Node<T> = new Private.LeafNode<T>();\n}\n\n\n/**\n * The namespace for the `BPlusTree` class statics.\n */\nexport\nnamespace BPlusTree {\n  /**\n   * Create a new B+ tree populated with the given items.\n   *\n   * @param items - The items to add to the tree.\n   *\n   * @param cmp - The item comparison function for the tree.\n   *\n   * @returns A new B+ tree populated with the given items.\n   *\n   * #### Complexity\n   * `O(n log32 n)`\n   */\n  export\n  function from<T>(items: IterableOrArrayLike<T>, cmp: (a: T, b: T) => number): BPlusTree<T> {\n    let tree = new BPlusTree<T>(cmp);\n    tree.assign(items);\n    return tree;\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * A const enum of the B+ tree node types.\n   */\n  export\n  const enum NodeType { Branch, Leaf }\n\n  /**\n   * A branch node in a B+ tree.\n   */\n  export\n  class BranchNode<T> {\n    /**\n     * The left-most item of each child subtree.\n     */\n    readonly items: T[] = [];\n\n    /**\n     * The cumulative sizes of each child subtree.\n     */\n    readonly sizes: number[] = [];\n\n    /**\n     * The child nodes of this branch node.\n     */\n    readonly children: Node<T>[] = [];\n\n    /**\n     * The discriminated type of the node.\n     */\n    get type(): NodeType.Branch {\n      return NodeType.Branch;\n    }\n\n    /**\n     * The total number of items in the subtree.\n     */\n    get size(): number {\n      return this.sizes[this.sizes.length - 1];\n    }\n\n    /**\n     * The tree width of the node.\n     */\n    get width(): number {\n      return this.children.length;\n    }\n  }\n\n  /**\n   * A leaf node in a B+ tree.\n   */\n  export\n  class LeafNode<T> {\n    /**\n     * The next sibling leaf node of this leaf node.\n     */\n    next: LeafNode<T> | null = null;\n\n    /**\n     * The previous sibling leaf node of this leaf node.\n     */\n    prev: LeafNode<T> | null = null;\n\n    /**\n     * The items of the leaf.\n     */\n    readonly items: T[] = [];\n\n    /**\n     * The discriminated type of the node.\n     */\n    get type(): NodeType.Leaf {\n      return NodeType.Leaf;\n    }\n\n    /**\n     * The total number of items in the leaf.\n     */\n    get size(): number {\n      return this.items.length;\n    }\n\n    /**\n     * The tree width of the node.\n     */\n    get width(): number {\n      return this.items.length;\n    }\n  }\n\n  /**\n   * A type alias for the B+ tree nodes.\n   */\n  export\n  type Node<T> = BranchNode<T> | LeafNode<T>;\n\n  /**\n   * Get the first leaf node in the tree.\n   *\n   * @param node - The root node of interest.\n   *\n   * @returns The first leaf node in the tree.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export\n  function firstLeaf<T>(node: Node<T>): LeafNode<T> {\n    while (node.type === NodeType.Branch) {\n      node = node.children[0];\n    }\n    return node;\n  }\n\n  /**\n   * Get the last leaf node in the tree.\n   *\n   * @param node - The root node of interest.\n   *\n   * @returns The last leaf node in the tree.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export\n  function lastLeaf<T>(node: Node<T>): LeafNode<T> {\n    while (node.type === NodeType.Branch) {\n      node = node.children[node.children.length - 1];\n    }\n    return node;\n  }\n\n  /**\n   * Create a forward iterator for the items in the tree.\n   *\n   * @param node - The root node of interest.\n   *\n   * @returns A new forward iterator starting with the first item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export\n  function iterItems<T>(node: Node<T>): IIterator<T> {\n    let leaf = firstLeaf(node);\n    return new ForwardIterator<T>(leaf, 0, -1);\n  }\n\n  /**\n   * Create a reverse iterator for the items in the tree.\n   *\n   * @param node - The root node of interest.\n   *\n   * @returns A new reverse iterator starting with the last item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export\n  function retroItems<T>(node: Node<T>): IIterator<T> {\n    let leaf = lastLeaf(node);\n    return new RetroIterator<T>(leaf, leaf.size - 1, -1);\n  }\n\n  /**\n   * Create an iterator for a slice of items in the tree.\n   *\n   * @param node - The root node of interest.\n   *\n   * @param start - The index of the first item, inclusive. This\n   *   should be `< stop`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `0`.\n   *\n   * @param stop - The index of the last item, exclusive. This\n   *   should be `> start`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `size`.\n   *\n   * @returns A new iterator starting with the specified item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export\n  function sliceItems<T>(node: Node<T>, start?: number, stop?: number): IIterator<T> {\n    // Normalize the start index.\n    if (start === undefined) {\n      start = 0;\n    } else if (start < 0) {\n      start = Math.max(0, start + node.size);\n    } else {\n      start = Math.min(start, node.size);\n    }\n\n    // Normalize the stop index.\n    if (stop === undefined) {\n      stop = node.size;\n    } else if (stop < 0) {\n      stop = Math.max(0, stop + node.size);\n    } else {\n      stop = Math.min(stop, node.size);\n    }\n\n    // Compute effective count.\n    let count = Math.max(0, stop - start);\n\n    // Bail early if there is nothing to iterate.\n    if (count === 0) {\n      return empty<T>();\n    }\n\n    // Find the starting leaf node and local index.\n    while (node.type === NodeType.Branch) {\n      let i = findPivotIndexByIndex(node.sizes, start);\n      if (i > 0) start -= node.sizes[i - 1];\n      node = node.children[i];\n    }\n\n    // Return the forward iterator for the range.\n    return new ForwardIterator<T>(node, start, count);\n  }\n\n  /**\n   * Create a reverse iterator for a slice of items in the tree.\n   *\n   * @param node - The root node of interest.\n   *\n   * @param start - The index of the first item, inclusive. This\n   *   should be `> stop`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `size - 1`.\n   *\n   * @param stop - The index of the last item, exclusive. This\n   *   should be `< start`. Negative values are taken as an offset\n   *   from the end of the tree. The default is `-size - 1`.\n   *\n   * @returns A new reverse iterator starting with the specified item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export\n  function retroSliceItems<T>(node: Node<T>, start?: number, stop?: number): IIterator<T> {\n    // Normalize the start index.\n    if (start === undefined) {\n      start = node.size - 1;\n    } else if (start < 0) {\n      start = Math.max(-1, start + node.size);\n    } else {\n      start = Math.min(start, node.size - 1);\n    }\n\n    // Normalize the stop index.\n    if (stop === undefined) {\n      stop = -1;\n    } else if (stop < 0) {\n      stop = Math.max(-1, stop + node.size);\n    } else {\n      stop = Math.min(stop, node.size - 1);\n    }\n\n    // Compute the effective count.\n    let count = Math.max(0, start - stop);\n\n    // Bail early if there is nothing to iterate.\n    if (count === 0) {\n      return empty<T>();\n    }\n\n    // Find the starting leaf node and local index.\n    while (node.type === NodeType.Branch) {\n      let i = findPivotIndexByIndex(node.sizes, start);\n      if (i > 0) start -= node.sizes[i - 1];\n      node = node.children[i];\n    }\n\n    // Return the retro iterator for the range.\n    return new RetroIterator<T>(node, start, count);\n  }\n\n  /**\n   * Get the item at the specified index.\n   *\n   * @param node - The root node of interest.\n   *\n   * @param index - The index of the item of interest. Negative\n   *   values are taken as an offset from the end of the tree.\n   *\n   * @returns The item at the specified index, or `undefined` if\n   *   the index is out of range.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export\n  function itemAt<T>(node: Node<T>, index: number): T | undefined {\n    // Wrap negative indices.\n    if (index < 0) {\n      index += node.size;\n    }\n\n    // Bail early if the index is out of range.\n    if (index < 0 || index >= node.size) {\n      return undefined;\n    }\n\n    // Find the containing leaf node and local index.\n    while (node.type === NodeType.Branch) {\n      let i = findPivotIndexByIndex(node.sizes, index);\n      if (i > 0) index -= node.sizes[i - 1];\n      node = node.children[i];\n    }\n\n    // Return the item at the specified index.\n    return node.items[index];\n  }\n\n  /**\n   * Test whether the tree contains an item which matches a key.\n   *\n   * @param node - The root node of interest.\n   *\n   * @param key - The key of interest.\n   *\n   * @param cmp - The key comparison function.\n   *\n   * @returns Whether the tree contains a matching item.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export\n  function hasItem<T, U>(node: Node<T>, key: U, cmp: (item: T, key: U) => number): boolean {\n    // Find the containing leaf node.\n    while (node.type === NodeType.Branch) {\n      let i = findPivotIndexByKey(node.items, key, cmp);\n      node = node.children[i];\n    }\n\n    // Find the key index.\n    let i = findKeyIndex(node.items, key, cmp);\n\n    // Return whether or not the node contains a matching item.\n    return i >= 0;\n  }\n\n  /**\n   * Get the index of the item which matches a key.\n   *\n   * @param node - The node of interest.\n   *\n   * @param key - The key of interest.\n   *\n   * @param cmp - The key comparison function.\n   *\n   * @returns The index of the item which matches the given key. A\n   *   negative value means that a matching item does not exist in\n   *   the tree, but if one did it would reside at `-index - 1`.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export\n  function indexOf<T, U>(node: Node<T>, key: U, cmp: (item: T, key: U) => number): number {\n    // Set up the global index.\n    let index = 0;\n\n    // Find the containing leaf node and global index.\n    while (node.type === NodeType.Branch) {\n      let i = findPivotIndexByKey(node.items, key, cmp);\n      if (i > 0) index += node.sizes[i - 1];\n      node = node.children[i];\n    }\n\n    // Find the key index.\n    let i = findKeyIndex(node.items, key, cmp);\n\n    // Return the final computed index.\n    return i >= 0 ? index + i : -index + i;\n  }\n\n  /**\n   * Get the item for a particular key.\n   *\n   * @param node - The node of interest.\n   *\n   * @param key - The key of interest.\n   *\n   * @param cmp - The key comparison function.\n   *\n   * @returns The item for the specified key, or `undefined` if\n   *   the tree does not have a matching item for the key.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   */\n  export\n  function getItem<T, U>(node: Node<T>, key: U, cmp: (item: T, key: U) => number): T | undefined {\n    // Find the containing leaf node.\n    while (node.type === NodeType.Branch) {\n      let i = findPivotIndexByKey(node.items, key, cmp);\n      node = node.children[i];\n    }\n\n    // Find the key index.\n    let i = findKeyIndex(node.items, key, cmp);\n\n    // Return the item for the given key.\n    return i >= 0 ? node.items[i] : undefined;\n  }\n\n  /**\n   * Insert an item into the tree.\n   *\n   * @param node - The root node of interest.\n   *\n   * @param item - The item of interest.\n   *\n   * @param cmp - The item comparison function.\n   *\n   * @returns If the given item matches an existing item in the tree,\n   *   the given item will replace it, and the existing item will be\n   *   returned. Otherwise, this function returns `undefined`.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   *\n   * #### Notes\n   * The root may be overfull after calling this function.\n   */\n  export\n  function insertItem<T>(node: Node<T>, item: T, cmp: (a: T, b: T) => number): T | undefined {\n    // Handle leaf nodes first.\n    if (node.type === NodeType.Leaf) {\n      // Find the index for the given item.\n      let i = findKeyIndex(node.items, item, cmp);\n\n      // Fetch the existing item and insert the new item.\n      let existing: T | undefined;\n      if (i >= 0) {\n        existing = node.items[i];\n        node.items[i] = item;\n      } else {\n        existing = undefined;\n        ArrayExt.insert(node.items, -i - 1, item);\n      }\n\n      // Return the existing item.\n      return existing;\n    }\n\n    // Find the pivot index for the insert.\n    let i = findPivotIndexByKey(node.items, item, cmp);\n\n    // Fetch the pivot child.\n    let child = node.children[i];\n\n    // Fetch the current size of the child.\n    let prevSize = child.size;\n\n    // Recursively insert the item into the child.\n    let existing = insertItem(child, item, cmp);\n\n    // Fetch the updated size of the child.\n    let currSize = child.size;\n\n    // Update the item state of the branch.\n    node.items[i] = child.items[0];\n\n    // Bail early if the child size did not change.\n    if (prevSize === currSize) {\n      return existing;\n    }\n\n    // Split the child if it's overfull.\n    if (child.width > MAX_NODE_WIDTH) {\n      let next = splitNode(child);\n      ArrayExt.insert(node.children, i + 1, next);\n      ArrayExt.insert(node.items, i + 1, next.items[0]);\n    }\n\n    // Update the dirty sizes of the branch.\n    updateSizes(node, i);\n\n    // Return the existing item.\n    return existing;\n  }\n\n  /**\n   * Delete an item in the tree.\n   *\n   * @param node - The node of interest.\n   *\n   * @param key - The key of interest.\n   *\n   * @param cmp - The key comparison function.\n   *\n   * @returns The deleted item or `undefined`.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   *\n   * #### Notes\n   * The root may be underfull after calling this function.\n   */\n  export\n  function deleteItem<T, U>(node: Node<T>, key: U, cmp: (item: T, key: U) => number): T | undefined {\n    // Handle leaf nodes first.\n    if (node.type === NodeType.Leaf) {\n      // Find the index for the given key.\n      let i = findKeyIndex(node.items, key, cmp);\n\n      // Bail early if the item does not exist.\n      if (i < 0) {\n        return undefined;\n      }\n\n      // Remove the item at the computed index.\n      return ArrayExt.removeAt(node.items, i);\n    }\n\n    // Find the pivot index for the delete.\n    let i = findPivotIndexByKey(node.items, key, cmp);\n\n    // Fetch the pivot child.\n    let child = node.children[i];\n\n    // Fetch the current size of the child.\n    let prevSize = child.size;\n\n    // Recursively remove the item from the child.\n    let item = deleteItem(child, key, cmp);\n\n    // Fetch the updated size of the child.\n    let currSize = child.size;\n\n    // Bail early if the child size did not change.\n    if (prevSize === currSize) {\n      return item;\n    }\n\n    // Update the item state of the branch.\n    node.items[i] = child.items[0];\n\n    // Join the child if it's underfull.\n    if (child.width < MIN_NODE_WIDTH) {\n      i = joinChild(node, i);\n    }\n\n    // Update the dirty sizes of the branch.\n    updateSizes(node, i);\n\n    // Return the deleted item.\n    return item;\n  }\n\n  /**\n   * Remove an item from the tree.\n   *\n   * @param node - The node of interest.\n   *\n   * @param index - The index of interest.\n   *\n   * @returns The removed item or `undefined`.\n   *\n   * #### Complexity\n   * `O(log32 n)`\n   *\n   * #### Notes\n   * The root may be underfull after calling this function.\n   */\n  export\n  function removeItem<T>(node: Node<T>, index: number): T | undefined {\n    // Wrap negative indices.\n    if (index < 0) {\n      index += node.size;\n    }\n\n    // Bail early if the index is out of range.\n    if (index < 0 || index >= node.size) {\n      return undefined;\n    }\n\n    // Handle leaf nodes first.\n    if (node.type === NodeType.Leaf) {\n      return ArrayExt.removeAt(node.items, index);\n    }\n\n    // Find the pivot index for the remove.\n    let i = findPivotIndexByIndex(node.sizes, index);\n    if (i > 0) index -= node.sizes[i];\n\n    // Fetch the pivot child.\n    let child = node.children[i];\n\n    // Recursively remove the item from the child.\n    let item = removeItem(child, index);\n\n    // Update the item state of the branch.\n    node.items[i] = child.items[0];\n\n    // Join the child if it's underfull.\n    if (child.width < MIN_NODE_WIDTH) {\n      i = joinChild(node, i);\n    }\n\n    // Update the dirty sizes of the branch.\n    updateSizes(node, i);\n\n    // Return the removed item.\n    return item;\n  }\n\n  /**\n   * Recursively clear the contents of a node.\n   *\n   * @param node - The node of interest.\n   *\n   * #### Complexity\n   * `O(n)`\n   */\n  export\n  function clear<T>(node: Node<T>): void {\n    if (node.type === NodeType.Branch) {\n      each(node.children, clear);\n      node.children.length = 0;\n      node.sizes.length = 0;\n      node.items.length = 0;\n    } else {\n      node.items.length = 0;\n      node.next = null;\n      node.prev = null;\n    }\n  }\n\n  /**\n   * Split a root node and create a new root, if needed.\n   *\n   * @param node - The root node of interest.\n   *\n   * @returns The new root node.\n   */\n  export\n  function maybeSplitRoot<T>(node: Node<T>): Node<T> {\n    // Bail early if the current root is not overfull.\n    if (node.width <= MAX_NODE_WIDTH) {\n      return node;\n    }\n\n    // Create a new root branch node.\n    let root = new BranchNode<T>();\n\n    // Split the node to the right and create a new sibling.\n    let next = splitNode(node);\n\n    // Add the sizes to the root.\n    root.sizes[0] = node.size;\n    root.sizes[1] = node.size + next.size;\n\n    // Add the children to the root.\n    root.children[0] = node;\n    root.children[1] = next;\n\n    // Add the items to the root.\n    root.items[0] = node.items[0];\n    root.items[1] = next.items[0];\n\n    // Return the new root node.\n    return root;\n  }\n\n  /**\n   * Extract a single node child as a new root, if needed.\n   *\n   * @param node - The root node of interest.\n   *\n   * @returns The new root node.\n   */\n  export\n  function maybeExtractRoot<T>(node: Node<T>): Node<T> {\n    // Bail early if the node it already a leaf.\n    if (node.type === NodeType.Leaf) {\n      return node;\n    }\n\n    // Bail early if the branch has more than one child.\n    if (node.children.length > 1) {\n      return node;\n    }\n\n    // Extract the sole remaining child as the new root.\n    let root = node.children.pop()!;\n\n    // Clear the rest of the node state.\n    clear(node);\n\n    // Return the new root.\n    return root;\n  }\n\n  /**\n   * The maximum width for a node in the tree.\n   */\n  const MAX_NODE_WIDTH = 32;\n\n  /**\n   * The minimum width for a node in the tree.\n   */\n  const MIN_NODE_WIDTH = MAX_NODE_WIDTH >> 1;\n\n  /**\n   * A forward iterator for a B+ tree.\n   */\n  class ForwardIterator<T> implements IIterator<T> {\n    /**\n     * Construct a new forward iterator.\n     *\n     * @param node - The first leaf node in the chain.\n     *\n     * @param index - The local index of the first item.\n     *\n     * @param count - The number of items to iterate. A value `< 0`\n     *   will iterate all available items.\n     */\n    constructor(node: LeafNode<T> | null, index: number, count: number) {\n      this._node = node;\n      this._index = index;\n      this._count = count;\n    }\n\n    /**\n     * Get an iterator over the object's values.\n     *\n     * @returns An iterator which yields the object's values.\n     */\n    iter(): IIterator<T> {\n      return this;\n    }\n\n    /**\n     * Create an independent clone of the iterator.\n     *\n     * @returns A new independent clone of the iterator.\n     */\n    clone(): IIterator<T> {\n      return new ForwardIterator<T>(this._node, this._index, this._count);\n    }\n\n    /**\n     * Get the next value from the iterator.\n     *\n     * @returns The next value from the iterator, or `undefined`.\n     */\n    next(): T | undefined {\n      if (this._node === null || this._count === 0) {\n        return undefined;\n      }\n      if (this._index >= this._node.size) {\n        this._node = this._node.next;\n        this._index = 0;\n        return this.next();\n      }\n      if (this._count > 0) {\n        this._count--;\n      }\n      return this._node.items[this._index++];\n    }\n\n    private _index: number;\n    private _count: number;\n    private _node: LeafNode<T> | null;\n  }\n\n  /**\n   * A reverse iterator for a B+ tree.\n   */\n  class RetroIterator<T> implements IIterator<T> {\n    /**\n     * Construct a new retro iterator.\n     *\n     * @param node - The last leaf node in the chain.\n     *\n     * @param index - The local index of the last item.\n     *\n     * @param count - The number of items to iterate. A value `< 0`\n     *   will iterate all available items.\n     */\n    constructor(node: LeafNode<T> | null, index: number, count: number) {\n      this._node = node;\n      this._index = index;\n      this._count = count;\n    }\n\n    /**\n     * Get an iterator over the object's values.\n     *\n     * @returns An iterator which yields the object's values.\n     */\n    iter(): IIterator<T> {\n      return this;\n    }\n\n    /**\n     * Create an independent clone of the iterator.\n     *\n     * @returns A new independent clone of the iterator.\n     */\n    clone(): IIterator<T> {\n      return new RetroIterator<T>(this._node, this._index, this._count);\n    }\n\n    /**\n     * Get the next value from the iterator.\n     *\n     * @returns The next value from the iterator, or `undefined`.\n     */\n    next(): T | undefined {\n      if (this._node === null || this._count === 0) {\n        return undefined;\n      }\n      if (this._index >= this._node.size) {\n        this._index = this._node.size - 1;\n      }\n      if (this._index < 0) {\n        this._node = this._node.prev;\n        this._index = this._node ? this._node.size - 1 : -1;\n        return this.next();\n      }\n      if (this._count > 0) {\n        this._count--;\n      }\n      return this._node.items[this._index--];\n    }\n\n    private _index: number;\n    private _count: number;\n    private _node: LeafNode<T> | null;\n  }\n\n  /**\n   * Find the pivot index for a particular local index.\n   */\n  function findPivotIndexByIndex(sizes: number[], index: number): number {\n    let n = sizes.length;\n    for (let i = 0; i < n; ++i) {\n      if (sizes[i] > index) {\n        return i;\n      }\n    }\n    return n - 1;\n  }\n\n  /**\n   * Find the pivot index for a particular key.\n   */\n  function findPivotIndexByKey<T, U>(items: T[], key: U, cmp: (item: T, key: U) => number): number {\n    let n = items.length;\n    for (let i = 1; i < n; ++i) {\n      if (cmp(items[i], key) > 0) {\n        return i - 1;\n      }\n    }\n    return n - 1;\n  }\n\n  /**\n   * Find the key index for a particular key.\n   */\n  function findKeyIndex<T, U>(items: T[], key: U, cmp: (item: T, key: U) => number): number {\n    let n = items.length;\n    for (let i = 0; i < n; ++i) {\n      let c = cmp(items[i], key);\n      if (c === 0) {\n        return i;\n      }\n      if (c > 0) {\n        return -i - 1;\n      }\n    }\n    return -n - 1;\n  }\n\n  /**\n   * Update the sizes of a branch node starting at the given index.\n   */\n  function updateSizes<T>(node: BranchNode<T>, i: number): void {\n    let { sizes, children } = node;\n    let last = i > 0 ? sizes[i - 1] : 0;\n    for (let n = children.length; i < n; ++i) {\n      last = sizes[i] = last + children[i].size;\n    }\n    sizes.length = children.length;\n  }\n\n  /**\n   * Split a node and return its new next sibling.\n   *\n   * @param node - The node of interest.\n   *\n   * @returns The new next sibling node.\n   */\n  function splitNode<T>(node: Node<T>): Node<T> {\n    // Handle leaf nodes first.\n    if (node.type === NodeType.Leaf) {\n      // Create the new sibling leaf node.\n      let next = new LeafNode<T>();\n\n      // Move the items to the new sibling.\n      let v1 = node.items;\n      let v2 = next.items;\n      for (let i = MIN_NODE_WIDTH, n = v1.length; i < n; ++i) {\n        v2.push(v1[i]);\n      }\n      v1.length = MIN_NODE_WIDTH;\n\n      // Patch up the sibling links.\n      if (node.next) node.next.prev = next;\n      next.next = node.next;\n      next.prev = node;\n      node.next = next;\n\n      // Return the new next sibling.\n      return next;\n    }\n\n    // Create the new sibling branch node.\n    let next = new BranchNode<T>();\n\n    // Move the children to the new sibling.\n    let c1 = node.children;\n    let c2 = next.children;\n    for (let i = MIN_NODE_WIDTH, n = c1.length; i < n; ++i) {\n      c2.push(c1[i]);\n    }\n    c1.length = MIN_NODE_WIDTH;\n\n    // Move the items to the new sibling.\n    let v1 = node.items;\n    let v2 = next.items;\n    for (let i = MIN_NODE_WIDTH, n = v1.length; i < n; ++i) {\n      v2.push(v1[i]);\n    }\n    v1.length = MIN_NODE_WIDTH;\n\n    // Update the dirty sizes of the nodes.\n    updateSizes(node, MIN_NODE_WIDTH);\n    updateSizes(next, 0);\n\n    // Return the new next sibling.\n    return next;\n  }\n\n  /**\n   * Join a child node of a branch with one of its siblings.\n   *\n   * @param node - The branch node of interest.\n   *\n   * @param i - The index of the child node of interest.\n   *\n   * @returns The first modified index.\n   *\n   * #### Notes\n   * This may cause the branch to become underfull.\n   */\n  function joinChild<T>(node: BranchNode<T>, i: number): number {\n    // Fetch the child to be joined.\n    let child = node.children[i];\n\n    // Fetch the relevant sibling.\n    let sibling = i === 0 ? node.children[i + 1] : node.children[i - 1];\n\n    // Compute the flags which control the join behavior.\n    let hasNext = i === 0;\n    let isLeaf = child.type === NodeType.Leaf;\n    let hasExtra = sibling.width > MIN_NODE_WIDTH;\n\n    // Join case #1: steal from next sibling leaf\n    if (isLeaf && hasExtra && hasNext) {\n      // Cast the children as leaves.\n      let c = child as LeafNode<T>;\n      let s = sibling as LeafNode<T>;\n\n      // Steal an item.\n      c.items.push(s.items.shift()!);\n\n      // Update the branch items.\n      node.items[i + 1] = s.items[0];\n\n      // Return the first modified index.\n      return i;\n    }\n\n    // Join case #2: steal from previous sibling leaf\n    if (isLeaf && hasExtra && !hasNext) {\n      // Cast the children as leaves.\n      let c = child as LeafNode<T>;\n      let s = sibling as LeafNode<T>;\n\n      // Steal an item.\n      c.items.unshift(s.items.pop()!);\n\n      // Update the branch items.\n      node.items[i] = c.items[0];\n\n      // Return the first modified index.\n      return i - 1;\n    }\n\n    // Join case #3: merge with next sibling leaf\n    if (isLeaf && !hasExtra && hasNext) {\n      // Cast the children as leaves.\n      let c = child as LeafNode<T>;\n      let s = sibling as LeafNode<T>;\n\n      // Merge items.\n      s.items.unshift(...c.items);\n\n      // Remove the old branch child.\n      ArrayExt.removeAt(node.children, i);\n\n      // Remove the stale branch item.\n      ArrayExt.removeAt(node.items, i + 1);\n\n      // Patch up the sibling links.\n      if (c.prev) c.prev.next = s;\n      s.prev = c.prev;\n\n      // Clear the original child.\n      clear(c);\n\n      // Return the first modified index.\n      return i;\n    }\n\n    // Join case #4: merge with previous sibling leaf\n    if (isLeaf && !hasExtra && !hasNext) {\n      // Cast the children as leaves.\n      let c = child as LeafNode<T>;\n      let s = sibling as LeafNode<T>;\n\n      // Merge items.\n      s.items.push(...c.items);\n\n      // Remove the old branch child.\n      ArrayExt.removeAt(node.children, i);\n\n      // Remove the stale branch item.\n      ArrayExt.removeAt(node.items, i);\n\n      // Patch up the sibling links.\n      if (c.next) c.next.prev = s;\n      s.next = c.next;\n\n      // Clear the original child.\n      clear(c);\n\n      // Return the first modified index.\n      return i - 1;\n    }\n\n    // Join case #5: steal from next sibling branch\n    if (!isLeaf && hasExtra && hasNext) {\n      // Cast the children to branches.\n      let c = child as BranchNode<T>;\n      let s = sibling as BranchNode<T>;\n\n      // Steal a child from the next sibling.\n      c.children.push(s.children.shift()!);\n\n      // Steal an item from the next sibling.\n      c.items.push(s.items.shift()!);\n\n      // Update the branch items.\n      node.items[i + 1] = s.items[0];\n\n      // Update the sibling sizes.\n      updateSizes(c, c.width - 1);\n      updateSizes(s, 0);\n\n      // Return the first modified index.\n      return i;\n    }\n\n    // Join case #6: steal from previous sibling branch\n    if (!isLeaf && hasExtra && !hasNext) {\n      // Cast the children to branches.\n      let c = child as BranchNode<T>;\n      let s = sibling as BranchNode<T>;\n\n      // Steal a child from the previous sibling.\n      c.children.unshift(s.children.pop()!);\n\n      // Steal an item from the previous sibling.\n      c.items.unshift(s.items.pop()!);\n\n      // Update the branch items.\n      node.items[i] = c.items[0];\n\n      // Update the sibling sizes.\n      updateSizes(c, 0);\n      updateSizes(s, s.width - 1);\n\n      // Return the first modified index.\n      return i - 1;\n    }\n\n    // Join case #7: merge with next sibling branch\n    if (!isLeaf && !hasExtra && hasNext) {\n      // Cast the children to branches.\n      let c = child as BranchNode<T>;\n      let s = sibling as BranchNode<T>;\n\n      // Merge the children with the next sibling.\n      s.children.unshift(...c.children);\n\n      // Merge the items with the next sibling.\n      s.items.unshift(...c.items);\n\n      // Remove the old branch child.\n      ArrayExt.removeAt(node.children, i);\n\n      // Remove the stale branch item.\n      ArrayExt.removeAt(node.items, i + 1);\n\n      // Update the sibling sizes.\n      updateSizes(s, 0);\n\n      // Clear the original child but, not its children.\n      c.children.length = 0;\n      clear(c);\n\n      // Return the first modified index.\n      return i;\n    }\n\n    // Join case #8: merge with previous sibling branch\n    if (!isLeaf && !hasExtra && !hasNext) {\n      // Cast the children to branches.\n      let c = child as BranchNode<T>;\n      let s = sibling as BranchNode<T>;\n\n      // Merge the children with the previous sibling.\n      s.children.push(...c.children);\n\n      // Merge the items with the previous sibling.\n      s.items.push(...c.items);\n\n      // Remove the old branch child.\n      ArrayExt.removeAt(node.children, i);\n\n      // Remove the stale branch item.\n      ArrayExt.removeAt(node.items, i);\n\n      // Update the sibling sizes.\n      updateSizes(s, 0);\n\n      // Clear the original child, but not its children.\n      c.children.length = 0;\n      clear(c);\n\n      // Return the first modified index.\n      return i - 1;\n    }\n\n    // One of the above cases must match.\n    throw 'unreachable';\n  }\n}\n","// Copyright (c) Jupyter Development Team.\n// Distributed under the terms of the Modified BSD License.\n/*-----------------------------------------------------------------------------\n| Copyright (c) 2014-2017, PhosphorJS Contributors\n|\n| Distributed under the terms of the BSD 3-Clause License.\n|\n| The full license is in the file LICENSE, distributed with this software.\n|----------------------------------------------------------------------------*/\nimport {\n  IIterable, IIterator, IRetroable, IterableOrArrayLike, each\n} from '@lumino/algorithm';\n\n\n/**\n * A generic doubly-linked list.\n */\nexport\nclass LinkedList<T> implements IIterable<T>, IRetroable<T> {\n  /**\n   * Construct a new linked list.\n   */\n  constructor() { }\n\n  /**\n   * Whether the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get isEmpty(): boolean {\n    return this._size === 0;\n  }\n\n  /**\n   * The size of the list.\n   *\n   * #### Complexity\n   * `O(1)`\n   *\n   * #### Notes\n   * This is equivalent to `length`.\n   */\n  get size(): number {\n    return this._size;\n  }\n\n  /**\n   * The length of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `size`.\n   *\n   * This property is deprecated.\n   */\n  get length(): number {\n    return this._size;\n  }\n\n  /**\n   * The first value in the list.\n   *\n   * This is `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get first(): T | undefined {\n    return this._first ? this._first.value : undefined;\n  }\n\n  /**\n   * The last value in the list.\n   *\n   * This is `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get last(): T | undefined {\n    return this._last ? this._last.value : undefined;\n  }\n\n  /**\n   * The first node in the list.\n   *\n   * This is `null` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get firstNode(): LinkedList.INode<T> | null {\n    return this._first;\n  }\n\n  /**\n   * The last node in the list.\n   *\n   * This is `null` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  get lastNode(): LinkedList.INode<T> | null {\n    return this._last;\n  }\n\n  /**\n   * Create an iterator over the values in the list.\n   *\n   * @returns A new iterator starting with the first value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  iter(): IIterator<T> {\n    return new LinkedList.ForwardValueIterator<T>(this._first);\n  }\n\n  /**\n   * Create a reverse iterator over the values in the list.\n   *\n   * @returns A new iterator starting with the last value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  retro(): IIterator<T> {\n    return new LinkedList.RetroValueIterator<T>(this._last);\n  }\n\n  /**\n   * Create an iterator over the nodes in the list.\n   *\n   * @returns A new iterator starting with the first node.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  nodes(): IIterator<LinkedList.INode<T>> {\n    return new LinkedList.ForwardNodeIterator<T>(this._first);\n  }\n\n  /**\n   * Create a reverse iterator over the nodes in the list.\n   *\n   * @returns A new iterator starting with the last node.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  retroNodes(): IIterator<LinkedList.INode<T>> {\n    return new LinkedList.RetroNodeIterator<T>(this._last);\n  }\n\n  /**\n   * Assign new values to the list, replacing all current values.\n   *\n   * @param values - The values to assign to the list.\n   *\n   * #### Complexity\n   * Linear.\n   */\n  assign(values: IterableOrArrayLike<T>): void {\n    this.clear();\n    each(values, value => { this.addLast(value); });\n  }\n\n  /**\n   * Add a value to the end of the list.\n   *\n   * @param value - The value to add to the end of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `addLast`.\n   */\n  push(value: T): void {\n    this.addLast(value);\n  }\n\n  /**\n   * Remove and return the value at the end of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `removeLast`.\n   */\n  pop(): T | undefined {\n    return this.removeLast();\n  }\n\n  /**\n   * Add a value to the beginning of the list.\n   *\n   * @param value - The value to add to the beginning of the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `addFirst`.\n   */\n  shift(value: T): void {\n    this.addFirst(value);\n  }\n\n  /**\n   * Remove and return the value at the beginning of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * This is equivalent to `removeFirst`.\n   */\n  unshift(): T | undefined {\n    return this.removeFirst();\n  }\n\n  /**\n   * Add a value to the beginning of the list.\n   *\n   * @param value - The value to add to the beginning of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  addFirst(value: T): LinkedList.INode<T> {\n    let node = new Private.LinkedListNode<T>(this, value);\n    if (!this._first) {\n      this._first = node;\n      this._last = node;\n    } else {\n      node.next = this._first;\n      this._first.prev = node;\n      this._first = node;\n    }\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Add a value to the end of the list.\n   *\n   * @param value - The value to add to the end of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  addLast(value: T): LinkedList.INode<T> {\n    let node = new Private.LinkedListNode<T>(this, value);\n    if (!this._last) {\n      this._first = node;\n      this._last = node;\n    } else {\n      node.prev = this._last;\n      this._last.next = node;\n      this._last = node;\n    }\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Insert a value before a specific node in the list.\n   *\n   * @param value - The value to insert before the reference node.\n   *\n   * @param ref - The reference node of interest. If this is `null`,\n   *   the value will be added to the beginning of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Notes\n   * The reference node must be owned by the list.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  insertBefore(value: T, ref: LinkedList.INode<T> | null): LinkedList.INode<T> {\n    if (!ref || ref === this._first) {\n      return this.addFirst(value);\n    }\n    if (!(ref instanceof Private.LinkedListNode) || ref.list !== this) {\n      throw new Error('Reference node is not owned by the list.');\n    }\n    let node = new Private.LinkedListNode<T>(this, value);\n    let _ref = ref as Private.LinkedListNode<T>;\n    let prev = _ref.prev!;\n    node.next = _ref;\n    node.prev = prev;\n    _ref.prev = node;\n    prev.next = node;\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Insert a value after a specific node in the list.\n   *\n   * @param value - The value to insert after the reference node.\n   *\n   * @param ref - The reference node of interest. If this is `null`,\n   *   the value will be added to the end of the list.\n   *\n   * @returns The list node which holds the value.\n   *\n   * #### Notes\n   * The reference node must be owned by the list.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  insertAfter(value: T, ref: LinkedList.INode<T> | null): LinkedList.INode<T> {\n    if (!ref || ref === this._last) {\n      return this.addLast(value);\n    }\n    if (!(ref instanceof Private.LinkedListNode) || ref.list !== this) {\n      throw new Error('Reference node is not owned by the list.');\n    }\n    let node = new Private.LinkedListNode<T>(this, value);\n    let _ref = ref as Private.LinkedListNode<T>;\n    let next = _ref.next!;\n    node.next = next;\n    node.prev = _ref;\n    _ref.next = node;\n    next.prev = node;\n    this._size++;\n    return node;\n  }\n\n  /**\n   * Remove and return the value at the beginning of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  removeFirst(): T | undefined {\n    let node = this._first;\n    if (!node) {\n      return undefined;\n    }\n    if (node === this._last) {\n      this._first = null;\n      this._last = null;\n    } else {\n      this._first = node.next;\n      this._first!.prev = null;\n    }\n    node.list = null;\n    node.next = null;\n    node.prev = null;\n    this._size--;\n    return node.value;\n  }\n\n  /**\n   * Remove and return the value at the end of the list.\n   *\n   * @returns The removed value, or `undefined` if the list is empty.\n   *\n   * #### Complexity\n   * Constant.\n   */\n  removeLast(): T | undefined {\n    let node = this._last;\n    if (!node) {\n      return undefined;\n    }\n    if (node === this._first) {\n      this._first = null;\n      this._last = null;\n    } else {\n      this._last = node.prev;\n      this._last!.next = null;\n    }\n    node.list = null;\n    node.next = null;\n    node.prev = null;\n    this._size--;\n    return node.value;\n  }\n\n  /**\n   * Remove a specific node from the list.\n   *\n   * @param node - The node to remove from the list.\n   *\n   * #### Complexity\n   * Constant.\n   *\n   * #### Notes\n   * The node must be owned by the list.\n   */\n  removeNode(node: LinkedList.INode<T>): void {\n    if (!(node instanceof Private.LinkedListNode) || node.list !== this) {\n      throw new Error('Node is not owned by the list.');\n    }\n    let _node = node as Private.LinkedListNode<T>;\n    if (_node === this._first && _node === this._last) {\n      this._first = null;\n      this._last = null;\n    } else if (_node === this._first) {\n      this._first = _node.next;\n      this._first!.prev = null;\n    } else if (_node === this._last) {\n      this._last = _node.prev;\n      this._last!.next = null;\n    } else {\n      _node.next!.prev = _node.prev;\n      _node.prev!.next = _node.next;\n    }\n    _node.list = null;\n    _node.next = null;\n    _node.prev = null;\n    this._size--;\n  }\n\n  /**\n   * Remove all values from the list.\n   *\n   * #### Complexity\n   * Linear.\n   */\n  clear(): void {\n    let node = this._first;\n    while (node) {\n      let next = node.next;\n      node.list = null;\n      node.prev = null;\n      node.next = null;\n      node = next;\n    }\n    this._first = null;\n    this._last = null;\n    this._size = 0;\n  }\n\n  private _first: Private.LinkedListNode<T> | null = null;\n  private _last: Private.LinkedListNode<T> | null = null;\n  private _size = 0;\n}\n\n\n/**\n * The namespace for the `LinkedList` class statics.\n */\nexport\nnamespace LinkedList {\n  /**\n   * An object which represents a node in a linked list.\n   *\n   * #### Notes\n   * User code will not create linked list nodes directly. Nodes\n   * are created automatically when values are added to a list.\n   */\n  export\n  interface INode<T> {\n    /**\n     * The linked list which created and owns the node.\n     *\n     * This will be `null` when the node is removed from the list.\n     */\n    readonly list: LinkedList<T> | null;\n\n    /**\n     * The next node in the list.\n     *\n     * This will be `null` when the node is the last node in the list\n     * or when the node is removed from the list.\n     */\n    readonly next: INode<T> | null;\n\n    /**\n     * The previous node in the list.\n     *\n     * This will be `null` when the node is the first node in the list\n     * or when the node is removed from the list.\n     */\n    readonly prev: INode<T> | null;\n\n    /**\n     * The user value stored in the node.\n     */\n    readonly value: T;\n  }\n\n  /**\n   * Create a linked list from an iterable of values.\n   *\n   * @param values - The iterable or array-like object of interest.\n   *\n   * @returns A new linked list initialized with the given values.\n   *\n   * #### Complexity\n   * Linear.\n   */\n  export\n  function from<T>(values: IterableOrArrayLike<T>): LinkedList<T> {\n    let list = new LinkedList<T>();\n    list.assign(values);\n    return list;\n  }\n\n  /**\n   * A forward iterator for values in a linked list.\n   */\n  export\n  class ForwardValueIterator<T> implements IIterator<T> {\n    /**\n     * Construct a forward value iterator.\n     *\n     * @param node - The first node in the list.\n     */\n    constructor(node: INode<T> | null) {\n      this._node = node;\n    }\n\n    /**\n     * Get an iterator over the object's values.\n     *\n     * @returns An iterator which yields the object's values.\n     */\n    iter(): IIterator<T> {\n      return this;\n    }\n\n    /**\n     * Create an independent clone of the iterator.\n     *\n     * @returns A new independent clone of the iterator.\n     */\n    clone(): IIterator<T> {\n      return new ForwardValueIterator<T>(this._node);\n    }\n\n    /**\n     * Get the next value from the iterator.\n     *\n     * @returns The next value from the iterator, or `undefined`.\n     */\n    next(): T | undefined {\n      if (!this._node) {\n        return undefined;\n      }\n      let node = this._node;\n      this._node = node.next;\n      return node.value;\n    }\n\n    private _node: INode<T> | null;\n  }\n\n  /**\n   * A reverse iterator for values in a linked list.\n   */\n  export\n  class RetroValueIterator<T> implements IIterator<T> {\n    /**\n     * Construct a retro value iterator.\n     *\n     * @param node - The last node in the list.\n     */\n    constructor(node: INode<T> | null) {\n      this._node = node;\n    }\n\n    /**\n     * Get an iterator over the object's values.\n     *\n     * @returns An iterator which yields the object's values.\n     */\n    iter(): IIterator<T> {\n      return this;\n    }\n\n    /**\n     * Create an independent clone of the iterator.\n     *\n     * @returns A new independent clone of the iterator.\n     */\n    clone(): IIterator<T> {\n      return new RetroValueIterator<T>(this._node);\n    }\n\n    /**\n     * Get the next value from the iterator.\n     *\n     * @returns The next value from the iterator, or `undefined`.\n     */\n    next(): T | undefined {\n      if (!this._node) {\n        return undefined;\n      }\n      let node = this._node;\n      this._node = node.prev;\n      return node.value;\n    }\n\n    private _node: INode<T> | null;\n  }\n\n  /**\n   * A forward iterator for nodes in a linked list.\n   */\n  export\n  class ForwardNodeIterator<T> implements IIterator<INode<T>> {\n    /**\n     * Construct a forward node iterator.\n     *\n     * @param node - The first node in the list.\n     */\n    constructor(node: INode<T> | null) {\n      this._node = node;\n    }\n\n    /**\n     * Get an iterator over the object's values.\n     *\n     * @returns An iterator which yields the object's values.\n     */\n    iter(): IIterator<INode<T>> {\n      return this;\n    }\n\n    /**\n     * Create an independent clone of the iterator.\n     *\n     * @returns A new independent clone of the iterator.\n     */\n    clone(): IIterator<INode<T>> {\n      return new ForwardNodeIterator<T>(this._node);\n    }\n\n    /**\n     * Get the next value from the iterator.\n     *\n     * @returns The next value from the iterator, or `undefined`.\n     */\n    next(): INode<T> | undefined {\n      if (!this._node) {\n        return undefined;\n      }\n      let node = this._node;\n      this._node = node.next;\n      return node;\n    }\n\n    private _node: INode<T> | null;\n  }\n\n  /**\n   * A reverse iterator for nodes in a linked list.\n   */\n  export\n  class RetroNodeIterator<T> implements IIterator<INode<T>> {\n    /**\n     * Construct a retro node iterator.\n     *\n     * @param node - The last node in the list.\n     */\n    constructor(node: INode<T> | null) {\n      this._node = node;\n    }\n\n    /**\n     * Get an iterator over the object's values.\n     *\n     * @returns An iterator which yields the object's values.\n     */\n    iter(): IIterator<INode<T>> {\n      return this;\n    }\n\n    /**\n     * Create an independent clone of the iterator.\n     *\n     * @returns A new independent clone of the iterator.\n     */\n    clone(): IIterator<INode<T>> {\n      return new RetroNodeIterator<T>(this._node);\n    }\n\n    /**\n     * Get the next value from the iterator.\n     *\n     * @returns The next value from the iterator, or `undefined`.\n     */\n    next(): INode<T> | undefined {\n      if (!this._node) {\n        return undefined;\n      }\n      let node = this._node;\n      this._node = node.prev;\n      return node;\n    }\n\n    private _node: INode<T> | null;\n  }\n}\n\n\n/**\n * The namespace for the module implementation details.\n */\nnamespace Private {\n  /**\n   * The internal linked list node implementation.\n   */\n  export\n  class LinkedListNode<T> {\n    /**\n     * The linked list which created and owns the node.\n     */\n    list: LinkedList<T> | null = null;\n\n    /**\n     * The next node in the list.\n     */\n    next: LinkedListNode<T> | null = null;\n\n    /**\n     * The previous node in the list.\n     */\n    prev: LinkedListNode<T> | null = null;\n\n    /**\n     * The user value stored in the node.\n     */\n    readonly value: T;\n\n    /**\n     * Construct a new linked list node.\n     *\n     * @param list - The list which owns the node.\n     *\n     * @param value - The value for the link.\n     */\n    constructor(list: LinkedList<T>, value: T) {\n      this.list = list;\n      this.value = value;\n    }\n  }\n}\n"],"names":["each","BPlusTree","empty","ArrayExt","Private","LinkedList"],"mappings":"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"}