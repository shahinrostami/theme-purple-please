export function create<T>(f: (arg0: PromiseResolve<T>, arg1: (arg0: Error) => void) => any): Promise<T>;
export function createEmpty(f: (arg0: () => void, arg1: (arg0: Error) => void) => void): Promise<void>;
export function all<T>(arrp: Promise<T>[]): Promise<T[]>;
export function reject(reason?: Error | undefined): Promise<never>;
export function resolve<T>(res: void | T): Promise<void | T>;
export function until(timeout: number, check: () => boolean, intervalResolution?: number | undefined): Promise<void>;
export function wait(timeout: number): Promise<undefined>;
export function isPromise(p: any): boolean;
export type PromiseResolve<T> = (result?: T | PromiseLike<T> | undefined) => any;
//# sourceMappingURL=promise.d.ts.map